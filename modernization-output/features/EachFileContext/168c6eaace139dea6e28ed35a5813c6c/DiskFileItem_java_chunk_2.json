{
  "pageContent": "File Path: src/net/jforum/util/legacy/commons/fileupload/disk/DiskFileItem.java\n\n Original Content: public class DiskFileItem\n    implements FileItem {\n\n    // ----------------------------------------------------- Manifest constants\n\n\n    /**\n     * Default content charset to be used when no explicit charset\n     * parameter is provided by the sender. Media subtypes of the\n     * \"text\" type are defined to have a default charset value of\n     * \"ISO-8859-1\" when received via HTTP.\n     */\n    public static final String DEFAULT_CHARSET = \"ISO-8859-1\";\n\n\n    /**\n     * Size of buffer to use when writing an item to disk.\n     */\n    private static final int WRITE_BUFFER_SIZE = 2048;\n\n\n    // ----------------------------------------------------------- Data members\n\n\n    /**\n     * Counter used in unique identifier generation.\n     */\n    private static int counter = 0;\n\n\n    /**\n     * The name of the form field as provided by the browser.\n     */\n    private String fieldName;\n\n\n    /**\n     * The content type passed by the browser, or <code>null</code> if\n     * not defined.\n     */\n    private String contentType;\n\n\n    /**\n     * Whether or not this item is a simple form field.\n     */\n    private boolean isFormField;\n\n\n    /**\n     * The original filename in the user's filesystem.\n     */\n    private String fileName;\n\n\n    /**\n     * The threshold above which uploads will be stored on disk.\n     */\n    private int sizeThreshold;\n\n\n    /**\n     * The directory in which uploaded files will be stored, if stored on disk.\n     */\n    private File repository;\n\n\n    /**\n     * Cached contents of the file.\n     */\n    private byte[] cachedContent;\n\n\n    /**\n     * Output stream for this item.\n     */\n    private DeferredFileOutputStream dfos;\n\n\n    // ----------------------------------------------------------- Constructors\n\n\n    /**\n     * Constructs a new <code>DiskFileItem</code> instance.\n     *\n     * @param fieldName     The name of the form field.\n     * @param contentType   The content type passed by the browser or\n     *                      <code>null</code> if not specified.\n     * @param isFormField   Whether or not this item is a plain form field, as\n     *                      opposed to a file upload.\n     * @param fileName      The original filename in the user's filesystem, or\n     *                      <code>null</code> if not specified.\n     * @param sizeThreshold The threshold, in bytes, below which items will be\n     *                      retained in memory and above which they will be\n     *                      stored as a file.\n     * @param repository    The data repository, which is the directory in\n     *                      which files will be created, should the item size\n     *                      exceed the threshold.\n     */\n    public DiskFileItem(String fieldName, String contentType,\n            boolean isFormField, String fileName, int sizeThreshold,\n            File repository) {\n        this.fieldName = fieldName;\n        this.contentType = contentType;\n        this.isFormField = isFormField;\n        this.fileName = fileName;\n        this.sizeThreshold = sizeThreshold;\n        this.repository = repository;\n    }\n\n\n    // ------------------------------- Methods from javax.activation.DataSource\n\n\n    /**\n     * Returns an {@link java.io.InputStream InputStream} that can be\n     * used to retrieve the contents of the file.\n     *\n     * @return An {@link java.io.InputStream InputStream} that can be\n     *         used to retrieve the contents of the file.\n     *\n     * @exception IOException if an error occurs.\n     */\n    public InputStream getInputStream()\n        throws IOException {\n        if (!dfos.isInMemory()) {\n            return new FileInputStream(dfos.getFile());\n        }\n\n        if (cachedContent == null) {\n            cachedContent = dfos.getData();\n        }\n        return new ByteArrayInputStream(cachedContent);\n    }\n\n\n    /**\n     * Returns the content type passed by the agent or <code>null</code> if\n     * not defined.\n     *\n     * @return The content type passed by the agent or <code>null</code> if\n     *         not defined.\n     */\n    public String getContentType() {\n        return contentType;\n    }\n\n\n    /**\n     * Returns the content charset passed by the agent or <code>null</code> if\n     * not defined.\n     *\n     * @return The content charset passed by the agent or <code>null</code> if\n     *         not defined.\n     */\n    public String getCharSet() {\n        ParameterParser parser = new ParameterParser();\n        parser.setLowerCaseNames(true);\n        // Parameter parser can handle null input\n        Map params = parser.parse(getContentType(), ';');\n        return (String) params.get(\"charset\");\n    }\n\n\n    /**\n     * Returns the original filename in the client's filesystem.\n     *\n     * @return The original filename in the client's filesystem.\n     */\n    public String getName() {\n        return fileName;\n    }\n\n\n    // ------------------------------------------------------- FileItem methods\n\n\n    /**\n     * Provides a hint as to whether or not the file contents will be read\n     * from memory.\n     *\n     * @return <code>true</code> if the file contents will be read\n     *         from memory; <code>false</code> otherwise.\n     */\n    public boolean isInMemory() {\n        return (dfos.isInMemory());\n    }\n\n\n    /**\n     * Returns the size of the file.\n     *\n     * @return The size of the file, in bytes.\n     */\n    public long getSize() {\n        if (cachedContent != null) {\n            return cachedContent.length;\n        } else if (dfos.isInMemory()) {\n            return dfos.getData().length;\n        } else {\n            return dfos.getFile().length();\n        }\n    }\n\n\n    /**\n     * Returns the contents of the file as an array of bytes.  If the\n     * contents of the file were not yet cached in memory, they will be\n     * loaded from the disk storage and cached.\n     *\n     * @return The contents of the file as an array of bytes.\n     */\n    public byte[] get() {\n        if (dfos.isInMemory()) {\n            if (cachedContent == null) {\n                cachedContent = dfos.getData();\n            }\n            return cachedContent;\n        }\n\n        byte[] fileData = new byte[(int) getSize()];\n        FileInputStream fis = null;\n\n        try {\n            fis = new FileInputStream(dfos.getFile());\n            fis.read(fileData);\n        } catch (IOException e) {\n            fileData = null;\n        } finally {\n            if (fis != null) {\n                try {\n                    fis.close();\n                } catch (IOException e) {\n                    // ignore\n                }\n            }\n        }\n\n        return fileData;\n    }\n\n\n    /**\n     * Returns the contents of the file as a String, using the specified\n     * encoding.  This method uses {@link #get()} to retrieve the\n     * contents of the file.\n     *\n     * @param charset The charset to use.\n     *\n     * @return The contents of the file, as a string.\n     *\n     * @exception UnsupportedEncodingException if the requested character\n     *                                         encoding is not available.\n     */\n    public String getString(final String charset)\n        throws UnsupportedEncodingException {\n        return new String(get(), charset);\n    }\n\n\n    /**\n     * Returns the contents of the file as a String, using the default\n     * character encoding.  This method uses {@link #get()} to retrieve the\n     * contents of the file.\n     *\n     * @return The contents of the file, as a string.\n     *\n     * @todo Consider making this method throw UnsupportedEncodingException.\n     */\n    public String getString() {\n        byte[] rawdata = get();\n        String charset = getCharSet();\n        if (charset == null) {\n            charset = DEFAULT_CHARSET;\n        }\n        try {\n            return new String(rawdata, charset);\n        } catch (UnsupportedEncodingException e) {\n            return new String(rawdata);\n        }\n    }",
  "metadata": {
    "fileId": "DiskFileItem_java_chunk_2",
    "fileName": "DiskFileItem.java",
    "filePath": "src/net/jforum/util/legacy/commons/fileupload/disk/DiskFileItem.java"
  }
}