{
  "pageContent": "File Path: src/net/jforum/util/legacy/commons/fileupload/disk/DiskFileItemFactory.java\n\n Original Content: /*\n * Copyright 2001-2004 The Apache Software Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage net.jforum.util.legacy.commons.fileupload.disk;\n\nimport java.io.File;\n\nimport net.jforum.util.legacy.commons.fileupload.FileItem;\nimport net.jforum.util.legacy.commons.fileupload.FileItemFactory;\n\n/**\n * <p>The default {@link org.apache.commons.fileupload.FileItemFactory}\n * implementation. This implementation creates\n * {@link org.apache.commons.fileupload.FileItem} instances which keep their\n * content either in memory, for smaller items, or in a temporary file on disk,\n * for larger items. The size threshold, above which content will be stored on\n * disk, is configurable, as is the directory in which temporary files will be\n * created.</p>\n *\n * <p>If not otherwise configured, the default configuration values are as\n * follows:\n * <ul>\n *   <li>Size threshold is 10KB.</li>\n *   <li>Repository is the system default temp directory, as returned by\n *       <code>System.getProperty(\"java.io.tmpdir\")</code>.</li>\n * </ul>\n * </p>\n *\n * @author <a href=\"mailto:martinc@apache.org\">Martin Cooper</a>\n *\n * @since FileUpload 1.1\n *\n * @version $Id: DiskFileItemFactory.java,v 1.3 2005/07/26 03:05:02 rafaelsteil Exp $\n */\npublic class DiskFileItemFactory implements FileItemFactory {\n\n    // ----------------------------------------------------- Manifest constants\n\n\n    /**\n     * The default threshold above which uploads will be stored on disk.\n     */\n    public static final int DEFAULT_SIZE_THRESHOLD = 10240;\n\n\n    // ----------------------------------------------------- Instance Variables\n\n\n    /**\n     * The directory in which uploaded files will be stored, if stored on disk.\n     */\n    private File repository;\n\n\n    /**\n     * The threshold above which uploads will be stored on disk.\n     */\n    private int sizeThreshold = DEFAULT_SIZE_THRESHOLD;\n\n\n    // ----------------------------------------------------------- Constructors\n\n\n    /**\n     * Constructs an unconfigured instance of this class. The resulting factory\n     * may be configured by calling the appropriate setter methods.\n     */\n    public DiskFileItemFactory() {\n    }\n\n\n    /**\n     * Constructs a preconfigured instance of this class.\n     *\n     * @param sizeThreshold The threshold, in bytes, below which items will be\n     *                      retained in memory and above which they will be\n     *                      stored as a file.\n     * @param repository    The data repository, which is the directory in\n     *                      which files will be created, should the item size\n     *                      exceed the threshold.\n     */\n    public DiskFileItemFactory(int sizeThreshold, File repository) {\n        this.sizeThreshold = sizeThreshold;\n        this.repository = repository;\n    }\n\n\n    // ------------------------------------------------------------- Properties\n\n\n    /**\n     * Returns the directory used to temporarily store files that are larger\n     * than the configured size threshold.\n     *\n     * @return The directory in which temporary files will be located.\n     *\n     * @see #setRepository(java.io.File)\n     *\n     */\n    public File getRepository() {\n        return repository;\n    }\n\n\n    /**\n     * Sets the directory used to temporarily store files that are larger\n     * than the configured size threshold.\n     *\n     * @param repository The directory in which temporary files will be located.\n     *\n     * @see #getRepository()\n     *\n     */\n    public void setRepository(File repository) {\n        this.repository = repository;\n    }\n\n\n    /**\n     * Returns the size threshold beyond which files are written directly to\n     * disk. The default value is 1024 bytes.\n     *\n     * @return The size threshold, in bytes.\n     *\n     * @see #setSizeThreshold(int)\n     */\n    public int getSizeThreshold() {\n        return sizeThreshold;\n    }\n\n\n    /**\n     * Sets the size threshold beyond which files are written directly to disk.\n     *\n     * @param sizeThreshold The size threshold, in bytes.\n     *\n     * @see #getSizeThreshold()\n     *\n     */\n    public void setSizeThreshold(int sizeThreshold) {\n        this.sizeThreshold = sizeThreshold;\n    }\n\n\n    // --------------------------------------------------------- Public Methods\n\n    /**\n     * Create a new {@link org.apache.commons.fileupload.disk.DiskFileItem}\n     * instance from the supplied parameters and the local factory\n     * configuration.\n     *\n     * @param fieldName   The name of the form field.\n     * @param contentType The content type of the form field.\n     * @param isFormField <code>true</code> if this is a plain form field;\n     *                    <code>false</code> otherwise.\n     * @param fileName    The name of the uploaded file, if any, as supplied\n     *                    by the browser or other client.\n     *\n     * @return The newly created file item.\n     */\n    public FileItem createItem(\n            String fieldName,\n            String contentType,\n            boolean isFormField,\n            String fileName\n            ) {\n        return new DiskFileItem(fieldName, contentType,\n                isFormField, fileName, sizeThreshold, repository);\n    }\n\n}",
  "metadata": {
    "fileId": "DiskFileItemFactory_java_chunk_1",
    "fileName": "DiskFileItemFactory.java",
    "filePath": "src/net/jforum/util/legacy/commons/fileupload/disk/DiskFileItemFactory.java"
  }
}