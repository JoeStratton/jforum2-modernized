{
  "pageContent": "File Path: tests/core/net/jforum/api/integration/mail/pop/POPListenerTestCase.java\n\n Original Content: /*\n * Created on 28/08/2006 22:58:20\n */\npackage net.jforum.api.integration.mail.pop;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.util.Date;\nimport java.util.List;\n\nimport javax.mail.Message;\nimport javax.mail.MessagingException;\nimport javax.mail.Session;\nimport javax.mail.Message.RecipientType;\nimport javax.mail.internet.InternetAddress;\nimport javax.mail.internet.MimeMessage;\n\nimport junit.framework.TestCase;\nimport net.jforum.ConfigLoader;\nimport net.jforum.ForumStartup;\nimport net.jforum.JForumExecutionContext;\nimport net.jforum.TestCaseUtils;\nimport net.jforum.dao.DataAccessDriver;\nimport net.jforum.dao.PostDAO;\nimport net.jforum.dao.TopicDAO;\nimport net.jforum.entities.Post;\nimport net.jforum.entities.Topic;\nimport net.jforum.entities.User;\nimport net.jforum.repository.RankingRepository;\nimport net.jforum.repository.SmiliesRepository;\nimport net.jforum.util.DbUtils;\nimport net.jforum.util.preferences.ConfigKeys;\nimport net.jforum.util.preferences.SystemGlobals;\n\n/**\n * @author Rafael Steil\n * @version $Id: POPListenerTestCase.java,v 1.14 2007/09/04 14:57:25 andowson Exp $\n */\npublic class POPListenerTestCase extends TestCase\n{\n\tprivate static boolean started;\n\t\n\t/**\n\t * A single and simple message\n\t */\n\tpublic void testSimple() throws Exception\n\t{\n\t\tint beforeTopicId = this.maxTopicId();\n\t\t\n\t\tString sender = \"ze@zinho.com\";\n\t\tString subject = \"Mail Message \" + new Date();\n\t\tString forumAddress = \"forum_test@jforum.testcase\";\n\t\tString contents = \"Mail message contents \" + new Date();\n\t\t\n\t\tthis.sendMessage(sender, subject, forumAddress, contents, null);\n\t\t\n\t\tint afterTopicId = this.maxTopicId();\n\t\t\n\t\tassertTrue(\"The message was not inserted\", afterTopicId > beforeTopicId);\n\t\t\n\t\ttry {\n\t\t\tthis.assertPost(afterTopicId, sender, subject, contents);\n\t\t}\n\t\tfinally {\n\t\t\tthis.deleteTopic(afterTopicId);\n\t\t}\n\t}\n\t\n\t/**\n\t * Sends an invalid In-Reply-To header, which should cause the system\n\t * to create a new topic, instead of adding the message as a reply\n\t * to something else. \n\t */\n\tpublic void testInReplyToIncorrectShouldCreateNewTopic() throws Exception\n\t{\n\t\tint beforeTopicId = this.maxTopicId();\n\t\t\n\t\tString sender = \"ze@zinho.com\";\n\t\tString subject = \"Mail Message \" + new Date();\n\t\tString forumAddress = \"forum_test@jforum.testcase\";\n\t\tString contents = \"Mail message contents \" + new Date();\n\t\t\n\t\tthis.sendMessage(sender, subject, forumAddress, contents, MessageId.buildMessageId(7777, 999999, 888888));\n\t\t\n\t\tint afterTopicId = this.maxTopicId();\n\t\t\n\t\tassertTrue(\"The message was not inserted\", afterTopicId > beforeTopicId);\n\t\t\n\t\ttry {\n\t\t\tthis.assertPost(afterTopicId, sender, subject, contents);\n\t\t}\n\t\tfinally {\n\t\t\tthis.deleteTopic(afterTopicId);\n\t\t}\n\t}\n\t\n\t/**\n\t * Create a new topic, then send a message with the In-Reply-To header, \n\t * which should create an answer to the previously created topic\n\t * @throws Exception\n\t */\n\tpublic void testInReplyToCreateNewTopicThenReply() throws Exception\n\t{\n\t\tint beforeTopicId = this.maxTopicId();\n\t\t\n\t\tString sender = \"ze@zinho.com\";\n\t\tString subject = \"Mail Message \" + new Date();\n\t\tString forumAddress = \"forum_test@jforum.testcase\";\n\t\tString contents = \"Mail message contents \" + new Date();\n\t\t\n\t\tthis.sendMessage(sender, subject, forumAddress, contents, null);\n\t\t\n\t\tint afterTopicId = this.maxTopicId();\n\t\t\n\t\tassertTrue(\"The message was not inserted\", afterTopicId > beforeTopicId);\n\t\t\n\t\ttry {\n\t\t\tthis.assertPost(afterTopicId, sender, subject, contents);\n\t\t\t\n\t\t\t// Ok, now send a new message, replying to the previously topic\n\t\t\tsubject = \"Reply subject for topic \" + afterTopicId;\n\t\t\tcontents = \"Changed contents, replying tpoic \" + afterTopicId;\n\t\t\t\n\t\t\tthis.sendMessage(sender, subject, forumAddress, contents, MessageId.buildMessageId(7777, afterTopicId, 999999));\n\t\t\t\n\t\t\tassertTrue(\"A new message was created, instead of a reply\", afterTopicId == maxTopicId());\n\t\t\t\n\t\t\tPostDAO postDAO = DataAccessDriver.getInstance().newPostDAO();\n\t\t\tList posts = postDAO.selectAllByTopic(afterTopicId);\n\t\t\t\n\t\t\tassertTrue(\"There should be two posts\", posts.size() == 2);\n\t\t\t\n\t\t\t// The first message was already validated\n\t\t\tPost p = (Post)posts.get(1);\n\t\t\tUser user = DataAccessDriver.getInstance().newUserDAO().selectById(p.getUserId());\n\n\t\t\tassertNotNull(\"User should not be null\", user);\n\t\t\tassertEquals(\"sender\", sender, user.getEmail());\n\t\t\tassertEquals(\"subject\", subject, p.getSubject());\n\t\t\tassertEquals(\"text\", contents, p.getText());\n\t\t}\n\t\tfinally {\n\t\t\tthis.deleteTopic(afterTopicId);\n\t\t}\n\t}\n\t\n\t/**\n\t * Emulates the action of sending an email.\n\t * \n\t * @param sender The sender's email. Should exist in the database\n\t * @param subject the subject\n\t * @param forumAddress the address of the target forum. There should be a matching\n\t * record in jforum_mail_integration\n\t * @param contents the message itself\n\t * @param inReplyTo the In-Reply-To header, as built by {@link MessageId}. Can be null\n\t * @throws Exception\n\t */\n\tprivate void sendMessage(String sender, String subject, String forumAddress, String contents, String inReplyTo) throws Exception\n\t{\n\t\tPOPListener listener = new POPListenerMock();\n\t\t\n\t\tMimeMessageMock message = this.newMessageMock(sender, subject, forumAddress, contents);\n\t\t\n\t\tif (inReplyTo != null) {\n\t\t\tmessage.addHeader(\"In-Reply-To\", inReplyTo);\n\t\t}\n\t\t\n\t\t((POPConnectorMock)listener.getConnector()).setMessages(new Message[] { message });\n\t\t\n\t\tlistener.execute(null);\n\t}\n\t\n\t/**\n\t * Asserts the post instance, after execution some part of the testcase\n\t * @param topicId the topic's id of the new message\n\t * @param sender the matching sender email\n\t * @param subject the matching subject\n\t * @param contents the matching message contents\n\t */\n\tprivate void assertPost(int topicId, String sender, String subject, String contents)\n\t{\n\t\tPostDAO postDAO = DataAccessDriver.getInstance().newPostDAO();\n\t\tList posts = postDAO.selectAllByTopic(topicId);\n\t\t\n\t\tassertTrue(\"There should be exactly one post\", posts.size() == 1);\n\t\t\n\t\tPost p = (Post)posts.get(0);\n\t\t\n\t\tUser user = DataAccessDriver.getInstance().newUserDAO().selectById(p.getUserId());\n\t\tassertNotNull(\"User should not be null\", user);\n\t\t\n\t\tassertEquals(\"sender\", sender, user.getEmail());\n\t\tassertEquals(\"subject\", subject, p.getSubject());\n\t\tassertEquals(\"text\", contents, p.getText());\n\t}\n\t\n\t/**\n\t * Gets the latest topic id existent\n\t * @return the topic id, or -1 if something went wrong\n\t * @throws Exception\n\t */\n\tprivate int maxTopicId() throws Exception\n\t{\n\t\tint topicId = -1;\n\t\t\n\t\tPreparedStatement p = null;\n\t\tResultSet rs = null;\n\t\t\n\t\ttry {\n\t\t\tp = JForumExecutionContext.getConnection().prepareStatement(\"select max(topic_id) from jforum_topics\");\n\t\t\trs = p.executeQuery();\n\t\t\t\n\t\t\tif (rs.next()) {\n\t\t\t\ttopicId = rs.getInt(1);\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\tDbUtils.close(rs, p);\n\t\t}\n\t\t\n\t\treturn topicId;\n\t}\n\n\t/**\n\t * Deletes a topic\n\t * @param topicId the topic's id to delete\n\t */\n\tprivate void deleteTopic(int topicId)\n\t{\n\t\ttry {\n\t\t\tTopicDAO dao = DataAccessDriver.getInstance().newTopicDAO();\n\t\t\t\n\t\t\tTopic t = new Topic(topicId);\n\t\t\tt.setForumId(2);\n\t\t\t\n\t\t\tdao.delete(t, false);\n\t\t\t\n\t\t\tJForumExecutionContext.finish();\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\t\t\t\t\n\t\t}\n\t}\n\t\n\tprivate MimeMessageMock newMessageMock(String sender, String subject, String listEmail, \n\t\t\tString text) throws Exception\n\t{\n\t\tMimeMessageMock m = new MimeMessageMock(null, new ByteArrayInputStream(text.getBytes()));\n\t\t\n\t\tm.setFrom(new InternetAddress(sender));\n\t\tm.setRecipient(RecipientType.TO, new InternetAddress(listEmail));\n\t\tm.setSubject(subject);\n\t\t\n\t\treturn m;\n\t}\n\t\n\t/**\n\t * @see junit.framework.TestCase#setUp()\n\t */\n\tprotected void setUp() throws Exception\n\t{\n\t\tif (!started) {\n\t\t\tTestCaseUtils.loadEnvironment();\n\t\t\tTestCaseUtils.initDatabaseImplementation();\n\t\t\tConfigLoader.startCacheEngine();\n\t\t\t\n\t\t\tForumStartup.startForumRepository();\n\t\t\tRankingRepository.loadRanks();\n\t\t\tSmiliesRepository.loadSmilies();\n\t\t\t\n\t\t\tSystemGlobals.setValue(ConfigKeys.SEARCH_INDEXING_ENABLED, \"false\");\n\t\t\t\n\t\t\tstarted = true;\n\t\t}\n\t}\n\t\n\tprivate static class MimeMessageMock extends MimeMessage\n\t{\n\t\tprivate InputStream is;\n\t\tprivate String messageId;\n\t\t\n\t\tpublic MimeMessageMock(Session session, InputStream is) throws MessagingException\n\t\t{\n\t\t\tsuper(session, is);\n\t\t\tthis.is = is;\n\t\t}\n\t\t\n\t\tpublic InputStream getInputStream() throws IOException, MessagingException\n\t\t{\n\t\t\treturn this.is;\n\t\t}\n\t\t\n\t\tprotected void updateMessageID() throws MessagingException\n\t\t{\n\t\t\tif (this.messageId != null) {\n\t\t\t\tthis.setMessageId(this.messageId);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tsuper.updateMessageID();\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic void setMessageId(String messageId) throws MessagingException\n\t\t{\n\t\t\tthis.addHeader(\"Message-ID\", messageId);\n\t\t\tthis.messageId = messageId;\n\t\t}\n\t\t\n\t\tpublic String getContentType() throws MessagingException\n\t\t{\n\t\t\treturn \"text/plain\";\n\t\t}\n\t}\n}",
  "metadata": {
    "fileId": "POPListenerTestCase_java_chunk_1",
    "fileName": "POPListenerTestCase.java",
    "filePath": "tests/core/net/jforum/api/integration/mail/pop/POPListenerTestCase.java"
  }
}