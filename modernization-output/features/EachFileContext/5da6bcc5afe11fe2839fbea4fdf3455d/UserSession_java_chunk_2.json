{
  "pageContent": "File Path: src/net/jforum/entities/UserSession.java\n\n Original Content: public class UserSession implements Serializable\n{\n\tstatic final long serialVersionUID = 0;\n\t\n\tprivate long sessionTime;\n\t\n\tprivate int userId;\n\tprivate int privateMessages;\n\t\n\tprivate Date startTime;\n\tprivate Date lastVisit;\n\t\n\tprivate String sessionId;\n\tprivate String username;\n\tprivate String lang;\n\tprivate String ip;\n\t\n\tprivate boolean autoLogin;\n\t\n\tprivate ImageCaptcha imageCaptcha = null;\n\n\tpublic UserSession() {}\n\n\tpublic UserSession(UserSession us)\n\t{\n\t\tif (us.getStartTime() != null) {\n\t\t\tthis.startTime = new Date(us.getStartTime().getTime());\n\t\t}\n\n\t\tif (us.getLastVisit() != null) {\n\t\t\tthis.lastVisit = new Date(us.getLastVisit().getTime());\n\t\t}\n\t\t\n\t\tthis.sessionTime = us.getSessionTime();\n\t\tthis.userId = us.getUserId();\n\t\tthis.sessionId = us.getSessionId();\n\t\tthis.username = us.getUsername();\n\t\tthis.autoLogin = us.getAutoLogin();\n\t\tthis.lang = us.getLang();\n\t\tthis.privateMessages = us.getPrivateMessages();\n\t\tthis.imageCaptcha = us.imageCaptcha;\n\t\tthis.ip = us.getIp();\n\t}\n\t\n\tpublic Date sessionLastUpdate()\n\t{\n\t\treturn new Date(this.startTime.getTime() + this.sessionTime);\n\t}\n\t\n\tpublic void setIp(String ip)\n\t{\n\t\tthis.ip = ip;\n\t}\n\t\n\tpublic String getIp()\n\t{\n\t\treturn this.ip;\n\t}\n\n\t/**\n\t * Set session's start time.\n\t * \n\t * @param startTime  Start time in miliseconds\n\t */\n\tpublic void setStartTime(Date startTime)\n\t{\n\t\tthis.startTime = startTime;\n\t}\n\n\t/**\n\t * @return Returns the privateMessages.\n\t */\n\tpublic int getPrivateMessages()\n\t{\n\t\treturn this.privateMessages;\n\t}\n\n\t/**\n\t * @param privateMessages The privateMessages to set.\n\t */\n\tpublic void setPrivateMessages(int privateMessages)\n\t{\n\t\tthis.privateMessages = privateMessages;\n\t}\n\n\t/**\n\t * Set session last visit time.\n\t * \n\t * @param lastVisit Time in miliseconds\n\t */\n\tpublic void setLastVisit(Date lastVisit)\n\t{\n\t\tthis.lastVisit = lastVisit;\n\t}\n\n\t/**\n\t * Set user's id\n\t * \n\t * @param userId The user id\n\t */\n\tpublic void setUserId(int userId)\n\t{\n\t\tthis.userId = userId;\n\t}\n\n\t/**\n\t * Set user's name\n\t * \n\t * @param username The username\n\t */\n\tpublic void setUsername(String username)\n\t{\n\t\tthis.username = username;\n\t}\n\n\tpublic void setSessionId(String sessionId)\n\t{\n\t\tthis.sessionId = sessionId;\n\t}\n\n\tpublic void setSessionTime(long sessionTime)\n\t{\n\t\tthis.sessionTime = sessionTime;\n\t}\n\n\tpublic void setLang(String lang)\n\t{\n\t\tthis.lang = lang;\n\t}\n\n\t/**\n\t * Update the session time.\n\t */\n\tpublic void updateSessionTime()\n\t{\n\t\tthis.sessionTime = System.currentTimeMillis() - this.startTime.getTime();\n\t}\n\n\t/**\n\t * Enable or disable auto-login.\n\t * \n\t * @param autoLogin  <code>true</code> or <code>false</code> to represent auto-login status\n\t */\n\tpublic void setAutoLogin(boolean autoLogin)\n\t{\n\t\tthis.autoLogin = autoLogin;\n\t}\n\n\t/**\n\t * Gets user's session start time\n\t * \n\t * @return Start time in miliseconds\n\t */\n\tpublic Date getStartTime()\n\t{\n\t\treturn this.startTime;\n\t}\n\n\tpublic String getLang()\n\t{\n\t\treturn this.lang;\n\t}\n\n\t/**\n\t * Gets user's last visit time\n\t * \n\t * @return Time in miliseconds\n\t */\n\tpublic Date getLastVisit()\n\t{\n\t\t//return new GregorianCalendar(2007, 6, 28, 15, 15, 19).getTime();\n\t\treturn this.lastVisit;\n\t}\n\n\t/**\n\t * Gets the session time.\n\t * \n\t * @return The session time\n\t */\n\tpublic long getSessionTime()\n\t{\n\t\treturn this.sessionTime;\n\t}\n\n\t/**\n\t * Gets user's id\n\t * \n\t * @return The user id\n\t */\n\tpublic int getUserId()\n\t{\n\t\treturn this.userId;\n\t}\n\n\t/**\n\t * Gets the username\n\t * \n\t * @return The username\n\t */\n\tpublic String getUsername()\n\t{\n\t\tif (this.username == null && this.userId == SystemGlobals.getIntValue(ConfigKeys.ANONYMOUS_USER_ID)) {\n\t\t\tthis.username = I18n.getMessage(\"Guest\");\n\t\t}\n\t\t\n\t\treturn this.username;\n\t}\n\n\t/**\n\t * Gets auto-login status\n\t * \n\t * @return <code>true</code> if auto-login is enabled, or <code>false</code> if disabled.\n\t */\n\tpublic boolean getAutoLogin()\n\t{\n\t\treturn this.autoLogin;\n\t}\n\n\t/**\n\t * Gets the session id related to this user session\n\t * \n\t * @return A string with the session id\n\t */\n\tpublic String getSessionId()\n\t{\n\t\treturn this.sessionId;\n\t}\n\n\t/**\n\t * Checks if the user is an administrator\n\t * \n\t * @return <code>true</code> if the user is an administrator\n\t */\n\tpublic boolean isAdmin()\n\t{\n\t\treturn SecurityRepository.canAccess(this.userId, SecurityConstants.PERM_ADMINISTRATION);\n\t}\n\n\t/**\n\t * Checks if the user is a moderator\n\t * \n\t * @return <code>true</code> if the user has moderations rights\n\t */\n\tpublic boolean isModerator()\n\t{\n\t\treturn SecurityRepository.canAccess(this.userId, SecurityConstants.PERM_MODERATION);\n\t}\n\t\n\t/**\n\t * Checks if the user can moderate a forum\n\t * \n\t * @param forumId the forum's id to check for moderation rights\n\t * @return <code>true</code> if the user has moderations rights\n\t */\n\tpublic boolean isModerator(int forumId)\n\t{\n\t\tPermissionControl pc = SecurityRepository.get(this.userId);\n\t\t\n\t\treturn (pc.canAccess(SecurityConstants.PERM_MODERATION))\n\t\t\t&& (pc.canAccess(SecurityConstants.PERM_MODERATION_FORUMS, \n\t\t\t\tInteger.toString(forumId)));\n\t}\n\n\t/**\n\t * Makes the user's session \"anoymous\" - eg, the user. This method sets the session's start and\n\t * last visit time to the current datetime, the user id to the return of a call to\n\t * <code>SystemGlobals.getIntValue(ConfigKeys.ANONYMOUS_USER_ID)</code> and finally sets\n\t * session attribute named \"logged\" to \"0\" will be considered a non-authenticated / anonymous\n\t * user\n\t */\n\tpublic void makeAnonymous()\n\t{\n\t\tthis.registerBasicInfo();\n\t\t\n\t\tControllerUtils.addCookie(SystemGlobals.getValue(ConfigKeys.COOKIE_AUTO_LOGIN), null);\n\t\tControllerUtils.addCookie(SystemGlobals.getValue(ConfigKeys.COOKIE_NAME_DATA),\n\t\t\tSystemGlobals.getValue(ConfigKeys.ANONYMOUS_USER_ID));\n\n\t\tSessionFacade.makeUnlogged();\n\t}\n\n\t/**\n\t * Sets the startup and last visit time to now, as well set the\n\t * user id to Anonymous. This method is usually called when the\n\t * user hits the forum for the first time. \n\t */\n\tpublic void registerBasicInfo()\n\t{\n\t\tthis.setStartTime(new Date(System.currentTimeMillis()));\n\t\tthis.setLastVisit(new Date(System.currentTimeMillis()));\n\t\tthis.setUserId(SystemGlobals.getIntValue(ConfigKeys.ANONYMOUS_USER_ID));\n\t}\n\n\t/**\n\t * Sets a new user session information using information from an <code>User</code> instance.\n\t * This method sets the user id, username, the number of private messages, the session's start\n\t * time ( set to the current date and time ) and the language.\n\t * \n\t * @param user The <code>User</code> instance to get data from\n\t */\n\tpublic void dataToUser(User user)\n\t{\n\t\tthis.setUserId(user.getId());\n\t\tthis.setUsername(user.getUsername());\n\t\tthis.setPrivateMessages(user.getPrivateMessagesCount());\n\t\tthis.setStartTime(new Date(System.currentTimeMillis()));\n\t\tthis.setLang(user.getLang());\n\t}\n\n\t/**\n\t * Get the captcha image to challenge the user\n\t * \n\t * @return BufferedImage the captcha image to challenge the user\n\t */\n\tpublic BufferedImage getCaptchaImage()\n\t{\n\t\tif (this.imageCaptcha == null) {\n\t\t\treturn null;\n\t\t}\n\t\t\n\t\treturn (BufferedImage)this.imageCaptcha.getChallenge();\n\t}\n\n\t/**\n\t * Validate the captcha response of user\n\t * \n\t * @param userResponse String the captcha response from user\n\t * @return boolean true if the answer is valid, otherwise return false\n\t */\n\tpublic boolean validateCaptchaResponse(String userResponse)\n\t{\n\t\tif ((SystemGlobals.getBoolValue(ConfigKeys.CAPTCHA_REGISTRATION) \n\t\t\t\t|| SystemGlobals.getBoolValue(ConfigKeys.CAPTCHA_POSTS))\n\t\t\t\t&& this.imageCaptcha != null) {\n\t\t\t\n\t\t\tif (SystemGlobals.getBoolValue(ConfigKeys.CAPTCHA_IGNORE_CASE)) {\n\t\t\t\tuserResponse = userResponse.toLowerCase();\n\t\t\t}\n\t\t\t\n\t\t\tboolean result =  this.imageCaptcha.validateResponse(userResponse).booleanValue();\n\t\t\tthis.destroyCaptcha();\n\t\t\treturn result;\n\t\t}\n\t\t\n\t\treturn true;\n\t}\n\n\t/**\n\t * create a new image captcha\n\t * \n\t */\n\tpublic void createNewCaptcha()\n\t{\n\t\tthis.destroyCaptcha();\n\t\tthis.imageCaptcha = Captcha.getInstance().getNextImageCaptcha();\n\t}\n\n\t/**\n\t * Destroy the current captcha validation is done\n\t * \n\t */\n\tpublic void destroyCaptcha()\n\t{\n\t\tthis.imageCaptcha = null;\n\t}\n\t\n\t/**\n     * @deprecated use JForumExecutionContext.getForumContext().isBot() instead\n     *\n     *\n\t * Checks if it's a bot\n\t * @return <code>true</code> if this user session is from any robot\n\t */\n\tpublic boolean isBot()\n\t{\n//        return Boolean.TRUE.equals(JForumExecutionContext.getRequest().getAttribute(ConfigKeys.IS_BOT));\n        return JForumExecutionContext.getForumContext().isBot();\n    }\n\t\n\t/**\n\t * @see java.lang.Object#equals(java.lang.Object)\n\t */\n\tpublic boolean equals(Object o)\n\t{\n\t\tif (!(o instanceof UserSession)) {\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\treturn this.sessionId.equals(((UserSession)o).getSessionId());\n\t}\n\t\n\t/**\n\t * @see java.lang.Object#hashCode()\n\t */\n\tpublic int hashCode()\n\t{\n\t\treturn this.sessionId.hashCode();\n\t}\n}",
  "metadata": {
    "fileId": "UserSession_java_chunk_2",
    "fileName": "UserSession.java",
    "filePath": "src/net/jforum/entities/UserSession.java"
  }
}