{
  "pageContent": "File Path: src/net/jforum/entities/Banlist.java\n\n Original Content: /*\n * Copyright (c) JForum Team\n * All rights reserved.\n * \n * Redistribution and use in source and binary forms, \n * with or without modification, are permitted provided \n * that the following conditions are met:\n * \n * 1) Redistributions of source code must retain the above \n * copyright notice, this list of conditions and the \n * following  disclaimer.\n * 2)  Redistributions in binary form must reproduce the \n * above copyright notice, this list of conditions and \n * the following disclaimer in the documentation and/or \n * other materials provided with the distribution.\n * 3) Neither the name of \"Rafael Steil\" nor \n * the names of its contributors may be used to endorse \n * or promote products derived from this software without \n * specific prior written permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT \n * HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY \n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, \n * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF \n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR \n * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL \n * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE \n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, \n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES \n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF \n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, \n * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER \n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER \n * IN CONTRACT, STRICT LIABILITY, OR TORT \n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN \n * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF \n * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE\n *\n * Created on 07/12/2006 20:59:12\n * The JForum Project\n * http://www.jforum.net\n */\npackage net.jforum.entities;\n\nimport java.io.Serializable;\nimport java.util.StringTokenizer;\n\nimport org.apache.commons.lang.StringUtils;\n\n/**\n * @author Rafael Steil\n * @version $Id: Banlist.java,v 1.3 2006/12/10 23:08:21 rafaelsteil Exp $\n */\npublic class Banlist implements Serializable\n{\n\tprivate int id;\n\tprivate int userId;\n\tprivate String ip;\n\tprivate String email;\n\t\n\t/**\n\t * @return the id\n\t */\n\tpublic int getId()\n\t{\n\t\treturn this.id;\n\t}\n\t\n\t/**\n\t * @return the userId\n\t */\n\tpublic int getUserId()\n\t{\n\t\treturn this.userId;\n\t}\n\t\n\t/**\n\t * @return the ip\n\t */\n\tpublic String getIp()\n\t{\n\t\treturn this.ip;\n\t}\n\t\n\t/**\n\t * @return the email\n\t */\n\tpublic String getEmail()\n\t{\n\t\treturn this.email;\n\t}\n\t\n\t/**\n\t * @param id the id to set\n\t */\n\tpublic void setId(int id)\n\t{\n\t\tthis.id = id;\n\t}\n\t\n\t/**\n\t * @param userId the userId to set\n\t */\n\tpublic void setUserId(int userId)\n\t{\n\t\tthis.userId = userId;\n\t}\n\t\n\t/**\n\t * @param ip the ip to set\n\t */\n\tpublic void setIp(String ip)\n\t{\n\t\tthis.ip = ip;\n\t}\n\t\n\t/**\n\t * @param email the email to set\n\t */\n\tpublic void setEmail(String email)\n\t{\n\t\tthis.email = email;\n\t}\n\t\n\tpublic boolean matches(Banlist b)\n\t{\n\t\tboolean status = false;\n\t\t\n\t\tif (this.matchesUserId(b) || this.matchesEmail(b)) {\n\t\t\tstatus = true;\n\t\t}\n\t\telse if (!StringUtils.isEmpty(b.getIp()) && !StringUtils.isEmpty(this.getIp()))  {\n\t\t\tif (b.getIp().equalsIgnoreCase(this.getIp())) {\n\t\t\t\tstatus = true;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tstatus = this.matchIp(b);\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn status;\n\t}\n\n\tprivate boolean matchesEmail(Banlist b)\n\t{\n\t\treturn (!StringUtils.isEmpty(b.getEmail()) && b.getEmail().equals(this.getEmail()));\n\t}\n\n\tprivate boolean matchesUserId(Banlist b)\n\t{\n\t\treturn b.getUserId() > 0 && this.getUserId() > 0 && b.getUserId() == this.getUserId();\n\t}\n\n\tprivate boolean matchIp(Banlist b)\n\t{\n\t\tboolean status = false;\n\t\t\n\t\tStringTokenizer userToken = new StringTokenizer(b.getIp(), \".\");\n\t\tStringTokenizer thisToken = new StringTokenizer(this.getIp(), \".\");\n\t\t\n\t\tif (userToken.countTokens() == thisToken.countTokens()) {\n\t\t\tString[] userValues = this.tokenizerAsArray(userToken);\n\t\t\tString[] thisValues = this.tokenizerAsArray(thisToken);\n\t\t\t\n\t\t\tstatus = this.compareIpValues(userValues, thisValues);\n\t\t}\n\t\treturn status;\n\t}\n\n\tprivate boolean compareIpValues(String[] userValues, String[] thisValues)\n\t{\n\t\tboolean helperStatus = true;\n\t\tboolean onlyStars = true;\n\t\t\n\t\tfor (int i = 0; i < thisValues.length; i++) {\n\t\t\tif (thisValues[i].charAt(0) != '*') {\n\t\t\t\tonlyStars = false;\n\t\t\t\t\n\t\t\t\tif (!thisValues[i].equals(userValues[i])) {\n\t\t\t\t\thelperStatus = false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn helperStatus && !onlyStars;\n\t}\n\n\tprivate String[] tokenizerAsArray(StringTokenizer token)\n\t{\n\t\tString[] values = new String[token.countTokens()];\n\t\t\n\t\tfor (int i = 0; token.hasMoreTokens(); i++) {\n\t\t\tvalues[i] = token.nextToken();\n\t\t}\n\t\t\n\t\treturn values;\n\t}\n}",
  "metadata": {
    "fileId": "Banlist_java_chunk_1",
    "fileName": "Banlist.java",
    "filePath": "src/net/jforum/entities/Banlist.java"
  }
}