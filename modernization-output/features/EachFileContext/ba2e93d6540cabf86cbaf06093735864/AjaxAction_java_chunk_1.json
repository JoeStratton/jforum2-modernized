{
  "pageContent": "File Path: src/net/jforum/view/forum/AjaxAction.java\n\n Original Content: /*\n * Copyright (c) JForum Team\n * All rights reserved.\n * \n * Redistribution and use in source and binary forms, \n * with or without modification, are permitted provided \n * that the following conditions are met:\n * \n * 1) Redistributions of source code must retain the above \n * copyright notice, this list of conditions and the \n * following  disclaimer.\n * 2)  Redistributions in binary form must reproduce the \n * above copyright notice, this list of conditions and \n * the following disclaimer in the documentation and/or \n * other materials provided with the distribution.\n * 3) Neither the name of \"Rafael Steil\" nor \n * the names of its contributors may be used to endorse \n * or promote products derived from this software without \n * specific prior written permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT \n * HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY \n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, \n * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF \n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR \n * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL \n * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE \n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, \n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES \n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF \n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, \n * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER \n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER \n * IN CONTRACT, STRICT LIABILITY, OR TORT \n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN \n * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF \n * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE\n * \n * Created on 09/08/2007 09:31:17\n * \n * The JForum Project\n * http://www.jforum.net\n */\npackage net.jforum.view.forum;\n\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.List;\n\nimport net.jforum.Command;\nimport net.jforum.SessionFacade;\nimport net.jforum.dao.DataAccessDriver;\nimport net.jforum.dao.PostDAO;\nimport net.jforum.entities.ModerationLog;\nimport net.jforum.entities.Post;\nimport net.jforum.entities.User;\nimport net.jforum.repository.PostRepository;\nimport net.jforum.repository.SecurityRepository;\nimport net.jforum.search.LuceneManager;\nimport net.jforum.search.SearchFacade;\nimport net.jforum.security.SecurityConstants;\nimport net.jforum.util.SafeHtml;\nimport net.jforum.util.mail.Spammer;\nimport net.jforum.util.preferences.ConfigKeys;\nimport net.jforum.util.preferences.SystemGlobals;\nimport net.jforum.util.preferences.TemplateKeys;\nimport net.jforum.view.forum.common.PostCommon;\n\nimport org.apache.commons.lang.StringEscapeUtils;\nimport org.apache.log4j.Logger;\nimport org.apache.lucene.document.Document;\n\nimport freemarker.template.SimpleHash;\n\n/**\n * @author Rafael Steil\n * @version $Id: AjaxAction.java,v 1.7 2007/09/21 15:54:31 rafaelsteil Exp $\n */\npublic class AjaxAction extends Command\n{\n\tprivate static Logger logger = Logger.getLogger(AjaxAction.class);\n\t\n\t/**\n\t * Sends a test message\n\t * @param sender The sender's email address\n\t * @param host the smtp host\n\t * @param auth if need authorization or not\n\t * @param username the smtp server username, if auth is needed\n\t * @param password the smtp server password, if auth is needed\n\t * @param to the recipient\n\t * @return The status message\n\t */\n\tpublic void sendTestMail()\n\t{\n\t\tString sender = this.request.getParameter(\"sender\");\n\t\tString host = this.request.getParameter(\"host\");\n\t\tString port = this.request.getParameter(\"port\");\n\t\tString auth = this.request.getParameter(\"auth\");\n\t\tString ssl = this.request.getParameter(\"ssl\");\n\t\tString username = this.request.getParameter(\"username\");\n\t\tString password = this.request.getParameter(\"password\");\n\t\tString to = this.request.getParameter(\"to\");\n\t\t\n\t\t// Save the current values\n\t\tString originalHost = SystemGlobals.getValue(ConfigKeys.MAIL_SMTP_HOST);\n\t\tString originalAuth = SystemGlobals.getValue(ConfigKeys.MAIL_SMTP_AUTH);\n\t\tString originalUsername = SystemGlobals.getValue(ConfigKeys.MAIL_SMTP_USERNAME);\n\t\tString originalPassword = SystemGlobals.getValue(ConfigKeys.MAIL_SMTP_PASSWORD);\n\t\tString originalSender = SystemGlobals.getValue(ConfigKeys.MAIL_SENDER);\n\t\tString originalSSL = SystemGlobals.getValue(ConfigKeys.MAIL_SMTP_SSL);\n\t\tString originalPort = SystemGlobals.getValue(ConfigKeys.MAIL_SMTP_PORT);\n\t\t\n\t\t// Now put the new ones\n\t\tSystemGlobals.setValue(ConfigKeys.MAIL_SMTP_HOST, host);\n\t\tSystemGlobals.setValue(ConfigKeys.MAIL_SMTP_AUTH, auth);\n\t\tSystemGlobals.setValue(ConfigKeys.MAIL_SMTP_USERNAME, username);\n\t\tSystemGlobals.setValue(ConfigKeys.MAIL_SMTP_PASSWORD, password);\n\t\tSystemGlobals.setValue(ConfigKeys.MAIL_SENDER, sender);\n\t\tSystemGlobals.setValue(ConfigKeys.MAIL_SMTP_SSL, ssl);\n\t\tSystemGlobals.setValue(ConfigKeys.MAIL_SMTP_PORT, port);\n\t\t\n\t\tString status = \"OK\";\n\t\t\n\t\t// Send the test mail\n\t\tclass TestSpammer extends Spammer {\n\t\t\tpublic TestSpammer(String to) {\n\t\t\t\tList l = new ArrayList();\n\t\t\t\t\n\t\t\t\tUser user = new User();\n\t\t\t\tuser.setEmail(to);\n\t\t\t\t\n\t\t\t\tl.add(user);\n\t\t\t\t\n\t\t\t\tthis.setUsers(l);\n\t\t\t\t\n\t\t\t\tthis.setTemplateParams(new SimpleHash());\n\t\t\t\tthis.prepareMessage(\"JForum Test Mail\", null);\n\t\t\t}\n\t\t\t\n\t\t\tprotected String processTemplate() throws Exception {\n\t\t\t\treturn (\"Test mail from JForum Admin Panel. Sent at \" + new Date());\n\t\t\t}\n\t\t\t\n\t\t\tprotected void createTemplate(String messageFile) throws Exception {}\n\t\t}\n\t\t\n\t\tSpammer s = new TestSpammer(to);\n\t\t\n\t\ttry {\n\t\t\ts.dispatchMessages();\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tstatus = StringEscapeUtils.escapeJavaScript(e.toString());\n\t\t\tlogger.error(e.toString(), e);\n\t\t}\n\t\tfinally {\n\t\t\t// Restore the original values\n\t\t\tSystemGlobals.setValue(ConfigKeys.MAIL_SMTP_HOST, originalHost);\n\t\t\tSystemGlobals.setValue(ConfigKeys.MAIL_SMTP_AUTH, originalAuth);\n\t\t\tSystemGlobals.setValue(ConfigKeys.MAIL_SMTP_USERNAME, originalUsername);\n\t\t\tSystemGlobals.setValue(ConfigKeys.MAIL_SMTP_PASSWORD, originalPassword);\n\t\t\tSystemGlobals.setValue(ConfigKeys.MAIL_SENDER, originalSender);\n\t\t\tSystemGlobals.setValue(ConfigKeys.MAIL_SMTP_SSL, originalSSL);\n\t\t\tSystemGlobals.setValue(ConfigKeys.MAIL_SMTP_PORT, originalPort);\n\t\t}\n\t\t\n\t\tthis.setTemplateName(TemplateKeys.AJAX_TEST_MAIL);\n\t\tthis.context.put(\"status\", status);\n\t}\n\t\n\tpublic void isPostIndexed()\n\t{\n\t\tint postId = this.request.getIntParameter(\"post_id\");\n\n\t\tthis.setTemplateName(TemplateKeys.AJAX_IS_POST_INDEXED);\n\t\t\n\t\tLuceneManager manager = (LuceneManager)SearchFacade.manager();\n\t\tDocument doc = manager.luceneSearch().findDocumentByPostId(postId);\n\t\t\n\t\tthis.context.put(\"doc\", doc);\n\t}\n\t\n\tpublic void loadPostContents()\n\t{\n\t\tint postId = this.request.getIntParameter(\"id\");\n\t\tPostDAO dao = DataAccessDriver.getInstance().newPostDAO();\n\t\tPost post = dao.selectById(postId);\n\t\tthis.setTemplateName(TemplateKeys.AJAX_LOAD_POST);\n\t\tthis.context.put(\"post\", post);\n\t}\n\t\n\tpublic void savePost()\n\t{\n\t\tPostDAO postDao = DataAccessDriver.getInstance().newPostDAO();\n\t\tPost post = postDao.selectById(this.request.getIntParameter(\"id\"));\n\t\t\n\t\tString originalMessage = post.getText();\n\t\t\n\t\tif (!PostCommon.canEditPost(post)) {\n\t\t\tpost = PostCommon.preparePostForDisplay(post);\n\t\t}\n\t\telse {\n\t\t\tpost.setText(this.request.getParameter(\"value\"));\n\t\t\tpostDao.update(post);\n\t\t\tSearchFacade.update(post);\n\t\t\tpost = PostCommon.preparePostForDisplay(post);\n\t\t}\n\t\t\n\t\tboolean isModerator = SecurityRepository.canAccess(SecurityConstants.PERM_MODERATION_POST_EDIT);\n\t\t\n\t\tif (SystemGlobals.getBoolValue(ConfigKeys.MODERATION_LOGGING_ENABLED)\n\t\t\t\t&& isModerator && post.getUserId() != SessionFacade.getUserSession().getUserId()) {\n\t\t\tModerationHelper helper = new ModerationHelper();\n\t\t\t\n\t\t\tthis.request.addParameter(\"log_original_message\", originalMessage);\n\t\t\tthis.request.addParameter(\"post_id\", String.valueOf(post.getId()));\n\t\t\tthis.request.addParameter(\"topic_id\", String.valueOf(post.getTopicId()));\n\t\t\t\n\t\t\tModerationLog log = helper.buildModerationLogFromRequest();\n\t\t\tlog.getPosterUser().setId(post.getUserId());\n\t\t\t\n\t\t\thelper.saveModerationLog(log);\n\t\t}\n\t\t\n\t\tif (SystemGlobals.getBoolValue(ConfigKeys.POSTS_CACHE_ENABLED)) {\n\t\t\tPostRepository.update(post.getTopicId(), PostCommon.preparePostForDisplay(post));\n\t\t}\n\t\t\n\t\tthis.setTemplateName(TemplateKeys.AJAX_LOAD_POST);\n\t\tthis.context.put(\"post\", post);\n\t}\n\t\n\tpublic void previewPost()\n\t{\n\t\tPost post = new Post();\n\t\t\n\t\tpost.setText(this.request.getParameter(\"text\"));\n\t\tpost.setSubject(this.request.getParameter(\"subject\"));\n\t\tpost.setHtmlEnabled(\"true\".equals(this.request.getParameter(\"html\")));\n\t\tpost.setBbCodeEnabled(\"true\".equals(this.request.getParameter(\"bbcode\")));\n\t\tpost.setSmiliesEnabled(\"true\".equals(this.request.getParameter(\"smilies\")));\n\t\t\n\t\tif (post.isHtmlEnabled()) {\n\t\t\tpost.setText(new SafeHtml().makeSafe(post.getText()));\n\t\t}\n\t\t\n\t\tpost = PostCommon.preparePostForDisplay(post);\n\t\tpost.setSubject(StringEscapeUtils.escapeJavaScript(post.getSubject()));\n\t\tpost.setText(StringEscapeUtils.escapeJavaScript(post.getText()));\n\n\t\tthis.setTemplateName(TemplateKeys.AJAX_PREVIEW_POST);\n\t\tthis.context.put(\"post\", post);\n\t}\n\t\n\t/**\n\t * @see net.jforum.Command#list()\n\t */\n\tpublic void list()\n\t{\n\t\tthis.ignoreAction();\n\t}\n}",
  "metadata": {
    "fileId": "AjaxAction_java_chunk_1",
    "fileName": "AjaxAction.java",
    "filePath": "src/net/jforum/view/forum/AjaxAction.java"
  }
}