{
  "pageContent": "File Path: src/net/jforum/dao/KarmaDAO.java\n\n Original Content: /*\n * Copyright (c) JForum Team\n * All rights reserved.\n * \n * Redistribution and use in source and binary forms, \n * with or without modification, are permitted provided \n * that the following conditions are met:\n * \n * 1) Redistributions of source code must retain the above \n * copyright notice, this list of conditions and the \n * following  disclaimer.\n * 2)  Redistributions in binary form must reproduce the \n * above copyright notice, this list of conditions and \n * the following disclaimer in the documentation and/or \n * other materials provided with the distribution.\n * 3) Neither the name of \"Rafael Steil\" nor \n * the names of its contributors may be used to endorse \n * or promote products derived from this software without \n * specific prior written permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT \n * HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY \n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, \n * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF \n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR \n * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL \n * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE \n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, \n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES \n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF \n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, \n * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER \n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER \n * IN CONTRACT, STRICT LIABILITY, OR TORT \n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN \n * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF \n * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE\n * \n * Created on Jan 11, 2005 11:00:06 PM\n * The JForum Project\n * http://www.jforum.net\n */\npackage net.jforum.dao;\n\nimport java.util.Date;\nimport java.util.List;\nimport java.util.Map;\n\nimport net.jforum.entities.Karma;\nimport net.jforum.entities.KarmaStatus;\nimport net.jforum.entities.User;\n\n/**\n * @author Rafael Steil\n * @version $Id: KarmaDAO.java,v 1.7 2007/08/01 22:30:04 rafaelsteil Exp $\n */\npublic interface KarmaDAO\n{\n\t/**\n\t * Insert a new Karma.\n\t * \n\t * @param karma The karma to add. The instance should at\n\t * least have set the karma status, the user who is receiving\n\t * the karma and the user which is setting the karme.\n\t */\n\tpublic void addKarma(Karma karma) ;\n\t\n\t/**\n\t * Gets the karma status of some user.\n\t * \n\t * @param userId The user id to get the karma status\n\t * @return A <code>net.jforum.entities.KarmaStatus</code> instance\n\t */\n\tpublic KarmaStatus getUserKarma(int userId) ;\n\t\n\t/**\n\t * Updates the karma status for some user. \n\t * This method will store the user's karme in the\n\t * users table. \n\t * \n\t * @param userId The id of the user to update\n\t */\n\tpublic void updateUserKarma(int userId) ;\n\t\n\t/**\n\t * Checks if the user can add the karma.\n\t * The method will search for existing entries in\n\t * the karma table associated with the user id and post id\n\t * passed as argument. If found, it means that the user \n\t * already has voted, so we cannot allow him to vote one\n\t * more time.\n\t * \n\t * @param userId The user id to check\n\t * @param postId The post id to chekc\n\t * @return <code>true</code> if the user hasn't voted on the\n\t * post yet, or <code>false</code> otherwise. \n\t */\n\tpublic boolean userCanAddKarma(int userId, int postId) ;\n\t\n\t/**\n\t * Gets the karma status of some post.\n\t * \n\t * @param postId The post id to get the karma status\n\t * @return A <code>net.jforum.entities.KarmaStatus</code> instance\n\t */\n\tpublic KarmaStatus getPostKarma(int postId) ;\n\t\n\t/**\n\t * Updates a karma\n\t * @param karma The karma instance to update\n\t */\n\tpublic void update(Karma karma) ;\n\t\n\t/**\n\t * Gets the votes the user made on some topic.\n\t * @param topicId The topic id.\n\t * @param userId \n\t * \n\t * @return A <code>java.util.Map</code>, where the key is the post id and the\n\t * value id the rate made by the user.\n\t */\n\tpublic Map getUserVotes(int topicId, int userId) ;\n\t\n\t/**\n\t * @param user User\n\t */\n\tpublic void getUserTotalKarma(User user) ;\n\t\n\t\n\t/**\n\t * Total points received, grouped by user and filtered by a range of dates.\n\t * \n\t * @param firstPeriod Date\n\t * @param lastPeriod Date\n     * @param start int\n     * @param orderField orderField\n\t * @return Returns a List of users ant your total votes.\n\t */\n\tpublic List getMostRatedUserByPeriod(int start, Date firstPeriod, Date lastPeriod, String orderField) ;\n}",
  "metadata": {
    "fileId": "KarmaDAO_java_chunk_1",
    "fileName": "KarmaDAO.java",
    "filePath": "src/net/jforum/dao/KarmaDAO.java"
  }
}