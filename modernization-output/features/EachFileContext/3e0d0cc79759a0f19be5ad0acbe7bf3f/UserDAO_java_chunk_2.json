{
  "pageContent": "File Path: src/net/jforum/dao/UserDAO.java\n\n Original Content: public interface UserDAO \n{\n\t/**\n\t * Gets a specific <code>User</code>.\n\t * \n\t * @param userId The User ID to search\n\t * @return <code>User</code>object containing all the information\n\t * @see #selectAll\n\t */\n\tpublic User selectById(int userId) ;\n\t\n\t/**\n\t * Gets a specific <code>User</code>.\n\t * \n\t * @param username The User name to search\n\t * @return <code>User</code> object containing all the information\n\t * or <code>null</code> if no data was found. \n\t * @see #selectAll\n\t */\n\tpublic User selectByName(String username) ;\n\t\n\t/**\n\t * Gets all users\n\t * \n\t * @return <code>ArrayList</code> with the users. Each entry is an <code>User</code> object\n\t */\n\tpublic List selectAll() ;\n\t\n\t/**\n\t * Gets all users with your Karma.\n\t * \n\t * @return <code>List</code> with the users. Each entry is an <code>User</code> object\n\t * (with the KarmaStatus populated).\n\t */\n\tpublic List selectAllWithKarma() ;\n\t\n\t/**\n\t * Gets all users from a specific group.\n\t * \n\t * @param groupId The group id\n\t * @param start The index position to start fetching\n\t * @param count The total number of records to fetch\n\t * @return <code>List</code> with the users. Each entry is an <code>User</code> object\n\t */\n\tpublic List selectAllByGroup(int groupId, int start, int count) ;\n\t\n\t/**\n\t * Gets all users\n\t *\n\t * @param startFrom Index to start fetching from\n\t * @param count Number of records to retrieve\n\t * @return <code>ArrayList</code> with the users. Each entry is an <code>User</code> object\n\t * (with the KarmaStatus populated).\n\t */\n\tpublic List selectAllWithKarma(int startFrom, int count) ;\n\t\n\t/**\n\t * Finds an user by matching an input string. \n\t * \n\t * @param input The username to search. May be part of the username. \n\t * The method will match all users who have the input string as \n\t * part of their usernames.\n\t * @param exactMath Set to <code>true</code> to get the user data related to \n\t * the username passed as argument, and set it to <code>false</code> to \n\t * search all users who match the criteria. \n\t * @return <code>List</code> with the found users. Each entry is an \n\t * <code>User</code> object, where only the <i>id</i> and <i>username</i>\n\t * members are filled.\n\t */\n\tpublic List findByName(String input, boolean exactMath) ;\n\t\n\t/**\n\t * Gets all users\n\t *\n\t * @param startFrom Index to start fetching from\n\t * @param count Number of records to retrieve\n\t * @return <code>ArrayList</code> with the users. Each entry is an <code>User</code> object\n\t */\n\tpublic List selectAll(int startFrom, int count) ;\n\t\n\n\t/**\n\t * Deletes an user.\n\t * \n\t * @param userId The user ID to delete\n\t * @see #undelete(int)\n\t */\n\tpublic void delete(int userId) ;\n\t\n\t/**\n\t * Undeletes an user.\n\t * The system allows user undeletation because when you \n\t * call {@link #delete(int)} the user isn't fisically deleted of the\n\t * database, but just marked as deleted. This is done to ensure\n\t * data integrity.\n\t * \n\t * @param userId The user ID to undelete\n\t * @see #delete(int)\n\t */\n\tpublic void undelete(int userId) ;\n\t\n\t/**\n\t * Updates a user.\n\t * \n\t * @param user Reference to a <code>User</code> object to update\n\t */\n\tpublic void update(User user) ;\n\t\n\t/**\n\t * Adds a new User.\n\t * After successfuly persisting the data, this method\n\t * <b>shoud</b> call <code>user.setId(theNewId);</code>, as well\n\t * return the new user id. \n\t * @param user Reference to a valid and configured <code>User</code> object\n\t * @return The new user id\n\t */\n\tpublic int addNew(User user) ;\n\n\t/**\n\t * Adds a new user with a predefined user id\n\t * \n\t * (added by Pieter for external login support)\n\t * @param user Reference to a valid and configured <code>User</code> object, with the user id already set\n\t */\n\tpublic void addNewWithId(User user)  ;\n\t\n\t/**\n\t * Set the active status.\n\t * An user with the active status equals to false cannot be considered\n\t * a \"oficial\", \"fully registered\" user until its status is set to true. This is\n\t * interesting when you want to request user confirmation about registrations,\n\t * for example\n\t * \n\t * @param userId The user ID to change the status\n\t * @param active <code>true</code> or <code>false</code>\n\t */\n\tpublic void setActive(int userId, boolean active) ;\n\t\n\t/**\n\t * Sets the ranking.\n\t * \n\t * @param userId The user ID\n\t * @param rankingId int\n\t */\n\tpublic void setRanking(int userId, int rankingId) ;\n\t\n\t/**\n\t * Increments the number of posts of the user.\n\t * \n\t * @param userId The user ID to increment the number of posts\n\t */\n\tpublic void incrementPosts(int userId) ;\n\t\n\t/**\n\t * Decrement the number of posts of some user.\n\t * \n\t * @param userId The user ID do decrement the number of posts.\n\t */\n\tpublic void decrementPosts(int userId) ;\n\t\n\t/**\n\t * Gest some piece of information of the last user registered\n\t * \n\t * @return <code>HashMap</code> containing the information. The map\n\t * has two keys:<br>\n\t * <li><b>userName</b>: The username\n\t * <li><b>userId</b>: The user's ID \n\t */\n\tpublic User getLastUserInfo() ;\n\t\n\t/**\n\t * Gets the total number of users\n\t * \n\t * @return The total number of users\n\t */\n\tpublic int getTotalUsers() ;\n\t\n\t/**\n\t * Gets the total number of users of some group.\n\t * \n\t * @param groupId The group id\n\t * @return The total number of users\n\t */\n\tpublic int getTotalUsersByGroup(int groupId) ;\n\t\n\t/**\n\t * whether the user is locked or not.\n\t *\n     * @param  user_id  int\n\t * @return boolean\n\t */\n\tpublic boolean isDeleted(int user_id) ;\n\t\n\t/***\n\t * Checks the existence of some username.\n\t * This method is used to ensure that will not be two equal usernames in the database.\n\t * \n\t * @param username The username to verify\n\t * @return <code>true</code> or <code>false</code>, if the user was found or not, respectively\n\t */\n\tpublic boolean isUsernameRegistered(String username) ;\n\t\n\t/**\n\t * Validates the user login.\n\t * \n\t * @param username The username\n\t * @param password The password\n\t * @return The user object if the provided information was corret, <code>null</code> if the information was invalid \n\t */\n\tpublic User validateLogin(String username, String password) ;\n\t\n\t/**\n\t * Associate the user to the group\n\t * \n\t * @param userId The user id \n\t * @param groupId The group id to associate to\n\t */\n\tpublic void addToGroup(int userId, int[] groupId) ;\n\t\n\t/**\n\t * Remove the user from the group\n\t * \n\t * @param userId The user id\n\t * @param groupId The group id to remove the user from\n\t */\n\tpublic void removeFromGroup(int userId, int[] groupId) ;\n\t\n\t/**\n\t * Stores the \"lost password\" security hash, that was generated\n\t * when the user asked the system to get a reminder of his password. \n\t * This hash is used to ensure the information supplied.  \n\t * \n\t * @param email The user email\n\t * @param hash The hash to store.\n\t */\n\tpublic void writeLostPasswordHash(String email, String hash) ;\n\t\n\t/**\n\t * Validate the provided security hash against the data stored in our system.\n\t * \n\t * @param email The user email\n\t * @param hash The supplied security hash\n\t * @return <code>true</code> if the data matches ok, of <code>false</code> if it is invalid\n\t */\n\tpublic boolean validateLostPasswordHash(String email, String hash) ;\n\t\n\t/**\n\t * Writes a new password for the user. \n\t * \n\t * @param password The new password\n\t * @param email The user email\n\t */\n\tpublic void saveNewPassword(String password, String email) ;\n\t\n\t/**\n\t * Gets the username related to the email\n\t * \n\t * @param email The email to search for the username\n\t * @return The username, if found, or an empty <code>String</code>\n\t */\n\tpublic String getUsernameByEmail(String email) ;\n\t\n\t/**\n\t * Validate if the activated key matches the one in the database\n\t * \n\t * @param userId Which user to validate the activation key?\n\t * @param hash The activation key\n\t * @return <code>true</code> if the data matches ok, of <code>false</code> if it is invalid\n\t */\n\tpublic boolean validateActivationKeyHash(int userId , String hash) ;\n\n\t/**\n\t * Set user account to active\n\t * \n\t * @param userId Which user account to set active?\n\t */\n\tpublic void writeUserActive(int userId) ;\n\t\n\t/**\n\t * Updates only the username. \n\t * This method generally will be used in implementations\n\t * of <code>net.jforum.drivers.external.LoginAuthenticator</code> to \n\t * update usernames which changed in the external source and therefore\n\t * should be updated in jforum's users table. \n\t * \n\t * @param userId The user's id related to the username to update\n\t * @param username The new username to write\n\t */\n\tpublic void updateUsername(int userId, String username) ;\n\t\n\t/**\n\t * Check if the username passed as argument is different of\n\t * the username existent in the database. \n\t * \n\t * @param userId The user's id to work with\n\t * @param usernameToCheck The username to compare with the existing\n\t * one in <i>jforum_users</i>\n\t * @return <code>true</code> if the usernames are different.\n\t */\n\tpublic boolean hasUsernameChanged(int userId, String usernameToCheck) ;\n\t\n\t/**\n\t * Saves the user-specific security hash to the database\n\t * @param userId the user id to save\n\t * @param hash the security hash\n\t */\n\tpublic void saveUserAuthHash(int userId, String hash) ;\n\t\n\t/**\n\t * Retrieves the auth hash from the database\n\t * @param userId intt\n\t * @return String\n\t */\n\tpublic String getUserAuthHash(int userId) ;\n\t\n\t/**\n\t * Returns a list of users that haven't yet activated their accounts\n\t * @return\n\t */\n\tpublic List pendingActivations();\n\n\t/**\n\t * Finds a user by its email address\n\t * @param email the email address to search\n\t * @return the user instance if a match is found, or null otherwise\n\t */\n\tpublic User findByEmail(String email);\n}",
  "metadata": {
    "fileId": "UserDAO_java_chunk_2",
    "fileName": "UserDAO.java",
    "filePath": "src/net/jforum/dao/UserDAO.java"
  }
}