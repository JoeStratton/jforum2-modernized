{
  "pageContent": "File Path: src/net/jforum/dao/MySQLVersionWorkarounder.java\n\n Original Content: /*\n * Copyright (c) JForum Team\n * All rights reserved.\n * \n * Redistribution and use in source and binary forms, \n * with or without modification, are permitted provided \n * that the following conditions are met:\n * \n * 1) Redistributions of source code must retain the above \n * copyright notice, this list of conditions and the \n * following  disclaimer.\n * 2)  Redistributions in binary form must reproduce the \n * above copyright notice, this list of conditions and \n * the following disclaimer in the documentation and/or \n * other materials provided with the distribution.\n * 3) Neither the name of \"Rafael Steil\" nor \n * the names of its contributors may be used to endorse \n * or promote products derived from this software without \n * specific prior written permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT \n * HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY \n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, \n * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF \n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR \n * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL \n * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE \n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, \n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES \n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF \n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, \n * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER \n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER \n * IN CONTRACT, STRICT LIABILITY, OR TORT \n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN \n * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF \n * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE\n * \n * Created on 29/11/2005 13:25:55\n * The JForum Project\n * http://www.jforum.net\n */\npackage net.jforum.dao;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.OutputStream;\nimport java.sql.Connection;\nimport java.sql.DatabaseMetaData;\nimport java.util.Properties;\n\nimport net.jforum.ConfigLoader;\nimport net.jforum.util.preferences.ConfigKeys;\nimport net.jforum.util.preferences.SystemGlobals;\n\nimport org.apache.log4j.Logger;\n\n/**\n * Try to fix some database configuration problems.\n * This class will much likely do some checks only for mysql.\n * @author Rafael Steil\n * @version $Id: MySQLVersionWorkarounder.java,v 1.1 2007/09/12 14:43:13 rafaelsteil Exp $\n */\npublic class MySQLVersionWorkarounder\n{\n\tprivate static Logger logger = Logger.getLogger(MySQLVersionWorkarounder.class);\n    private static final String MYSQL_323_DATA_ACCESS_DRIVER = net.jforum.dao.mysql.MySQL323DataAccessDriver.class.getName();\n    private static final String MYSQL_DATA_ACCESS_DRIVER = net.jforum.dao.mysql.MysqlDataAccessDriver.class.getName();\n\n    public void handleWorkarounds(Connection c)\n\t{\n\t\tif (c == null) {\n\t\t\tlogger.warn(\"Cannot work with a null connection\");\n\t\t\treturn;\n    \t}\n    \t\n    \tif (!\"mysql\".equals(SystemGlobals.getValue(ConfigKeys.DATABASE_DRIVER_NAME))) {\n    \t\treturn;\n    \t}\n    \t\n    \ttry {\n    \t\tDatabaseMetaData meta = c.getMetaData();\n    \t\tlogger.debug(\"MySQL Version: \" + meta.getDatabaseProductVersion());\n    \t\t\n    \t\tint major = meta.getDatabaseMajorVersion();\n    \t\tint minor = meta.getDatabaseMinorVersion();\n    \t\t\n    \t\tif (major == 3 && minor == 23) {\n    \t\t\tthis.handleMySql323();\n    \t\t}\n    \t\telse if (major == 4 && minor == 0) {\n    \t\t\tthis.handleMySql40x();\n    \t\t}\n    \t\telse if (major > 4 || (major == 4 && minor > 0)) {\n    \t\t\tthis.handleMySql41xPlus();\n    \t\t}\n    \t}\n    \tcatch (Exception e) {\n    \t\tlogger.error(e.toString(), e);\n    \t}\n\t}\n\t\n\tprivate void handleMySql323() throws Exception\n\t{\n\t\tthis.ensureDaoClassIsCorrect(MYSQL_323_DATA_ACCESS_DRIVER);\n\t\t\n\t\tProperties p = this.loadSqlQueries();\n\t\t\n\t\tif (p != null) {\n\t\t\tString[] necessaryKeys = { \n\t\t\t\t\"PermissionControl.deleteRoleValuesByRoleId\",\n\t\t\t\t\"PermissionControl.getRoleIdsByGroup\",\n\t\t\t\t\"PermissionControl.getRoles\",\n\t\t\t\t\"PermissionControl.getRoleValues\"\n\t\t\t};\n\t\t\t\n\t\t\tboolean shouldUpdate = false;\n\t\t\t\n\t\t\tif (p.size() == 0) {\n\t\t\t\tshouldUpdate = true;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfor (int i = 0; i < necessaryKeys.length; i++) {\n\t\t\t\t\tString key = necessaryKeys[i];\n\t\t\t\t\t\n\t\t\t\t\tif (p.getProperty(key) == null) {\n\t\t\t\t\t\tshouldUpdate = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (shouldUpdate) {\n\t\t\t\tString path = this.buildPath(\"mysql_323.sql\");\n\t\t\t\t\n\t\t\t\tFileInputStream fis = new FileInputStream(path);\n\t\t\t\t\n\t\t\t\ttry {\n\t\t\t\t\tp.load(fis);\n\t\t\t\t\tthis.saveSqlQueries(p);\n\t\t\t\t}\n\t\t\t\tfinally {\n\t\t\t\t\tfis.close();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate void handleMySql40x() throws Exception\n\t{\n\t\tthis.ensureDaoClassIsCorrect(MYSQL_DATA_ACCESS_DRIVER);\n\t\t\n\t\tProperties p = this.loadSqlQueries();\n\t\t\n\t\tif (p != null) {\n\t\t\tif (p.size() == 0 || p.getProperty(\"PermissionControl.deleteAllRoleValues\") == null) {\n\t\t\t\tString path = this.buildPath(\"mysql_40.sql\");\n\t\t\t\t\n\t\t\t\tFileInputStream fis = new FileInputStream(path);\n\t\t\t\t\n\t\t\t\ttry {\n\t\t\t\t\tp.load(fis);\n\t\t\t\t\tthis.saveSqlQueries(p);\n\t\t\t\t}\n\t\t\t\tfinally {\n\t\t\t\t\tfis.close();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate void handleMySql41xPlus() throws Exception\n\t{\n\t\tthis.ensureDaoClassIsCorrect(MYSQL_DATA_ACCESS_DRIVER);\n\t\t\n\t\tProperties p = this.loadSqlQueries();\n\t\t\n\t\tif (p != null && p.size() > 0) {\n\t\t\tthis.saveSqlQueries(new Properties());\n\t\t}\n\t\t\n\t\tthis.fixEncoding();\n\t}\n\t\n\tprivate void fixEncoding() throws Exception\n\t{\n\t\tFileInputStream fis = null;\n\t\tOutputStream os = null;\n\t\t\n\t\ttry {\n\t\t\tProperties p = new Properties();\n\t\t\t\n\t\t\tFile f = new File(SystemGlobals.getValue(ConfigKeys.DATABASE_DRIVER_CONFIG));\n\t\t\t\n\t\t\tif (f.canWrite()) {\n\t\t\t\tfis = new FileInputStream(f);\n\t\t\t\t\n\t\t\t\tp.load(fis);\n\t\t\t\t\n\t\t\t\tp.setProperty(ConfigKeys.DATABASE_MYSQL_ENCODING, \"\");\n\t\t\t\tp.setProperty(ConfigKeys.DATABASE_MYSQL_UNICODE, \"\");\n\t\t\t\t\n\t\t\t\tos = new FileOutputStream(f);\n\t\t\t\tp.store(os, null);\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\tif (fis != null) {\n\t\t\t\tfis.close();\n\t\t\t}\n\t\t\tif (os != null) {\n\t\t\t\tos.close();\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate void ensureDaoClassIsCorrect(String shouldBe) throws Exception\n\t{\n\t\tif (!shouldBe.equals(SystemGlobals.getValue(ConfigKeys.DAO_DRIVER))) {\n\t\t\tlogger.info(\"MySQL DAO class is incorrect. Setting it to \" + shouldBe);\n\t\t\t\n\t\t\tthis.fixDAODriver(shouldBe);\n\t\t\t\n\t\t\tSystemGlobals.setValue(ConfigKeys.DAO_DRIVER, shouldBe);\n\t\t\tConfigLoader.loadDaoImplementation();\n\t\t}\n\t}\n\t\n\tprivate Properties loadSqlQueries() throws Exception\n\t{\n\t\t// First, check if we really have a problem\n\t\tString sqlQueries = SystemGlobals.getValue(ConfigKeys.SQL_QUERIES_DRIVER);\n\t\t\n\t\tFile f = new File(sqlQueries);\n\t\t\n\t\tProperties p = new Properties();\n\t\t\n\t\tFileInputStream fis = new FileInputStream(f);\n\t\t\n\t\ttry {\n\t\t\tp.load(fis);\n\t\t\t\n\t\t\tif (f.canWrite()) {\n\t\t\t\treturn p;\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\ttry { fis.close(); } catch (Exception e) {}\n\t\t}\n\t\t\n\t\tlogger.warn(\"Cannot overwrite\" + sqlQueries + \" file. Insuficient privileges\");\n\t\treturn null;\n\t}\n\t\n\tprivate void saveSqlQueries(Properties p) throws Exception\n\t{\n\t\tFileOutputStream fos = new FileOutputStream(SystemGlobals.getValue(ConfigKeys.SQL_QUERIES_DRIVER));\n\t\t\n\t\ttry {\n\t\t\tp.store(fos, null);\n\t\t}\n\t\tfinally {\n\t\t\tfos.close();\n\t\t}\n\n\t\tSystemGlobals.loadQueries(SystemGlobals.getValue(ConfigKeys.SQL_QUERIES_DRIVER));\n\t}\n\t\n\tprivate void fixDAODriver(String daoClassName) throws Exception\n\t{\n\t\tString driverConfigPath = SystemGlobals.getValue(ConfigKeys.DATABASE_DRIVER_CONFIG);\n\t\t\n\t\tFile f = new File(driverConfigPath);\n\t\t\n\t\tif (f.canWrite()) {\n\t\t\t// Fix the DAO class\n\t\t\tProperties p = new Properties();\n\t\t\t\n\t\t\tFileInputStream fis = new FileInputStream(driverConfigPath);\n\t\t\tFileOutputStream fos = null;\n\t\t\t\n\t\t\ttry {\n\t\t\t\tp.load(fis);\n\t\t\t\tp.setProperty(ConfigKeys.DAO_DRIVER, daoClassName);\n\t\t\t\t\n\t\t\t\tfos = new FileOutputStream(driverConfigPath);\n\t\t\t\tp.store(fos, null);\n\t\t\t}\n\t\t\tfinally {\n\t\t\t\tif (fos != null) {\n\t\t\t\t\tfos.close();\n\t\t\t\t}\n                \n\t\t\t\tfis.close();\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tlogger.warn(\"Cannot overwrite\" + driverConfigPath + \". Insuficient privileges\");\n\t\t}\n\t}\n\t\n\tprivate String buildPath(String concat)\n\t{\n\t\treturn new StringBuffer(256)\n\t\t\t.append(SystemGlobals.getValue(ConfigKeys.CONFIG_DIR))\n\t\t\t.append('/')\n\t\t\t.append(\"database/mysql/\")\n\t\t\t.append(concat)\n\t\t\t.toString();\n\t}\n}",
  "metadata": {
    "fileId": "MySQLVersionWorkarounder_java_chunk_1",
    "fileName": "MySQLVersionWorkarounder.java",
    "filePath": "src/net/jforum/dao/MySQLVersionWorkarounder.java"
  }
}