{
  "pageContent": "File Path: src/net/jforum/dao/AttachmentDAO.java\n\n Original Content: /*\n * Copyright (c) JForum Team\n * All rights reserved.\n * \n * Redistribution and use in source and binary forms, \n * with or without modification, are permitted provided \n * that the following conditions are met:\n * \n * 1) Redistributions of source code must retain the above \n * copyright notice, this list of conditions and the \n * following  disclaimer.\n * 2)  Redistributions in binary form must reproduce the \n * above copyright notice, this list of conditions and \n * the following disclaimer in the documentation and/or \n * other materials provided with the distribution.\n * 3) Neither the name of \"Rafael Steil\" nor \n * the names of its contributors may be used to endorse \n * or promote products derived from this software without \n * specific prior written permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT \n * HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY \n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, \n * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF \n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR \n * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL \n * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE \n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, \n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES \n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF \n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, \n * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER \n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER \n * IN CONTRACT, STRICT LIABILITY, OR TORT \n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN \n * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF \n * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE\n * \n * Created on Jan 17, 2005 4:31:45 PM\n * The JForum Project\n * http://www.jforum.net\n */\npackage net.jforum.dao;\n\nimport java.util.List;\nimport java.util.Map;\n\nimport net.jforum.entities.Attachment;\nimport net.jforum.entities.AttachmentExtension;\nimport net.jforum.entities.AttachmentExtensionGroup;\nimport net.jforum.entities.QuotaLimit;\n\n/**\n * @author Rafael Steil\n * @version $Id: AttachmentDAO.java,v 1.7 2006/08/23 02:13:34 rafaelsteil Exp $\n */\npublic interface AttachmentDAO\n{\n\t/**\n\t * Adds a new attachment.\n\t * \n\t * @param a The attacment to add\n\t */\n\tpublic void addAttachment(Attachment a);\n\t\n\t/**\n\t * Updates an attachment.\n\t * Only the file comment is updated.\n\t * \n\t * @param a The attachment to update\n\t */\n\tpublic void updateAttachment(Attachment a);\n\t\n\t/**\n\t * Rovemos an attachment.\n\t * \n\t * @param id The attachment's id to remove\n\t * @param postId the post id\n\t */\n\tpublic void removeAttachment(int id, int postId);\n\t\n\t/**\n\t * Gets the attachments of some message.\n\t * \n\t * @param postId The post id associated with the attachments.\n\t * @return A list where each entry is a net.jforum.entities.Attachment \n\t * instance.\n\t */\n\tpublic List selectAttachments(int postId);\n\t\n\t/**\n\t * Gets an attachment by its id\n\t * \n\t * @param attachId The attachment id\n\t * @return The attachment, or <code>null</code> if no record was found\n\t */\n\tpublic Attachment selectAttachmentById(int attachId);\n\t\n\t/**\n\t * Inserts a new quota limit.\n\t * \n\t * @param limit The data to insert\n\t */\n\tpublic void addQuotaLimit(QuotaLimit limit);\n\t\n\t/**\n\t * Updates a quota limit.\n\t * \n\t * @param limit The data to update\n\t */\n\tpublic void updateQuotaLimit(QuotaLimit limit);\n\t\n\t/**\n\t * Deletes a quota limit\n\t * \n\t * @param id The id of the quota to remove\n\t */\n\tpublic void removeQuotaLimit(int id);\n\t\n\t/**\n\t * Removes a set of quota limit.\n\t * \n\t * @param ids The ids to remove.\n\t */\n\tpublic void removeQuotaLimit(String[] ids);\n\t\n\t/**\n\t * Associates a quota limmit to some group.\n\t * \n\t * @param groupId The group id\n\t * @param quotaId The quota id\n\t */\n\tpublic void setGroupQuota(int groupId, int quotaId);\n\t\n\t/**\n\t * Removes all quotas limits from all groups.\n\t *  \n\t */\n\tpublic void cleanGroupQuota();\n\t\n\t/**\n\t * Gets all registered quota limits\n\t * \n\t * @return A list instance where each entry is a\n\t * {@link net.jforum.entities.QuotaLimit} instance.\n\t */\n\tpublic List selectQuotaLimit();\n\t\n\t/**\n\t * Gets the quota associated to some group.\n\t * \n\t * @param groupId The group id\n\t * @return A <code>QuotaLimit</code> instance, or <code>null</code> if\n\t * no records were found. \n\t */\n\tpublic QuotaLimit selectQuotaLimitByGroup(int groupId) ;\n\t\n\t/**\n\t * Gets the quota limits of registered groups.\n\t * \n\t * @return A map instance where each key is the group id\n\t * and the value is the quota limit id.\n\t */\n\tpublic Map selectGroupsQuotaLimits();\n\t\n\t/**\n\t * Adds a new extension group.\n\t * \n\t * @param g The data to insert\n\t */\n\tpublic void addExtensionGroup(AttachmentExtensionGroup g);\n\t\n\t/**\n\t * Updates some extensin group.\n\t * \n\t * @param g The data to update\n\t */\n\tpublic void updateExtensionGroup(AttachmentExtensionGroup g);\n\t\n\t/**\n\t * Removes a set of extension groups.\n\t * \n\t * @param ids The ids to remove.\n\t */\n\tpublic void removeExtensionGroups(String[] ids);\n\t\n\t/**\n\t * Gets all extension groups.\n\t * \n\t * @return A list instance where each entry is an \n\t * {@link net.jforum.entities.AttachmentExtensionGroup} instance.\n\t */\n\tpublic List selectExtensionGroups();\n\t\n\t/**\n\t * Gets all extensions and its security options, \n\t * as well from the groups. \n\t * \n\t * @return A map instance where the key is the extension name\n\t * and the value is a Boolean, indicating if the extension can\n\t * be used in the uploaded files. If there is no entry for\n\t * a given extension, then it means that it is allowed. \n\t */\n\tpublic Map extensionsForSecurity();\n\t\n\t/**\n\t * Adds a new extension\n\t * \n\t * @param e The extension to add\n\t */\n\tpublic void addExtension(AttachmentExtension e);\n\t\n\t/**\n\t * Updates an extension\n\t * \n\t * @param e The extension to update\n\t */\n\tpublic void updateExtension(AttachmentExtension e);\n\t\n\t/**\n\t * Removes a set of extensions\n\t * \n\t * @param ids The ids to remove\n\t */\n\tpublic void removeExtensions(String[] ids);\n\t\n\t/**\n\t * Gets all registered extensions\n\t * \n\t * @return A list instance, where each entry is an\n\t * {@link net.jforum.entities.AttachmentExtension} instance\n\t */\n\tpublic List selectExtensions();\n\t\n\t/**\n\t * Gets an extension information by the extension's name\n\t * @param extension\n\t * @return AttachmentExtension\n\t */\n\tpublic AttachmentExtension selectExtension(String extension);\n\n\t/**\n\t * Gets the download mode by the extension group id\n\t * @param extensionGroupId extension group id\n\t * @return true = physical download mode; false = inline download mode\n\t */\n\tpublic boolean isPhysicalDownloadMode(int extensionGroupId);\n}",
  "metadata": {
    "fileId": "AttachmentDAO_java_chunk_1",
    "fileName": "AttachmentDAO.java",
    "filePath": "src/net/jforum/dao/AttachmentDAO.java"
  }
}