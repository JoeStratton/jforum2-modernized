{
  "pageContent": "File Path: src/net/jforum/dao/TopicDAO.java\n\n Original Content: /*\n * Copyright (c) JForum Team\n * All rights reserved.\n * \n * Redistribution and use in source and binary forms, \n * with or without modification, are permitted provided \n * that the following conditions are met:\n * \n * 1) Redistributions of source code must retain the above \n * copyright notice, this list of conditions and the \n * following  disclaimer.\n * 2)  Redistributions in binary form must reproduce the \n * above copyright notice, this list of conditions and \n * the following disclaimer in the documentation and/or \n * other materials provided with the distribution.\n * 3) Neither the name of \"Rafael Steil\" nor \n * the names of its contributors may be used to endorse \n * or promote products derived from this software without \n * specific prior written permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT \n * HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY \n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, \n * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF \n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR \n * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL \n * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE \n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, \n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES \n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF \n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, \n * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER \n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER \n * IN CONTRACT, STRICT LIABILITY, OR TORT \n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN \n * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF \n * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE\n * \n * This file creating date: Feb 23, 2003 / 2:56:58 PM\n * The JForum Project\n * http://www.jforum.net\n */\npackage net.jforum.dao;\n\nimport java.util.Collection;\nimport java.util.List;\nimport java.util.Map;\n\nimport net.jforum.entities.Topic;\nimport net.jforum.entities.User;\nimport net.jforum.search.SearchArgs;\nimport net.jforum.search.SearchResult;\n\n/**\n* Model interface for {@link net.jforum.entities.Topic}.\n * This interface defines methods which are expected to be\n * implementd by a specific data access driver. The intention is\n * to provide all functionality needed to update, insert, delete and\n * select some specific data.\n *\n * @author Rafael Steil\n * @version $Id: TopicDAO.java,v 1.18 2007/09/09 22:53:36 rafaelsteil Exp $\n */\npublic interface TopicDAO \n{\n\t/**\n\t * Fixes the fields <i>topic_first_post_id</i> and \n\t * <i>topic_last_post_id</i>.\n\t * \n\t * @param topicId The topic id to fix\n\t */\n\tpublic void fixFirstLastPostId(int topicId) ;\n\t\n\t/**\n\t * Gets a specific <code>Topic</code>.\n\t * \n\t * @param topicId The Topic ID to search\n\t * @return <code>Topic</code>object containing all the information\n\t * @see #selectAllByForum(int forumId)\n\t */\n\tpublic Topic selectById(int topicId) ;\n\t\n\t/**\n\t * Gets a topic's information from the topics table only.\n\t * No other information, like usernames, are fetched. \n\t * \n\t * @param topicId The topic id to get\n\t * @return A topic instance\n\t */\n\tpublic Topic selectRaw(int topicId) ;\n\t\n\t/**\n\t * Selects all topics associated to a specific forum\n\t * \n\t * @param forumId The forum id to select the topics\n\t * @return <code>ArrayList</code> with all topics found. Each entry is a <code>net.jforum.Topic</code> object\n\t */\n\tpublic List selectAllByForum(int forumId) ;\n\t\n\tpublic List selectTopicTitlesByIds(Collection idList) ;\n\t\n\t/**\n\t * Selects all topics associated to a specific forum, limiting the total number\n\t * of records returned.\n\t * \n\t * @param forumId The forum id to select the topics\n\t * @return <code>ArrayList</code> with all topics found. Each entry is a <code>net.jforum.Topic</code> object\n     * @param startFrom int\n     * @param count int\n\t */\n\tpublic List selectAllByForumByLimit(int forumId, int startFrom, int count) ;\n\n    /**\n     * Selects all topics associated to a specific user and belonging to\n     * given forums\n     * @param userId int User ID.\n     * @param startFrom int\n     * @param count int\n     * @return  List\n     */\n\tpublic List selectByUserByLimit(int userId,int startFrom, int count) ;\n\n\t/**\n\t * How many topics were created by a given user\n\t * @param userId the user id to check\n\t * @return the number of topics created by the user\n\t */\n\tpublic int countUserTopics(int userId) ;\n\t\n\t/**\n\t * Delete a Topic.\n\t * \n\t * @param topic The Topic ID to delete\n\t * @param fromModeration boolean\n\t */\n\tpublic void delete(Topic topic, boolean fromModeration) ;\n\t\n\t/**\n\t * Deletes a set of topics\n\t * @param topics The topics to delete. Each entry must be\n\t * an instance of net.jforum.entities.Topic\n\t * @param fromModeration boolean\n\t */\n\tpublic void deleteTopics(List topics, boolean fromModeration) ;\n\t\n\t/**\n\t * Deletes all topics from a forum\n\t * @param forumId int\n\t */\n\tpublic void deleteByForum(int forumId) ;\n\t\n\t/**\n\t * Updates a Topic.\n\t * \n\t * @param topic Reference to a <code>Topic</code> object to update\n\t */\n\tpublic void update(Topic topic) ;\n\t\n\t/**\n\t * Adds a new Topic.\n\t * \n\t * @param topic Reference to a valid and configured <code>Topic</code> object\n\t * @return The new ID\n\t */\n\tpublic int addNew(Topic topic) ;\n\t\n\t/**\n\t * Increments the number of times the topic was saw\n\t * \n\t * @param topicId The topic ID to increment the total number of views\n\t */\n\tpublic void incrementTotalViews(int topicId) ;\n\t\n\t/**\n\t * Increments the number of replies the topic has\n\t * \n\t * @param topicId The topic ID to increment the total number of replies\n\t */\n\tpublic void incrementTotalReplies(int topicId) ;\n\n\t/**\n\t * Decrements the number of replies the topic has\n\t * \n\t * @param topicId The topic ID to decrement the total number of replies\n\t */\n\tpublic void decrementTotalReplies(int topicId) ;\n\t\n\t/**\n\t * Sets the ID of the last post of the topic\n\t * \n\t * @param topicId Topic ID\n\t * @param postId Post ID\n\t */\n\tpublic void setLastPostId(int topicId, int postId) ;\n\t\n\t/**\n\t * Gets the last post id associated to the topic\n\t * \n\t * @param topicId The topic id\n     * @return int\n\t */\n\tpublic int getMaxPostId(int topicId) ;\n\t\n\t/**\n\t * Gets the number of posts the topic has.\n\t * \n\t * @param topicId The topic id\n\t * @return The number of posts\n\t */\n\tpublic int getTotalPosts(int topicId) ;\n\t\n\t/**\n\t * Get the users to notify\n\t * \n\t * @param topic The topic \n\t * @return <code>ArrayList</code> of <code>User</code> objects. Each\n\t * entry is an user who will receive the topic anwser notification\n\t * */\n\tpublic List notifyUsers(Topic topic) ;\n\t\n\t/**\n\t * Subscribe a set of users for notification of new post in the topic\n\t * @param topicId the topic id\n\t * @param users the relation of {@link User} instances to subscribe\n\t */\n\tpublic void subscribeUsers(int topicId, List users);\n\t\n\t/**\n\t * Subscribe the user for notification of new post in the topic\n\t *  \n\t * @param topicId The topic id\n\t * @param userId The user id\n\t */\n\tpublic void subscribeUser(int topicId, int userId) ;\n\t\n\t/**\n\t * Return the subscrition status of the user on the topic.\n\t * \n\t * @param topicId The topic id\n\t * @param userId The user id\n\t * @return true if the user is waiting notification on the topic\n\t */\n\tpublic boolean isUserSubscribed(int topicId, int userId) ;\n\t\n\t/**\n\t * Remove the user's subscription of the topic\n\t * \n\t * @param topicId The topic id\n\t * @param userId the User id\n\t */\n\tpublic void removeSubscription(int topicId, int userId) ;\n\t\n\t/**\n\t * Clean all subscriptions of some topic\n\t * \n\t * @param topicId The topic id\n\t */\n\tpublic void removeSubscriptionByTopic(int topicId) ;\n\t\n\t/**\n\t * Change the topic read status \n\t * \n\t * @param topicId The topic id\n\t * @param userId The user id\n\t * @param read <code>true</code> or <code>false</code>\n\t */\n\tpublic void updateReadStatus(int topicId, int userId, boolean read) ;\n\t\n\t/**\n\t * Lock or unlock a topic. \n\t * \n\t * @param topicId The topic id to perform the action on\n\t * @param status Use <code>Topic.STATUS_LOCKED</code> to lock the topic, or\n\t * <code>Topic.STATUS_UNLOCKED</code> to unlock. \n\t */\n\tpublic void lockUnlock(int[] topicId, int status) ;\n\n\t/**\n\t * Selects recent topics \n\t *\n\t * @param limit The number of topics to retrieve\n     * @return List\n\t */\n\tpublic List selectRecentTopics (int limit) ;\n\n\t/**\n\t * Selects hottest topics\n\t *\n\t * @param limit The number of topics to retrieve\n\t    * @return List\n\t */\n\tpublic List selectHottestTopics (int limit) ;\n\t\n\t/**\n\t * Sets the ID of the first post of the topic\n\t * \n\t * @param topicId Topic ID\n\t * @param postId Post ID\n\t */\n\tpublic void setFirstPostId(int topicId, int postId) ;\n\n\t/**\n\t * Gets the first post id associated to the topic\n\t * \n\t * @param topicId The topic id\n     * @return int\n\t */\n\tpublic int getMinPostId(int topicId) ;\n\t\n\t/**\n\t * Sets the moderatation flag for all topics of a given forum.\n\t * \n\t * @param forumId The forum id\n\t * @param status boolean\n\t */\n\tpublic void setModerationStatus(int forumId, boolean status) ;\n\n\t/**\n\t * Sets the moderatation flag for a given topic.\n\t * \n\t * @param topicId The topic id\n\t * @param status boolean\n\t */\n\tpublic void setModerationStatusByTopic(int topicId, boolean status) ;\n\n\t/**\n\t * Get all unique posters of some topic\n\t * @param topicId int\n\t * @return A Map instance with all topic posts. Key is the userid, \n\t * value is an {@link net.jforum.entities.User} instance with minimum\n\t * data filled\n\t */\n\tpublic Map topicPosters(int topicId) ;\n\t\n\t/**\n\t * @param args\n\t * @return\n\t */\n\tpublic SearchResult findTopicsByDateRange(SearchArgs args);\n}",
  "metadata": {
    "fileId": "TopicDAO_java_chunk_1",
    "fileName": "TopicDAO.java",
    "filePath": "src/net/jforum/dao/TopicDAO.java"
  }
}