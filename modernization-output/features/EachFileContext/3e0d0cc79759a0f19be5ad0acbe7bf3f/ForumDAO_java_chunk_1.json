{
  "pageContent": "File Path: src/net/jforum/dao/ForumDAO.java\n\n Original Content: /*\n * Copyright (c) JForum Team\n * All rights reserved.\n * \n * Redistribution and use in source and binary forms, \n * with or without modification, are permitted provided \n * that the following conditions are met:\n * \n * 1) Redistributions of source code must retain the above \n * copyright notice, this list of conditions and the \n * following  disclaimer.\n * 2)  Redistributions in binary form must reproduce the \n * above copyright notice, this list of conditions and \n * the following disclaimer in the documentation and/or \n * other materials provided with the distribution.\n * 3) Neither the name of \"Rafael Steil\" nor \n * the names of its contributors may be used to endorse \n * or promote products derived from this software without \n * specific prior written permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT \n * HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY \n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, \n * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF \n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR \n * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL \n * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE \n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, \n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES \n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF \n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, \n * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER \n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER \n * IN CONTRACT, STRICT LIABILITY, OR TORT \n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN \n * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF \n * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE\n * \n * This file creating date: Feb 23, 2003 / 2:43:40 PM\n * The JForum Project\n * http://www.jforum.net\n */\npackage net.jforum.dao;\n\nimport java.util.List;\n\nimport net.jforum.entities.Forum;\nimport net.jforum.entities.ForumStats;\nimport net.jforum.entities.LastPostInfo;\n\n/**\n* Model interface for {@link net.jforum.entities.Forum}.\n * This interface defines methods which are expected to be\n * implementd by a specific data access driver. The intention is\n * to provide all functionality needed to update, insert, delete and\n * select some specific data.\n * \n * @author Rafael Steil\n * @version $Id: ForumDAO.java,v 1.12 2006/08/28 23:22:27 rafaelsteil Exp $\n */\npublic interface ForumDAO \n{\n\t/**\n\t * Gets a specific <code>Forum</code>.\n\t * \n\t * @param forumId The ForumID to search\n\t * @return <code>Forum</code>object containing all the information\n\t * @see #selectAll\n\t */\n\tpublic Forum selectById(int forumId) ;\n\t\n\t/**\n\t * Selects all forums data from the database.\n\t * \n\t * @return ArrayList with the forums found \n\t * @see #selectById\n\t */\n\tpublic List selectAll() ;\n\t\n\t/**\n\t * Sets the forum's order one level up.\n\t * When you call this method on a specific forum, the forum that \n\t * is one level up will be sent down one level, and the forum which\n\t * you are sending up wil take the order position of the forum which\n\t * was sent down.\n\t * \n\t * @param forum The forum to change its order\n\t * @param related The forum which comes before the forum we want to change\n\t * @return The changed forum, with the new order set\n\t */\n\tpublic Forum setOrderUp(Forum forum, Forum related) ;\n\t\n\t/**\n\t * Sets the forum's order one level down.\n\t * For more information, take a look at @link #setOrderUp method. \n\t * The only different between both is that this method sends the \n\t * forum order down.\n\t * \n\t * @param forum The forum to change its order\n\t * @param related The forum which comes after the forum we want to change\n\t * @return The changed forum, with the new order set\n\t */\n\tpublic Forum setOrderDown(Forum forum, Forum related) ;\n\t\n\t/**\n\t * Delete a forum.\n\t * \n\t * @param forumId The forum ID to delete\n\t */\n\tpublic void delete(int forumId) ;\n\t\t\n\t/**\n\t * Updates a Forum.\n\t * \n\t * @param forum Reference to a <code>Forum</code> object to update\n\t */\n\tpublic void update(Forum forum) ;\n\t\n\t/**\n\t * Adds a new Forum.\n\t * \n\t * @param forum Reference to a valid and configured <code>Forum</code> object\n\t * @return The forum's ID\n\t */\n\tpublic int addNew(Forum forum) ;\n\t\n\t/**\n\t * Sets the last topic of a forum\n\t * \n\t * @param forumId The forum ID to update\n\t * @param postId Last post ID\n\t */\n\tpublic void setLastPost(int forumId, int postId) ;\n\n\t/**\n\t * Increments the total number of topics of a forum\n\t * \n\t * @param forumId The forum ID to update\n\t * @param count Increment a total of <code>count</code> elements\n\t */\n\tpublic void incrementTotalTopics(int forumId, int count) ;\n\t\n\t/**\n\t * Decrements the total number of topics of a forum\n\t * \n\t * @param forumId The forum ID to update\n\t * @param count Decrement a total of <code>count</code> elements \n\t */\n\tpublic void decrementTotalTopics(int forumId, int count) ;\n\n\t/**\n\t * Gets information about the latest message posted in some forum.\n\t * \n\t * @param forumId the forum's id to inspect\n\t * @return A {@link LastPostInfo} instance\n\t */\n\tpublic LastPostInfo getLastPostInfo(int forumId) ;\n\n\t/**\n\t * Get all moderators of some forum\n\t * @param forumId the forum's id to inspect\n\t * @return a list with all moderators. Each entry is an instance of\n\t * {@link net.jforum.entities.ModeratorInfo}\n\t */\n\tpublic List getModeratorList(int forumId) ;\n\t\n\t/**\n\t * Gets the total number of messages of a forum\n     * @return int\n     */\n\tpublic int getTotalMessages() ;\n\t\n\t/**\n\t * Gets the total number os topics of some forum\n\t * \n\t * @return Total of topics\n     * @param forumId int\n\t */\n\tpublic int getTotalTopics(int forumId) ;\n\n\t\n\t/**\n\t * Gets the last post id associated to the forum\n\t * \n\t * @param forumId The forum id\n     * @return int\n\t */\n\tpublic int getMaxPostId(int forumId) ;\n\t\n\t/**\n\t * Move the topics to a new forum\n\t * \n\t * @param topics The topics id array\n\t * @param fromForumId The original forum id\n\t * @param toForumId The destination forum id\n\t */\n\tpublic void moveTopics(String[] topics, int fromForumId, int toForumId) ;\n\t\n\t/**\n\t * Check if the forum has unread topics.\n\t * \n\t * @param forumId The forum's id to check\n\t * @param lastVisit The last visit time the user has seen the forum\n\t * @return An <code>java.util.List</code> instance, where each entry is a\n\t * <code>net.jforum.entities.Topic</code> instance. \n\t */\n\tpublic List checkUnreadTopics(int forumId, long lastVisit) ;\n\t\n\t/**\n\t * Enable or disabled moderation for the forum.\n\t * \n\t * @param categoryId The main category for the forum\n\t * @param status a boolean value representing the desired status\n\t */\n\tpublic void setModerated(int categoryId, boolean status) ;\n\t\n\t/**\n\t * Ges general statistics from the board\n\t * @return ForumStats\n\t */\n\tpublic ForumStats getBoardStatus() ;\n\t\n\t\n\t//codes below are added by socialnework@gmail.com for \"watching forum\" purpose\n\t/**\n\t * Get the users to notify\n\t * \n\t * @param forum The forum \n\t * @return <code>ArrayList</code> of <code>User</code> objects. Each\n\t * entry is an user who will receive the new topic in the forum notification\n\t * */\n\tpublic List notifyUsers(Forum forum) ;\n\t\n\t\n\t/**\n\t * Subscribe the user for notification of new topic in the forum\n\t * Added by socialnetwork@gmail.com\n\t * \n\t * @param forumId int\n\t * @param userId int\n\t */\n\tpublic void subscribeUser(int forumId, int userId) ;\n\t\n\t/**\n\t * Return the subscrition status of the user on the forum.\n\t * Added by socialnetwork@gmail.com\n\t * \n\t * @param forumId int\n\t * @param userId int\n\t * @return boolean\n\t */\n\tpublic boolean isUserSubscribed(int forumId, int userId) ;\n\t\n\t/**\n\t * Remove the user's subscription of the forum\n\t * \n\t * @param forumId The forum id\n\t * @param userId the User id\n\t */\n\tpublic void removeSubscription(int forumId, int userId) ;\n\t\n\t/**\n\t * Clean all subscriptions of some forum\n\t * \n\t * @param forumId The forum id\n\t */\n\tpublic void removeSubscriptionByForum(int forumId) ;\n\n\t/**\n\t * Given an email address, finds the forum Id\n\t * @param listEmail the email of the forum\n\t * @return the forum id of the given email, or 0 if not found\n\t */\n\tpublic int discoverForumId(String listEmail);\n}",
  "metadata": {
    "fileId": "ForumDAO_java_chunk_1",
    "fileName": "ForumDAO.java",
    "filePath": "src/net/jforum/dao/ForumDAO.java"
  }
}