{
  "pageContent": "File Path: src/net/jforum/dao/generic/security/GenericGroupSecurityDAO.java\n\n Original Content: /*\n * Copyright (c) JForum Team\n * All rights reserved.\n * \n * Redistribution and use in source and binary forms, \n * with or without modification, are permitted provided \n * that the following conditions are met:\n * \n * 1) Redistributions of source code must retain the above \n * copyright notice, this list of conditions and the \n * following  disclaimer.\n * 2)  Redistributions in binary form must reproduce the \n * above copyright notice, this list of conditions and \n * the following disclaimer in the documentation and/or \n * other materials provided with the distribution.\n * 3) Neither the name of \"Rafael Steil\" nor \n * the names of its contributors may be used to endorse \n * or promote products derived from this software without \n * specific prior written permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT \n * HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY \n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, \n * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF \n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR \n * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL \n * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE \n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, \n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES \n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF \n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, \n * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER \n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER \n * IN CONTRACT, STRICT LIABILITY, OR TORT \n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN \n * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF \n * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE\n * \n * This file creation date: 19/03/2004 - 18:44:56\n * The JForum Project\n * http://www.jforum.net\n */\npackage net.jforum.dao.generic.security;\n\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Iterator;\nimport java.util.List;\n\nimport net.jforum.JForumExecutionContext;\nimport net.jforum.dao.GroupSecurityDAO;\nimport net.jforum.dao.generic.AutoKeys;\nimport net.jforum.entities.Group;\nimport net.jforum.entities.User;\nimport net.jforum.exceptions.DatabaseException;\nimport net.jforum.repository.RolesRepository;\nimport net.jforum.security.Role;\nimport net.jforum.security.RoleCollection;\nimport net.jforum.security.RoleValue;\nimport net.jforum.security.RoleValueCollection;\nimport net.jforum.util.DbUtils;\nimport net.jforum.util.preferences.SystemGlobals;\n\nimport org.apache.commons.lang.StringUtils;\n\n/**\n * @author Rafael Steil\n * @version $Id: GenericGroupSecurityDAO.java,v 1.16 2007/08/25 00:11:29 rafaelsteil Exp $\n */\npublic class GenericGroupSecurityDAO extends AutoKeys implements GroupSecurityDAO\n{\n\tprivate List selectForumRoles(int forumId) \n\t{\n\t\tList l = new ArrayList();\n\t\t\n\t\tPreparedStatement p = null;\n\t\tResultSet rs = null;\n\t\t\n\t\ttry {\n\t\t\tp = JForumExecutionContext.getConnection().prepareStatement(\n\t\t\t\tSystemGlobals.getSql(\"PermissionControl.selectForumRoles\"));\n\t\t\tp.setString(1, String.valueOf(forumId));\n\t\t\t\n\t\t\trs = p.executeQuery();\n\t\t\t\n\t\t\twhile (rs.next()) {\n\t\t\t\tl.add(new Integer(rs.getInt(\"role_id\")));\n\t\t\t}\n\t\t}\n\t\tcatch (SQLException e) {\n\t\t\tthrow new DatabaseException(e);\n\t\t}\n\t\tfinally {\n\t\t\tDbUtils.close(rs, p);\n\t\t}\n\t\t\n\t\treturn l;\n\t}\n\t\n\tpublic void deleteForumRoles(int forumId) \n\t{\n\t\tPreparedStatement p = null;\n\t\t\n\t\tList roleIds = this.selectForumRoles(forumId);\n\t\t\n\t\ttry {\n\t\t\tStringBuffer ids = new StringBuffer();\n\t\t\t\n\t\t\tfor (Iterator iterator = roleIds.iterator(); iterator.hasNext();) {\n\t\t\t\tInteger id = (Integer)iterator.next();\n\t\t\t\tids.append(id).append(',');\n\t\t\t}\n\t\t\t\n\t\t\tids.append(\"-1\");\n\t\t\t\n\t\t\t// Role values\n\t\t\tString sql = SystemGlobals.getSql(\"PermissionControl.deleteRoleValues\");\n\t\t\tsql = StringUtils.replace(sql, \"#IDS#\", ids.toString());\n\t\t\t\n\t\t\tp = JForumExecutionContext.getConnection().prepareStatement(sql);\n\t\t\tp.setString(1, String.valueOf(forumId));\n\t\t\tp.executeUpdate();\n\t\t}\n\t\tcatch (SQLException e) {\n\t\t\tthrow new DatabaseException(e);\n\t\t}\n\t\tfinally {\n\t\t\tDbUtils.close(p);\n\t\t}\n\t}\n\t\n\t/**\n\t * @see net.jforum.dao.security.SecurityDAO#deleteAllRoles(int)\n\t */\n\tpublic void deleteAllRoles(int groupId)\n\t{\n\t\tPreparedStatement p = null;\n\t\t\n\t\ttry {\n\t\t\tp = JForumExecutionContext.getConnection().prepareStatement(\n\t\t\t\tSystemGlobals.getSql(\"PermissionControl.deleteAllRoleValues\"));\n\t\t\tp.setInt(1, groupId);\n\t\t\tp.executeUpdate();\n\t\t\tp.close();\n\n\t\t\tp = JForumExecutionContext.getConnection().prepareStatement(\n\t\t\t\tSystemGlobals.getSql(\"PermissionControl.deleteAllGroupRoles\"));\n\t\t\tp.setInt(1, groupId);\n\t\t\tp.executeUpdate();\n\t\t}\n\t\tcatch (SQLException e) {\n\t\t\tthrow new DatabaseException(e);\n\t\t}\n\t\tfinally {\n\t\t\tDbUtils.close(p);\n\t\t}\n\t}\n\n\t/**\n\t * @see net.jforum.dao.security.SecurityDAO#addRole(int, net.jforum.security.Role)\n\t */\n\tpublic void addRole(int id, Role role)\n\t{\n\t\tthis.addRole(id, role, null);\n\t}\n\n\t/**\n\t * @see net.jforum.dao.security.SecurityDAO#addRole(int, net.jforum.security.Role,\n\t *      net.jforum.security.RoleValueCollection)\n\t */\n\tpublic void addRole(int id, Role role, RoleValueCollection roleValues)\n\t{\n\t\tthis.setAutoGeneratedKeysQuery(SystemGlobals.getSql(\"PermissionControl.lastGeneratedRoleId\"));\n\t\tSecurityCommon.executeAddRole(SystemGlobals.getSql(\"PermissionControl.addGroupRole\"), id, role, roleValues,\n\t\t\tthis.supportAutoGeneratedKeys(), this.getAutoGeneratedKeysQuery());\n\t}\n\n\t/**\n\t * @see net.jforum.dao.security.SecurityDAO#loadRoles(int)\n\t */\n\tpublic RoleCollection loadRoles(int groupId)\n\t{\n\t\treturn this.loadRoles(new int[] { groupId });\n\t}\n\t\n\tprotected RoleCollection loadRoles(int[] groupIds)\n\t{\n\t\tString sql = SystemGlobals.getSql(\"PermissionControl.loadGroupRoles\");\n\t\tString groupIdAsString = SecurityCommon.groupIdAsString(groupIds);\n\t\t\n\t\tif (\"\".equals(groupIdAsString)) {\n\t\t\t// We suppose there is no \"negative\" group ids\n\t\t\tsql = sql.replaceAll(\"#IN#\", \"-1\");\n\t\t}\n\t\telse {\n\t\t\tsql = sql.replaceAll(\"#IN#\", groupIdAsString);\n\t\t}\n\t\t\n\t\tRoleCollection roles = new RoleCollection();\n\t\t\n\t\tPreparedStatement p = null;\n\t\tResultSet rs = null;\n\t\t\n\t\ttry {\n\t\t\tp = JForumExecutionContext.getConnection().prepareStatement(sql);\n\t\t\trs = p.executeQuery();\n\t\t\t\n\t\t\troles = SecurityCommon.loadRoles(rs);\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tthrow new DatabaseException(e);\n\t\t}\n\t\tfinally {\n\t\t\tDbUtils.close(rs, p);\n\t\t}\n\t\t\n\t\treturn roles;\n\t}\n\n\t/**\n\t * @see net.jforum.dao.GroupSecurityDAO#addRoleValue(int, net.jforum.security.Role, net.jforum.security.RoleValueCollection)\n\t */\n\tpublic void addRoleValue(int groupId, Role role, RoleValueCollection rvc)\n\t{\n\t\tPreparedStatement p = null;\n\t\tResultSet rs = null;\n\t\t\n\t\ttry {\n\t\t\tp = JForumExecutionContext.getConnection().prepareStatement(\n\t\t\t\t\tSystemGlobals.getSql(\"PermissionControl.getRoleIdByName\"));\n\t\t\tp.setString(1, role.getName());\n\t\t\tp.setInt(2, groupId);\n\n\t\t\tint roleId = -1;\n\n\t\t\trs = p.executeQuery();\n\t\t\tif (rs.next()) {\n\t\t\t\troleId = rs.getInt(\"role_id\");\n\t\t\t}\n\n\t\t\trs.close();\n\t\t\trs = null;\n\t\t\tp.close();\n\t\t\tp = null;\n\n\t\t\tif (roleId == -1) {\n\t\t\t\tthis.addRole(groupId, role, rvc);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tp = JForumExecutionContext.getConnection().prepareStatement(\n\t\t\t\t\t\tSystemGlobals.getSql(\"PermissionControl.addRoleValues\"));\n\t\t\t\tp.setInt(1, roleId);\n\n\t\t\t\tfor (Iterator iter = rvc.iterator(); iter.hasNext();) {\n\t\t\t\t\tRoleValue rv = (RoleValue) iter.next();\n\t\t\t\t\tp.setString(2, rv.getValue());\n\t\t\t\t\tp.executeUpdate();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcatch (SQLException e) {\n\t\t\tthrow new DatabaseException(e);\n\t\t}\n\t\tfinally {\n\t\t\tDbUtils.close(rs, p);\n\t\t}\n\t}\n\n\t/**\n\t * @see net.jforum.dao.GroupSecurityDAO#loadRolesByUserGroups(net.jforum.entities.User)\n\t */\n\tpublic RoleCollection loadRolesByUserGroups(User user)\n\t{\n\t\tList groups = user.getGroupsList();\n\n\t\t// When the user is associated to more than one group, we\n\t\t// should check the merged roles\n\t\tint[] groupIds = this.getSortedGroupIds(groups);\n\n\t\tRoleCollection groupRoles = RolesRepository.getGroupRoles(groupIds);\n\n\t\t// Not cached yet? then do it now\n\t\tif (groupRoles == null) {\n\t\t\tgroupRoles = this.loadRoles(groupIds);\n\t\t\tRolesRepository.addGroupRoles(groupIds, groupRoles);\n\t\t}\n\n\t\treturn groupRoles;\n\t}\n\n\tprivate int[] getSortedGroupIds(List groups)\n\t{\n\t\tint[] groupsIds = new int[groups.size()];\n\t\tint i = 0;\n\n\t\tfor (Iterator iter = groups.iterator(); iter.hasNext();) {\n\t\t\tgroupsIds[i++] = ((Group)iter.next()).getId();\n\t\t}\n\n\t\tArrays.sort(groupsIds);\n\n\t\treturn groupsIds;\n\t}\n}",
  "metadata": {
    "fileId": "GenericGroupSecurityDAO_java_chunk_1",
    "fileName": "GenericGroupSecurityDAO.java",
    "filePath": "src/net/jforum/dao/generic/security/GenericGroupSecurityDAO.java"
  }
}