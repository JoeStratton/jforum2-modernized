{
  "pageContent": "File Path: src/net/jforum/search/LuceneIndexer.java\n\n Original Content: /*\n * Copyright (c) JForum Team\n * All rights reserved.\n * \n * Redistribution and use in source and binary forms, \n * with or without modification, are permitted provided \n * that the following conditions are met:\n * \n * 1) Redistributions of source code must retain the above \n * copyright notice, this list of conditions and the \n * following  disclaimer.\n * 2)  Redistributions in binary form must reproduce the \n * above copyright notice, this list of conditions and \n * the following disclaimer in the documentation and/or \n * other materials provided with the distribution.\n * 3) Neither the name of \"Rafael Steil\" nor \n * the names of its contributors may be used to endorse \n * or promote products derived from this software without \n * specific prior written permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT \n * HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY \n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, \n * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF \n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR \n * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL \n * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE \n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, \n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES \n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF \n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, \n * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER \n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER \n * IN CONTRACT, STRICT LIABILITY, OR TORT \n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN \n * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF \n * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE\n * \n * Created on 18/07/2007 17:18:41\n * \n * The JForum Project\n * http://www.jforum.net\n */\npackage net.jforum.search;\n\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.Iterator;\nimport java.util.List;\n\nimport net.jforum.entities.Post;\nimport net.jforum.exceptions.SearchException;\nimport net.jforum.util.preferences.ConfigKeys;\nimport net.jforum.util.preferences.SystemGlobals;\n\nimport org.apache.log4j.Logger;\nimport org.apache.lucene.document.Document;\nimport org.apache.lucene.document.Field;\nimport org.apache.lucene.document.Field.Index;\nimport org.apache.lucene.document.Field.Store;\nimport org.apache.lucene.index.IndexReader;\nimport org.apache.lucene.index.IndexWriter;\nimport org.apache.lucene.index.Term;\nimport org.apache.lucene.store.Directory;\nimport org.apache.lucene.store.RAMDirectory;\n\n/**\n * @author Rafael Steil\n * @version $Id: LuceneIndexer.java,v 1.11 2007/09/01 05:46:53 rafaelsteil Exp $\n */\npublic class LuceneIndexer\n{\n\tprivate static final Logger logger = Logger.getLogger(LuceneIndexer.class);\n\tprivate static final Object MUTEX = new Object();\n\t\n\tprivate LuceneSettings settings;\n\tprivate Directory ramDirectory;\n\tprivate IndexWriter ramWriter;\n\tprivate int ramNumDocs;\n\tprivate List newDocumentAddedList = new ArrayList();\n\t\n\tpublic LuceneIndexer(LuceneSettings settings)\n\t{\n\t\tthis.settings = settings;\n\t\tthis.createRAMWriter();\n\t}\n\t\n\tpublic void watchNewDocuDocumentAdded(NewDocumentAdded newDoc)\n\t{\n\t\tthis.newDocumentAddedList.add(newDoc);\n\t}\n\t\n\tpublic void batchCreate(Post post)\n\t{\n\t\tsynchronized (MUTEX) {\n\t\t\ttry {\n\t\t\t\tDocument document = this.createDocument(post);\n\t\t\t\tthis.ramWriter.addDocument(document);\n\t\t\t\tthis.flushRAMDirectoryIfNecessary();\n\t\t\t}\n\t\t\tcatch (IOException e) {\n\t\t\t\tthrow new SearchException(e);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate void createRAMWriter()\n\t{\n\t\ttry {\n\t\t\tif (this.ramWriter != null) {\n\t\t\t\tthis.ramWriter.close();\n\t\t\t}\n\t\t\t\n\t\t\tthis.ramDirectory = new RAMDirectory();\n\t\t\tthis.ramWriter = new IndexWriter(this.ramDirectory, this.settings.analyzer(), true);\n\t\t\tthis.ramNumDocs = SystemGlobals.getIntValue(ConfigKeys.LUCENE_INDEXER_RAM_NUMDOCS);\n\t\t}\n\t\tcatch (IOException e) {\n\t\t\tthrow new SearchException(e);\n\t\t}\n\t}\n\t\n\tprivate void flushRAMDirectoryIfNecessary()\n\t{\n\t\tif (this.ramWriter.docCount() >= this.ramNumDocs) {\n\t\t\tthis.flushRAMDirectory();\n\t\t}\n\t}\n\t\n\tpublic void flushRAMDirectory()\n\t{\n\t\tsynchronized (MUTEX) {\n\t\t\tIndexWriter writer = null;\n\t\t\t\n\t\t\ttry {\n\t\t\t\twriter = new IndexWriter(this.settings.directory(), this.settings.analyzer());\n\t\t\t\twriter.addIndexes(new Directory[] { this.ramDirectory });\n\t\t\t\twriter.optimize();\n\n\t\t\t\tthis.createRAMWriter();\n\t\t\t}\n\t\t\tcatch (IOException e) {\n\t\t\t\tthrow new SearchException(e);\n\t\t\t}\n\t\t\tfinally {\n\t\t\t\tif (writer != null) {\n\t\t\t\t\ttry { \n\t\t\t\t\t\twriter.flush(); \n\t\t\t\t\t\twriter.close();\n\t\t\t\t\t\t\n\t\t\t\t\t\tthis.notifyNewDocumentAdded();\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tpublic void create(Post post)\n\t{\n\t\tsynchronized (MUTEX) {\n\t\t\tIndexWriter writer = null;\n\t\t\t\n\t\t\ttry {\n\t\t\t\twriter = new IndexWriter(this.settings.directory(), this.settings.analyzer());\n\t\t\t\t\n\t\t\t\tDocument document = this.createDocument(post);\n\t\t\t\twriter.addDocument(document);\n\t\t\t\t\n\t\t\t\tthis.optimize(writer);\n\t\t\t\t\n\t\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\t\tlogger.debug(\"Indexed \" + document);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\tlogger.error(e.toString(), e);\n\t\t\t}\n\t\t\tfinally {\n\t\t\t\tif (writer != null) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\twriter.flush();\n\t\t\t\t\t\twriter.close();\n\t\t\t\t\t\t\n\t\t\t\t\t\tthis.notifyNewDocumentAdded();\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tpublic void update(Post post)\n\t{\n\t\tif (this.performDelete(post)) {\n\t\t\tthis.create(post);\n\t\t}\n\t}\n\t\n\tprivate void optimize(IndexWriter writer) throws Exception\n\t{\n\t\tif (writer.docCount() % 100 == 0) {\n\t\t\tif (logger.isInfoEnabled()) {\n\t\t\t\tlogger.info(\"Optimizing indexes. Current number of documents is \" + writer.docCount());\n\t\t\t}\n\t\t\t\n\t\t\twriter.optimize();\n\t\t\t\n\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\tlogger.debug(\"Indexes optimized\");\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate Document createDocument(Post p)\n\t{\n\t\tDocument d = new Document();\n\t\t\n\t\td.add(new Field(SearchFields.Keyword.POST_ID, String.valueOf(p.getId()), Store.YES, Index.UN_TOKENIZED));\n\t\td.add(new Field(SearchFields.Keyword.FORUM_ID, String.valueOf(p.getForumId()), Store.YES, Index.UN_TOKENIZED));\n\t\td.add(new Field(SearchFields.Keyword.TOPIC_ID, String.valueOf(p.getTopicId()), Store.YES, Index.UN_TOKENIZED));\n\t\td.add(new Field(SearchFields.Keyword.USER_ID, String.valueOf(p.getUserId()), Store.YES, Index.UN_TOKENIZED));\n\t\td.add(new Field(SearchFields.Keyword.DATE, this.settings.formatDateTime(p.getTime()), Store.YES, Index.UN_TOKENIZED));\n\t\t\n\t\t// We add the subject and message text together because, when searching, we only care about the \n\t\t// matches, not where it was performed. The real subject and contents will be fetched from the database\n\t\td.add(new Field(SearchFields.Indexed.CONTENTS, p.getSubject() + \" \" + p.getText(), Store.NO, Index.TOKENIZED));\n\t\t\n\t\treturn d;\n\t}\n\t\n\tprivate void notifyNewDocumentAdded()\n\t{\n\t\tfor (Iterator iter = this.newDocumentAddedList.iterator(); iter.hasNext(); ) {\n\t\t\t((NewDocumentAdded)iter.next()).newDocumentAdded();\n\t\t}\n\t}\n\n\tpublic void delete(Post p)\n\t{\n\t\tthis.performDelete(p);\n\t}\n\t\n\tprivate boolean performDelete(Post p)\n\t{\n\t\tsynchronized (MUTEX) {\n\t\t\tIndexReader reader = null;\n\t\t\tboolean status = false;\n\t\t\t\n\t\t\ttry {\n\t\t\t\treader = IndexReader.open(this.settings.directory());\n\t\t\t\treader.deleteDocuments(new Term(SearchFields.Keyword.POST_ID, String.valueOf(p.getId())));\n\t\t\t\tstatus = true;\n\t\t\t}\n\t\t\tcatch (IOException e) {\n\t\t\t\tlogger.error(e.toString(), e);\n\t\t\t}\n\t\t\tfinally {\n\t\t\t\tif (reader != null) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\treader.close();\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\treturn status;\n\t\t}\n\t}\n}",
  "metadata": {
    "fileId": "LuceneIndexer_java_chunk_1",
    "fileName": "LuceneIndexer.java",
    "filePath": "src/net/jforum/search/LuceneIndexer.java"
  }
}