{
  "pageContent": "File Path: src/net/jforum/search/LuceneReindexer.java\n\n Original Content: /*\n * Copyright (c) JForum Team\n * All rights reserved.\n * \n * Redistribution and use in source and binary forms, \n * with or without modification, are permitted provided \n * that the following conditions are met:\n * \n * 1) Redistributions of source code must retain the above \n * copyright notice, this list of conditions and the \n * following  disclaimer.\n * 2)  Redistributions in binary form must reproduce the \n * above copyright notice, this list of conditions and \n * the following disclaimer in the documentation and/or \n * other materials provided with the distribution.\n * 3) Neither the name of \"Rafael Steil\" nor \n * the names of its contributors may be used to endorse \n * or promote products derived from this software without \n * specific prior written permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT \n * HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY \n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, \n * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF \n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR \n * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL \n * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE \n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, \n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES \n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF \n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, \n * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER \n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER \n * IN CONTRACT, STRICT LIABILITY, OR TORT \n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN \n * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF \n * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE\n * \n * Created on 06/08/2007 15:20:23\n * \n * The JForum Project\n * http://www.jforum.net\n */\npackage net.jforum.search;\n\nimport java.io.IOException;\nimport java.util.Iterator;\nimport java.util.List;\n\nimport net.jforum.JForumExecutionContext;\nimport net.jforum.dao.DataAccessDriver;\nimport net.jforum.dao.LuceneDAO;\nimport net.jforum.entities.Post;\nimport net.jforum.exceptions.ForumException;\nimport net.jforum.util.preferences.ConfigKeys;\nimport net.jforum.util.preferences.SystemGlobals;\n\nimport org.apache.lucene.search.IndexSearcher;\n\n/**\n * @author Rafael Steil\n * @version $Id: LuceneReindexer.java,v 1.6 2007/10/17 04:36:13 rafaelsteil Exp $\n */\npublic class LuceneReindexer\n{\n\tprivate LuceneSettings settings;\n\tprivate LuceneReindexArgs args;\n\tprivate boolean recreate;\n\t\n\tpublic LuceneReindexer(LuceneSettings settings, LuceneReindexArgs args, boolean recreate)\n\t{\n\t\tthis.args = args;\n\t\tthis.recreate = recreate;\n\t\tthis.settings = settings;\n\t}\n\t\n\tpublic void startProcess()\n\t{\n\t\tthis.reindex();\n\t}\n\t\n\tpublic void startBackgroundProcess()\n\t{\n\t\tRunnable indexingJob = new Runnable() {\t\t\n\t\t\tpublic void run() {\n\t\t\t\treindex();\n\t\t\t}\n\t\t};\n\t\t\n\t\tSystemGlobals.setValue(ConfigKeys.LUCENE_CURRENTLY_INDEXING, \"1\");\n\t\t\n\t\tThread thread = new Thread(indexingJob);\n\t\tthread.start();\n\t}\n\n\tprivate void reindex()\n\t{\n\t\ttry {\n\t\t\tif (recreate) {\n\t\t\t\tthis.settings.createIndexDirectory(SystemGlobals.getValue(ConfigKeys.LUCENE_INDEX_WRITE_PATH));\n\t\t\t}\n\t\t}\n\t\tcatch (IOException e) {\n\t\t\tthrow new ForumException(e);\n\t\t}\n\t\t\n\t\tLuceneDAO dao = DataAccessDriver.getInstance().newLuceneDAO();\n\t\t\n\t\tIndexSearcher searcher = null;\n\t\tLuceneSearch luceneSearch = ((LuceneManager)SearchFacade.manager()).luceneSearch();\n\t\tLuceneIndexer luceneIndexer = ((LuceneManager)SearchFacade.manager()).luceneIndexer();\n\t\t\n\t\tint fetchCount = SystemGlobals.getIntValue(ConfigKeys.LUCENE_INDEXER_DB_FETCH_COUNT);\n\t\t\n\t\ttry {\n\t\t\tif (!recreate) {\n\t\t\t\tsearcher = new IndexSearcher(this.settings.directory());\n\t\t\t}\n\t\t\t\n\t\t\tboolean hasMorePosts = true;\n\t\t\tlong processStart = System.currentTimeMillis();\n\t\t\t\n\t\t\tint firstPostId = args.filterByMessage()\n\t\t\t\t? args.getFirstPostId()\n\t\t\t\t: dao.firstPostIdByDate(args.getFromDate());\n\t\t\t\t\n\t\t\tif (args.filterByMessage()) {\n\t\t\t\tint dbFirstPostId = dao.firstPostId();\n\t\t\t\t\n\t\t\t\tif (firstPostId < dbFirstPostId) {\n\t\t\t\t\tfirstPostId = dbFirstPostId;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\t\n\t\t\tint lastPostId = args.filterByMessage()\n\t\t\t\t? args.getLastPostId()\n\t\t\t\t: dao.lastPostIdByDate(args.getToDate());\n\t\t\t\t\n\t\t\tint counter = 1;\n\t\t\tint indexTotal = 0;\n\t\t\tlong indexRangeStart = System.currentTimeMillis();\n\t\t\t\n\t\t\twhile (hasMorePosts) {\n\t\t\t\tboolean contextFinished = false;\n\t\t\t\t\n\t\t\t\tint toPostId = firstPostId + fetchCount < lastPostId\n\t\t\t\t\t? firstPostId + fetchCount\n\t\t\t\t\t: lastPostId;\n\t\t\t\t\n\t\t\t\ttry {\n\t\t\t\t\tJForumExecutionContext ex = JForumExecutionContext.get();\n\t\t\t\t\tJForumExecutionContext.set(ex);\n\t\t\t\t\t\n\t\t\t\t\tList l = dao.getPostsToIndex(firstPostId, toPostId);\n\t\t\t\t\t\n\t\t\t\t\tif (counter >= 5000) {\n\t\t\t\t\t\tlong end = System.currentTimeMillis();\n\t\t\t\t\t\tSystem.out.println(\"Indexed ~5000 documents in \" \n\t\t\t\t\t\t\t+ (end - indexRangeStart) + \" ms (\" + indexTotal + \" so far)\");\n\t\t\t\t\t\tindexRangeStart = end;\n\t\t\t\t\t\tcounter = 0;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tJForumExecutionContext.finish();\n\t\t\t\t\tcontextFinished = true;\n\t\t\t\t\t\n\t\t\t\t\tfor (Iterator iter = l.iterator(); iter.hasNext(); ) {\n\t\t\t\t\t\tif (\"0\".equals(SystemGlobals.getValue(ConfigKeys.LUCENE_CURRENTLY_INDEXING))) {\n\t\t\t\t\t\t\thasMorePosts = false;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tPost post = (Post)iter.next();\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (!recreate && args.avoidDuplicatedRecords()) {\n\t\t\t\t\t\t\tif (luceneSearch.findDocumentByPostId(post.getId()) != null) {\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tluceneIndexer.batchCreate(post);\n\t\t\t\t\t\t\n\t\t\t\t\t\tcounter++;\n\t\t\t\t\t\tindexTotal++;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tfirstPostId += fetchCount;\n\t\t\t\t\thasMorePosts = hasMorePosts && l.size() > 0;\n\t\t\t\t}\n\t\t\t\tfinally {\n\t\t\t\t\tif (!contextFinished) {\n\t\t\t\t\t\tJForumExecutionContext.finish();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tlong end = System.currentTimeMillis();\n\t\t\t\n\t\t\tSystem.out.println(\"**** Total: \" + (end - processStart) + \" ms\");\n\t\t}\n\t\tcatch (IOException e) {\n\t\t\tthrow new ForumException(e);\n\t\t}\n\t\tfinally {\n\t\t\tSystemGlobals.setValue(ConfigKeys.LUCENE_CURRENTLY_INDEXING, \"0\");\n\n\t\t\tluceneIndexer.flushRAMDirectory();\n\t\t\t\n\t\t\tif (searcher != null) {\n\t\t\t\ttry { searcher.close(); }\n\t\t\t\tcatch (Exception e) {}\n\t\t\t}\n\t\t}\n\t}\n}",
  "metadata": {
    "fileId": "LuceneReindexer_java_chunk_1",
    "fileName": "LuceneReindexer.java",
    "filePath": "src/net/jforum/search/LuceneReindexer.java"
  }
}