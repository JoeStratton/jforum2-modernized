{
  "pageContent": "File Path: src/net/jforum/search/LuceneContentCollector.java\n\n Original Content: /*\n * Copyright (c) JForum Team\n * All rights reserved.\n * \n * Redistribution and use in source and binary forms, \n * with or without modification, are permitted provided \n * that the following conditions are met:\n * \n * 1) Redistributions of source code must retain the above \n * copyright notice, this list of conditions and the \n * following  disclaimer.\n * 2)  Redistributions in binary form must reproduce the \n * above copyright notice, this list of conditions and \n * the following disclaimer in the documentation and/or \n * other materials provided with the distribution.\n * 3) Neither the name of \"Rafael Steil\" nor \n * the names of its contributors may be used to endorse \n * or promote products derived from this software without \n * specific prior written permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT \n * HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY \n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, \n * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF \n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR \n * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL \n * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE \n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, \n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES \n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF \n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, \n * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER \n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER \n * IN CONTRACT, STRICT LIABILITY, OR TORT \n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN \n * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF \n * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE\n * \n * Created on 27/07/2007 15:10:51\n * \n * The JForum Project\n * http://www.jforum.net\n */\npackage net.jforum.search;\n\nimport java.io.IOException;\nimport java.io.StringReader;\nimport java.util.Iterator;\nimport java.util.List;\n\nimport net.jforum.dao.DataAccessDriver;\nimport net.jforum.entities.Post;\nimport net.jforum.exceptions.ForumException;\n\nimport org.apache.lucene.analysis.TokenStream;\nimport org.apache.lucene.document.Document;\nimport org.apache.lucene.search.Hits;\nimport org.apache.lucene.search.Query;\nimport org.apache.lucene.search.highlight.Highlighter;\nimport org.apache.lucene.search.highlight.QueryScorer;\nimport org.apache.lucene.search.highlight.Scorer;\n\n/**\n * @author Rafael Steil\n * @version $Id: LuceneContentCollector.java,v 1.8 2007/07/30 14:06:44 rafaelsteil Exp $\n */\npublic class LuceneContentCollector implements LuceneResultCollector\n{\n\tprivate LuceneSettings settings;\n\t\n\tpublic LuceneContentCollector(LuceneSettings settings)\n\t{\n\t\tthis.settings = settings;\n\t}\n\t\n\t/**\n\t * @see net.jforum.search.LuceneResultCollector#collect(SearchArgs, org.apache.lucene.search.Hits, org.apache.lucene.search.Query)\n\t */\n\tpublic List collect(SearchArgs args, Hits hits, Query query)\n\t{\n\t\ttry {\n\t\t\tint[] postIds = new int[Math.min(args.fetchCount(), hits.length())];\n\t\t\t\n\t\t\tfor (int docIndex = args.startFrom(), i = 0; \n\t\t\t\tdocIndex < args.startFrom() + args.fetchCount() && docIndex < hits.length(); \n\t\t\t\tdocIndex++, i++) {\n\t\t\t\tDocument doc = hits.doc(docIndex);\n\t\t\t\tpostIds[i] = Integer.parseInt(doc.get(SearchFields.Keyword.POST_ID));\n\t\t\t}\n\t\t\t\n\t\t\treturn this.retrieveRealPosts(postIds, query);\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tthrow new ForumException(e.toString(), e);\n\t\t}\n\t}\n\n\tprivate List retrieveRealPosts(int[] postIds, Query query) throws IOException\n\t{\n\t\tList posts = DataAccessDriver.getInstance().newLuceneDAO().getPostsData(postIds);\n\t\t\n\t\tfor (Iterator iter = posts.iterator(); iter.hasNext(); ) {\n\t\t\tPost post = (Post)iter.next();\n\t\t\t\n\t\t\tScorer scorer = new QueryScorer(query);\n\t\t\tHighlighter highlighter = new Highlighter(scorer);\n\t\t\t\n\t\t\tTokenStream tokenStream = this.settings.analyzer().tokenStream(\n\t\t\t\tSearchFields.Indexed.CONTENTS, new StringReader(post.getText()));\n\n\t\t\tString fragment = highlighter.getBestFragment(tokenStream, post.getText());\n\t\t\tpost.setText(fragment != null ? fragment : post.getText());\n\t\t}\n\t\t\n\t\treturn posts;\n\t}\n}",
  "metadata": {
    "fileId": "LuceneContentCollector_java_chunk_1",
    "fileName": "LuceneContentCollector.java",
    "filePath": "src/net/jforum/search/LuceneContentCollector.java"
  }
}