{
  "pageContent": "File Path: src/net/jforum/search/LuceneSearch.java\n\n Original Content: /*\n * Copyright (c) JForum Team\n * All rights reserved.\n * \n * Redistribution and use in source and binary forms, \n * with or without modification, are permitted provided \n * that the following conditions are met:\n * \n * 1) Redistributions of source code must retain the above \n * copyright notice, this list of conditions and the \n * following  disclaimer.\n * 2)  Redistributions in binary form must reproduce the \n * above copyright notice, this list of conditions and \n * the following disclaimer in the documentation and/or \n * other materials provided with the distribution.\n * 3) Neither the name of \"Rafael Steil\" nor \n * the names of its contributors may be used to endorse \n * or promote products derived from this software without \n * specific prior written permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT \n * HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY \n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, \n * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF \n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR \n * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL \n * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE \n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, \n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES \n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF \n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, \n * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER \n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER \n * IN CONTRACT, STRICT LIABILITY, OR TORT \n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN \n * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF \n * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE\n * \n * Created on 18/07/2007 22:05:37\n * \n * The JForum Project\n * http://www.jforum.net\n */\npackage net.jforum.search;\n\nimport java.io.IOException;\nimport java.io.StringReader;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport net.jforum.exceptions.SearchException;\n\nimport org.apache.log4j.Logger;\nimport org.apache.lucene.analysis.Token;\nimport org.apache.lucene.analysis.TokenStream;\nimport org.apache.lucene.analysis.standard.StandardAnalyzer;\nimport org.apache.lucene.document.Document;\nimport org.apache.lucene.index.Term;\nimport org.apache.lucene.queryParser.QueryParser;\nimport org.apache.lucene.search.Filter;\nimport org.apache.lucene.search.Hits;\nimport org.apache.lucene.search.IndexSearcher;\nimport org.apache.lucene.search.Query;\nimport org.apache.lucene.search.Sort;\nimport org.apache.lucene.search.TermQuery;\n\n/**\n * @author Rafael Steil\n * @version $Id: LuceneSearch.java,v 1.39 2007/10/17 04:36:34 rafaelsteil Exp $\n */\npublic class LuceneSearch implements NewDocumentAdded\n{\n\tprivate static final Logger logger = Logger.getLogger(LuceneSearch.class);\n\t\n\tprivate IndexSearcher search;\n\tprivate LuceneSettings settings;\n\tprivate LuceneResultCollector contentCollector;\n\t\n\tpublic LuceneSearch(LuceneSettings settings, \n\t\tLuceneResultCollector contentCollector)\n\t{\n\t\tthis.settings = settings;\n\t\tthis.contentCollector = contentCollector;\n\t\t\n\t\tthis.openSearch();\n\t}\n\t\n\t/**\n\t * @see net.jforum.search.NewDocumentAdded#newDocumentAdded()\n\t */\n\tpublic void newDocumentAdded()\n\t{\n\t\ttry {\n\t\t\tthis.search.close();\n\t\t\tthis.openSearch();\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tthrow new SearchException(e);\n\t\t}\n\t}\n\t\n\t/**\n\t * @see net.jforum.dao.SearchDAO#search(net.jforum.search.SearchArgs)\n\t */\n\tpublic SearchResult search(SearchArgs args)\n\t{\n\t\treturn this.performSearch(args, this.contentCollector, null);\n\t}\n\t\n\tpublic Document findDocumentByPostId(int postId)\n\t{\n\t\tDocument doc = null;\n\t\t\n\t\ttry {\n\t\t\tHits hit = this.search.search(new TermQuery(\n\t\t\t\tnew Term(SearchFields.Keyword.POST_ID, String.valueOf(postId))));\n\t\t\t\n\t\t\tif (hit.length() > 0) {\n\t\t\t\tdoc = hit.doc(0);\n\t\t\t}\n\t\t}\n\t\tcatch (IOException e) {\n\t\t\tthrow new SearchException(e);\n\t\t}\n\t\t\n\t\treturn doc;\n\t}\n\n\tprivate SearchResult performSearch(SearchArgs args, LuceneResultCollector resultCollector, Filter filter)\n\t{\n\t\tSearchResult result;\n\t\t\n\t\ttry {\n\t\t\tStringBuffer criteria = new StringBuffer(256);\n\t\t\t\n\t\t\tthis.filterByForum(args, criteria);\n\t\t\tthis.filterByKeywords(args, criteria);\n\t\t\tthis.filterByDateRange(args, criteria);\n\t\t\t\n\t\t\tQuery query = new QueryParser(\"\", new StandardAnalyzer()).parse(criteria.toString());\n\t\t\t\n\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\tlogger.debug(\"Generated query: \" + query);\n\t\t\t}\n\t\t\t\n\t\t\tHits hits = filter == null ? \n\t\t\t\tthis.search.search(query, this.getSorter(args))\n\t\t\t\t: this.search.search(query, filter, this.getSorter(args));\n\n\t\t\tif (hits != null && hits.length() > 0) {\n\t\t\t\tresult = new SearchResult(resultCollector.collect(args, hits, query), hits.length());\n\t\t\t}\n\t\t\telse {\n\t\t\t\tresult = new SearchResult(new ArrayList(), 0);\n\t\t\t}\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tthrow new SearchException(e);\n\t\t}\n\t\t\n\t\treturn result;\n\t}\n\t\n\tprivate Sort getSorter(SearchArgs args)\n\t{\n\t\tSort sort = Sort.RELEVANCE;\n\t\t\n\t\tif (\"time\".equals(args.getOrderBy())) {\n\t\t\tsort = new Sort(SearchFields.Keyword.POST_ID, \"DESC\".equals(args.getOrderDir()));\n\t\t}\n\n\t\treturn sort;\n\t}\n\t\n\tprivate void filterByDateRange(SearchArgs args, StringBuffer criteria)\n\t{\n\t\tif (args.getFromDate() != null) {\n\t\t\tcriteria.append('(')\n\t\t\t.append(SearchFields.Keyword.DATE)\n\t\t\t.append(\": [\")\n\t\t\t.append(this.settings.formatDateTime(args.getFromDate()))\n\t\t\t.append(\" TO \")\n\t\t\t.append(this.settings.formatDateTime(args.getToDate()))\n\t\t\t.append(']')\n\t\t\t.append(')');\n\t\t}\n\t}\n\t\n\tprivate void filterByKeywords(SearchArgs args, StringBuffer criteria)\n\t{\n\t\tString[] keywords = this.analyzeKeywords(args.rawKeywords());\n\t\t\n\t\tfor (int i = 0; i < keywords.length; i++) {\n\t\t\tif (args.shouldMatchAllKeywords()) {\n\t\t\t\tcriteria.append(\" +\");\n\t\t\t}\n\t\t\t\n\t\t\tcriteria.append('(')\n\t\t\t.append(SearchFields.Indexed.CONTENTS)\n\t\t\t.append(':')\n\t\t\t.append(QueryParser.escape(keywords[i]))\n\t\t\t.append(\") \");\n\t\t}\n\t}\n\n\tprivate void filterByForum(SearchArgs args, StringBuffer criteria)\n\t{\n\t\tif (args.getForumId() > 0) {\n\t\t\tcriteria.append(\"+(\")\n\t\t\t\t.append(SearchFields.Keyword.FORUM_ID)\n\t\t\t\t.append(':')\n\t\t\t\t.append(args.getForumId())\n\t\t\t\t.append(\") \");\n\t\t}\n\t}\n\t\n\tprivate String[] analyzeKeywords(String contents)\n\t{\n\t\ttry {\n\t\t\tTokenStream stream = this.settings.analyzer().tokenStream(\"contents\", new StringReader(contents));\n\t\t\tList tokens = new ArrayList();\n\t\t\t\n\t\t\twhile (true) {\n\t\t\t\tToken token = stream.next();\n\t\t\t\t\n\t\t\t\tif (token == null) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\ttokens.add(token.termText());\n\t\t\t}\n\t\t\t\n\t\t\treturn (String[])tokens.toArray(new String[0]);\n\t\t}\n\t\tcatch (IOException e) {\n\t\t\tthrow new SearchException(e);\n\t\t}\n\t}\n\t\n\tprivate void openSearch()\n\t{\n\t\ttry {\n\t\t\tthis.search = new IndexSearcher(this.settings.directory());\n\t\t}\n\t\tcatch (IOException e) {\n\t\t\tthrow new SearchException(e.toString(), e);\n\t\t}\n\t}\n}",
  "metadata": {
    "fileId": "LuceneSearch_java_chunk_1",
    "fileName": "LuceneSearch.java",
    "filePath": "src/net/jforum/search/LuceneSearch.java"
  }
}