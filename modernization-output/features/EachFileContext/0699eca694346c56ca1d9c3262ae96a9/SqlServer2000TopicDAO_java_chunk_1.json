{
  "pageContent": "File Path: src/net/jforum/dao/sqlserver2000/SqlServer2000TopicDAO.java\n\n Original Content: /*\n * Copyright (c) JForum Team\n * All rights reserved.\n * \n * Redistribution and use in source and binary forms, \n * with or without modification, are permitted provided \n * that the following conditions are met:\n * \n * 1) Redistributions of source code must retain the above \n * copyright notice, this list of conditions and the \n * following  disclaimer.\n * 2)  Redistributions in binary form must reproduce the \n * above copyright notice, this list of conditions and \n * the following disclaimer in the documentation and/or \n * other materials provided with the distribution.\n * 3) Neither the name of \"Rafael Steil\" nor \n * the names of its contributors may be used to endorse \n * or promote products derived from this software without \n * specific prior written permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT \n * HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY \n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, \n * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF \n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR \n * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL \n * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE \n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, \n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES \n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF \n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, \n * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER \n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER \n * IN CONTRACT, STRICT LIABILITY, OR TORT \n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN \n * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF \n * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE\n * \n * Created on 24/05/2004 12:25:35\n * The JForum Project\n * http://www.jforum.net\n */\npackage net.jforum.dao.sqlserver2000;\n\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.text.SimpleDateFormat;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\n\nimport net.jforum.JForumExecutionContext;\nimport net.jforum.dao.generic.GenericTopicDAO;\nimport net.jforum.entities.Topic;\nimport net.jforum.entities.User;\nimport net.jforum.exceptions.DatabaseException;\nimport net.jforum.repository.ForumRepository;\nimport net.jforum.util.DbUtils;\nimport net.jforum.util.preferences.ConfigKeys;\nimport net.jforum.util.preferences.SystemGlobals;\n\n/**\n * @author Andre de Andrade da Silva - andre.de.andrade@gmail.com\n * @author Dirk Rasmussen - d.rasmussen@bevis.de (2006/11/27, modifs for MS SqlServer 2005)\n * @author Andowson Chang - andowson@gmail.com (2007/12/06, fix for MS SQL Server 2000)\n * @see WEB-INF\\config\\database\\sqlserver\\sqlserver.sql (2006/11/27, MS SqlServer 2005 specific version!)\n * @version $Id: SqlServer2000TopicDAO.java,v 1.2 2008/01/22 23:52:41 rafaelsteil Exp $\n */\npublic class SqlServer2000TopicDAO extends GenericTopicDAO\n{\n\t/**\n\t * @see net.jforum.dao.TopicDAO#selectAllByForumByLimit(int, int, int)\n\t */\n\tpublic List selectAllByForumByLimit(int forumId, int startFrom, int count)\n\t{\n\t\tString sql = SystemGlobals.getSql(\"TopicModel.selectAllByForumByLimit\");\n\t\t\n\t\tPreparedStatement p = null;\n\n\t\ttry {\n\t\t\tp = JForumExecutionContext.getConnection().prepareStatement(sql,\n\t\t\t\t\tResultSet.TYPE_SCROLL_INSENSITIVE,\n\t\t\t\t\tResultSet.CONCUR_READ_ONLY);\n\t\t\tp.setInt(1, startFrom + count);\n\t\t\tp.setInt(2, forumId);\n\t\t\tp.setInt(3, forumId);\n\n\t\t\treturn this.fillTopicsDataByLimit(p, startFrom);\n\t\t}\n\t\tcatch (SQLException e) {\n\t\t\tthrow new DatabaseException(e);\n\t\t}\n\t\tfinally {\n\t\t\tDbUtils.close(p);\n\t\t}\n\t}\n\n\t/**\n\t * @see net.jforum.dao.TopicDAO#selectByUserByLimit(int, int, int)\n\t */\n\tpublic List selectByUserByLimit(int userId, int startFrom, int count)\n\t{\n\t\tString sql = SystemGlobals.getSql(\"TopicModel.selectByUserByLimit\");\n        \n\t\tPreparedStatement p = null;\n\t\ttry {\n\t\t\tp = JForumExecutionContext.getConnection().prepareStatement(\n\t\t\t\t\tsql.replaceAll(\":fids:\",\n\t\t\t\t\t\t\tForumRepository.getListAllowedForums()), \n\t\t\t\t\t\t\tResultSet.TYPE_SCROLL_INSENSITIVE,\n\t\t\t\t\t\t\tResultSet.CONCUR_READ_ONLY);\n\n\t\t\tp.setInt(1, startFrom + count);\n\t\t\tp.setInt(2, userId);\n\n\t\t\tList list = this.fillTopicsDataByLimit(p, startFrom);\n\t\t\tp = null;\n\t\t\treturn list;\n\t\t}\n\t\tcatch (SQLException e) {\n\t\t\tthrow new DatabaseException(e);\n\t\t}\n\t\tfinally {\n\t\t\tDbUtils.close(p);\n\t\t}\n\t}\n\t\n\t/**\n\t\t * Fills all topic data. The method will try to get all fields from the\n\t\t * topics table, as well information about the user who made the first\n\t\t * and the last post in the topic. <br>\n\t\t * <b>The method <i>will</i> close the <i>PreparedStatement</i></b>\n\t\t * \n\t\t * @param p\n\t\t *            the PreparedStatement to execute\n\t\t * @return A list with all topics found\n\t\t * @throws SQLException\n\t\t */\n\tprivate List fillTopicsDataByLimit(PreparedStatement p, int startFrom) {\n\t\tList l = new ArrayList();\n\n\t\tResultSet rs = null;\n\t\ttry {\n\t\t\trs = p.executeQuery();\n\t\t\trs.absolute(startFrom);\n\n\t\t\tSimpleDateFormat df = new SimpleDateFormat(SystemGlobals\n\t\t\t\t\t.getValue(ConfigKeys.DATE_TIME_FORMAT));\n\n\t\t\tStringBuffer sbFirst = new StringBuffer(128);\n\t\t\tStringBuffer sbLast = new StringBuffer(128);\n\n\t\t\twhile (rs.next()) {\n\t\t\t\tTopic t = this.getBaseTopicData(rs);\n\n\t\t\t\t// Posted by\n\t\t\t\tUser u = new User();\n\t\t\t\tu.setId(rs.getInt(\"user_id\"));\n\t\t\t\tt.setPostedBy(u);\n\n\t\t\t\t// Last post by\n\t\t\t\tu = new User();\n\t\t\t\tu.setId(rs.getInt(\"last_user_id\"));\n\t\t\t\tt.setLastPostBy(u);\n\n\t\t\t\tt.setHasAttach(rs.getInt(\"attach\") > 0);\n\t\t\t\tt.setFirstPostTime(df.format(rs.getTimestamp(\"topic_time\")));\n\t\t\t\tt.setLastPostTime(df.format(rs.getTimestamp(\"post_time\")));\n\t\t\t\tt.setLastPostDate(new Date(rs.getTimestamp(\"post_time\")\n\t\t\t\t\t\t.getTime()));\n\n\t\t\t\tl.add(t);\n\n\t\t\t\tsbFirst.append(rs.getInt(\"user_id\")).append(',');\n\t\t\t\tsbLast.append(rs.getInt(\"last_user_id\")).append(',');\n\t\t\t}\n\n\t\t\trs.close();\n\t\t\trs = null;\n\t\t\tp.close();\n\t\t\tp = null;\n\n\t\t\t// Users\n\t\t\tif (sbFirst.length() > 0) {\n\t\t\t\tsbLast.delete(sbLast.length() - 1, sbLast.length());\n\n\t\t\t\tString sql = SystemGlobals\n\t\t\t\t\t\t.getSql(\"TopicModel.getUserInformation\");\n\t\t\t\tsql = sql.replaceAll(\"#ID#\", sbFirst.toString()\n\t\t\t\t\t\t+ sbLast.toString());\n\n\t\t\t\tMap users = new HashMap();\n\n\t\t\t\tp = JForumExecutionContext.getConnection()\n\t\t\t\t\t\t.prepareStatement(sql);\n\t\t\t\trs = p.executeQuery();\n\n\t\t\t\twhile (rs.next()) {\n\t\t\t\t\tusers.put(new Integer(rs.getInt(\"user_id\")), rs\n\t\t\t\t\t\t\t.getString(\"username\"));\n\t\t\t\t}\n\n\t\t\t\trs.close();\n\t\t\t\trs = null;\n\t\t\t\tp.close();\n\t\t\t\tp = null;\n\n\t\t\t\tfor (Iterator iter = l.iterator(); iter.hasNext();) {\n\t\t\t\t\tTopic t = (Topic) iter.next();\n\t\t\t\t\tt.getPostedBy().setUsername(\n\t\t\t\t\t\t\t(String) users.get(new Integer(t.getPostedBy()\n\t\t\t\t\t\t\t\t\t.getId())));\n\t\t\t\t\tt.getLastPostBy().setUsername(\n\t\t\t\t\t\t\t(String) users.get(new Integer(t.getLastPostBy()\n\t\t\t\t\t\t\t\t\t.getId())));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn l;\n\t\t} catch (SQLException e) {\n\t\t\tthrow new DatabaseException(e);\n\t\t} finally {\n\t\t\tDbUtils.close(rs, p);\n\t\t}\n\t}\n\n\t/**\n\t * @see net.jforum.dao.TopicDAO#selectRecentTopics(int)\n\t */\n\tpublic List selectRecentTopics(int limit)\n\t{\n\t\tString sql = SystemGlobals.getSql(\"TopicModel.selectRecentTopicsByLimit\");\n\t\t\n\t\tPreparedStatement p = null;\n\t\ttry {\n\t\t\tp = JForumExecutionContext.getConnection().prepareStatement(sql);\n\t\t\tp.setInt(1, limit);\n\t\t\t\n\t\t\tList list = this.fillTopicsData(p);\n\t\t\treturn list;\n\t\t}\n\t\tcatch (SQLException e) {\n\t\t\tthrow new DatabaseException(e);\n\t\t}\n\t\tfinally {\n\t\t\tDbUtils.close(p);\n\t\t}\n\t}\n\t\n\t/**\n\t * @see net.jforum.dao.TopicDAO#selectHottestTopics(int)\n\t */\n\tpublic List selectHottestTopics(int limit)\n\t{\n\t\tString sql = SystemGlobals.getSql(\"TopicModel.selectHottestTopicsByLimit\");\n\t\t\n\t\tPreparedStatement p = null;\n\t    try {\n\t        p = JForumExecutionContext.getConnection().prepareStatement(sql);\n\t        p.setInt(1, limit);\n\t        \n\t        List list = this.fillTopicsData(p);\n\t        p = null;\n\t        return list;\n\t    }\n\t    catch (SQLException e) {\n\t        throw new DatabaseException(e);\n\t    }\n\t    finally {\n\t        DbUtils.close(p);\n\t    }    \n\t}\n}",
  "metadata": {
    "fileId": "SqlServer2000TopicDAO_java_chunk_1",
    "fileName": "SqlServer2000TopicDAO.java",
    "filePath": "src/net/jforum/dao/sqlserver2000/SqlServer2000TopicDAO.java"
  }
}