{
  "pageContent": "File Path: src/net/jforum/sso/SSOUtils.java\n\n Original Content: /*\n * Copyright (c) JForum Team\n * All rights reserved.\n * \n * Redistribution and use in source and binary forms, \n * with or without modification, are permitted provided \n * that the following conditions are met:\n * \n * 1) Redistributions of source code must retain the above \n * copyright notice, this list of conditions and the \n * following  disclaimer.\n * 2)  Redistributions in binary form must reproduce the \n * above copyright notice, this list of conditions and \n * the following disclaimer in the documentation and/or \n * other materials provided with the distribution.\n * 3) Neither the name of \"Rafael Steil\" nor \n * the names of its contributors may be used to endorse \n * or promote products derived from this software without \n * specific prior written permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT \n * HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY \n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, \n * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF \n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR \n * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL \n * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE \n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, \n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES \n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF \n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, \n * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER \n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER \n * IN CONTRACT, STRICT LIABILITY, OR TORT \n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN \n * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF \n * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE\n * \n * Created on Jun 2, 2005 6:56:25 PM\n * The JForum Project\n * http://www.jforum.net\n */\npackage net.jforum.sso;\n\nimport net.jforum.dao.DataAccessDriver;\nimport net.jforum.dao.UserDAO;\nimport net.jforum.entities.User;\n\n/**\n * General utilities to use with SSO.\n * \n * @author Rafael Steil\n * @version $Id: SSOUtils.java,v 1.6 2006/08/20 22:47:43 rafaelsteil Exp $\n */\npublic class SSOUtils\n{\n\tprivate String username;\n\tprivate boolean exists = true;\n\tprivate User user;\n\tprivate UserDAO dao;\n\t\n\t/**\n\t * Checks if an user exists in the database\n\t * \n\t * @param username The username to check\n\t * @return <code>true</code> if the user exists. If <code>false</code> is\n\t * returned, then you can insert the user by calling {@link #register(String, String)}\n\t * @see #register(String, String)\n\t * @see #getUser()\n\t */\n\tpublic boolean userExists(String username)\n\t{\n\t\tthis.username = username;\n\t\tthis.dao = DataAccessDriver.getInstance().newUserDAO();\n\n\t\tthis.user = this.dao.selectByName(username);\n\t\tthis.exists = this.user != null;\n\t\t\n\t\treturn this.exists;\n\t}\n\t\n\t/**\n\t * Registers a new user. \n\t * This method should be used together with {@link #userExists(String)}. \n\t * \n\t * @param password the user's password. It <em>should</em> be the real / final \n\t * password. In other words, the data passed as password is the data that'll be\n\t * written to the database\n\t * @param email the user's email\n\t * @see #getUser()\n\t */\n\tpublic void register(String password, String email)\n\t{\n\t\tif (this.exists) {\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t// Is a new user for us. Register him\n\t\tthis.user = new User();\n\t\tuser.setUsername(this.username);\n\t\tuser.setPassword(password);\n\t\tuser.setEmail(email);\n\t\tuser.setActive(1);\n\t\t\n\t\tthis.dao.addNew(user);\n\t}\n\t\n\t/**\n\t * Gets the user associated to this class instance.\n\t * \n\t * @return the user\n\t */\n\tpublic User getUser()\n\t{\n\t\treturn this.user;\n\t}\n}",
  "metadata": {
    "fileId": "SSOUtils_java_chunk_1",
    "fileName": "SSOUtils.java",
    "filePath": "src/net/jforum/sso/SSOUtils.java"
  }
}