{
  "pageContent": "File Path: src/net/jforum/sso/LDAPAuthenticator.java\n\n Original Content: /*\n * Copyright (c) JForum Team\n * All rights reserved.\n * \n * Redistribution and use in source and binary forms, \n * with or without modification, are permitted provided \n * that the following conditions are met:\n * \n * 1) Redistributions of source code must retain the above \n * copyright notice, this list of conditions and the \n * following  disclaimer.\n * 2)  Redistributions in binary form must reproduce the \n * above copyright notice, this list of conditions and \n * the following disclaimer in the documentation and/or \n * other materials provided with the distribution.\n * 3) Neither the name of \"Rafael Steil\" nor \n * the names of its contributors may be used to endorse \n * or promote products derived from this software without \n * specific prior written permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT \n * HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY \n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, \n * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF \n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR \n * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL \n * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE \n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, \n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES \n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF \n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, \n * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER \n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER \n * IN CONTRACT, STRICT LIABILITY, OR TORT \n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN \n * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF \n * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE\n * \n * Created on Jun 2, 2005 5:41:11 PM\n * The JForum Project\n * http://www.jforum.net\n */\npackage net.jforum.sso;\n\nimport java.util.Hashtable;\nimport java.util.Map;\n\nimport javax.naming.AuthenticationException;\nimport javax.naming.Context;\nimport javax.naming.NamingException;\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.InitialDirContext;\n\nimport net.jforum.dao.UserDAO;\nimport net.jforum.entities.User;\nimport net.jforum.util.preferences.ConfigKeys;\nimport net.jforum.util.preferences.SystemGlobals;\n\n/**\n * Authenticate users against a LDAP server. \n * \n * @author Rafael Steil\n * @version $Id: LDAPAuthenticator.java,v 1.8 2006/08/20 22:47:43 rafaelsteil Exp $\n */\npublic class LDAPAuthenticator implements LoginAuthenticator\n{\n\tprivate Hashtable prepareEnvironment()\n\t{\n\t\tHashtable h = new Hashtable();\n\t\t\n\t\th.put(Context.INITIAL_CONTEXT_FACTORY, SystemGlobals.getValue(ConfigKeys.LDAP_FACTORY));\n\t\th.put(Context.PROVIDER_URL, SystemGlobals.getValue(ConfigKeys.LDAP_SERVER_URL));\n\t\t\n\t\tString protocol = SystemGlobals.getValue(ConfigKeys.LDAP_SECURITY_PROTOCOL);\n\t\t\n\t\tif (protocol != null && !\"\".equals(protocol.trim())) {\n\t\t\th.put(Context.SECURITY_PROTOCOL, protocol);\n\t\t}\n\n\t\tString  authentication = SystemGlobals.getValue(ConfigKeys.LDAP_AUTHENTICATION);\n\n\t\tif (authentication != null && !\"\".equals(authentication.trim())) {\n\t\t\th.put(Context.SECURITY_AUTHENTICATION, authentication);\n\t\t}\n\t\t\n\t\treturn h;\n\t}\n\t\n\t/**\n\t * @see net.jforum.sso.LoginAuthenticator#validateLogin(java.lang.String, java.lang.String, java.util.Map)\n\t */\n\tpublic User validateLogin(String username, String password, Map extraParams)\n\t{\n\t\tHashtable environment = this.prepareEnvironment();\n\t\t\n\t\tStringBuffer principal = new StringBuffer(256)\n\t\t\t.append(SystemGlobals.getValue(ConfigKeys.LDAP_LOGIN_PREFIX))\n\t\t\t.append(username)\n\t\t\t.append(',')\n\t\t\t.append(SystemGlobals.getValue(ConfigKeys.LDAP_LOGIN_SUFFIX));\n\t\t\n\t\tenvironment.put(Context.SECURITY_PRINCIPAL, principal.toString());\n\t\tenvironment.put(Context.SECURITY_CREDENTIALS, password);\n\t\t\n\t\tDirContext dir = null;\n\t\t\n\t\ttry {\n\t\t\tdir = new InitialDirContext(environment);\n\t\t\t\n\t\t\tString lookupPrefix = SystemGlobals.getValue(ConfigKeys.LDAP_LOOKUP_PREFIX);\n\t\t\tString lookupSuffix = SystemGlobals.getValue(ConfigKeys.LDAP_LOOKUP_SUFFIX);\n\t\t\t\n\t\t\tif (lookupPrefix == null || lookupPrefix.length() == 0) {\n\t\t\t\tlookupPrefix = SystemGlobals.getValue(ConfigKeys.LDAP_LOGIN_PREFIX);\n\t\t\t}\n\t\t\t\n\t\t\tif (lookupSuffix == null || lookupSuffix .length() == 0) {\n\t\t\t\tlookupSuffix = SystemGlobals.getValue(ConfigKeys.LDAP_LOGIN_SUFFIX);\n\t\t\t}\n\n\t\t\tString lookupPrincipal = lookupPrefix + username + \",\" + lookupSuffix ;\n\n\t\t\tAttribute att = dir.getAttributes(lookupPrincipal ).get(SystemGlobals.getValue(ConfigKeys.LDAP_FIELD_EMAIL));\n\t\t\t\n\t\t\tSSOUtils utils = new SSOUtils();\n\t\t\t\n\t\t\tif (!utils.userExists(username)) {\n\t\t\t\tString email = att != null ? (String)att.get() : \"noemail\";\n\t\t\t\tutils.register(\"ldap\", email);\n\t\t\t}\n\t\t\t\n\t\t\treturn utils.getUser();\n\t\t}\n\t\tcatch (AuthenticationException e) {\n\t\t\treturn null;\n\t\t}\n        catch (NamingException e)\n        {\n            return null;\n        }\n        finally {\n\t\t\tif (dir != null) {\n                try\n                {\n                    dir.close();\n                }\n                catch (NamingException e)\n                {\n                    //close jndi context\n                }\n            }\n\t\t}\n\t}\n\n\t/**\n\t * @see net.jforum.sso.LoginAuthenticator#setUserModel(net.jforum.dao.UserDAO)\n\t */\n\tpublic void setUserModel(UserDAO dao) \n\t{\n\t}\n}",
  "metadata": {
    "fileId": "LDAPAuthenticator_java_chunk_1",
    "fileName": "LDAPAuthenticator.java",
    "filePath": "src/net/jforum/sso/LDAPAuthenticator.java"
  }
}