{
  "pageContent": "File Path: src/net/jforum/dao/generic/GenericModerationLogDAO.java\n\n Original Content: /*\n * Copyright (c) JForum Team\n * All rights reserved.\n * \n * Redistribution and use in source and binary forms, \n * with or without modification, are permitted provided \n * that the following conditions are met:\n * \n * 1) Redistributions of source code must retain the above \n * copyright notice, this list of conditions and the \n * following  disclaimer.\n * 2)  Redistributions in binary form must reproduce the \n * above copyright notice, this list of conditions and \n * the following disclaimer in the documentation and/or \n * other materials provided with the distribution.\n * 3) Neither the name of \"Rafael Steil\" nor \n * the names of its contributors may be used to endorse \n * or promote products derived from this software without \n * specific prior written permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT \n * HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY \n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, \n * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF \n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR \n * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL \n * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE \n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, \n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES \n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF \n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, \n * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER \n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER \n * IN CONTRACT, STRICT LIABILITY, OR TORT \n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN \n * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF \n * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE\n * \n * Created on 08/07/2007 11:29:41\n * The JForum Project\n * http://www.jforum.net\n */\npackage net.jforum.dao.generic;\n\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Timestamp;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.List;\n\nimport net.jforum.JForumExecutionContext;\nimport net.jforum.dao.ModerationLogDAO;\nimport net.jforum.entities.ModerationLog;\nimport net.jforum.entities.User;\nimport net.jforum.exceptions.DatabaseException;\nimport net.jforum.util.DbUtils;\nimport net.jforum.util.preferences.SystemGlobals;\n\npublic class GenericModerationLogDAO extends AutoKeys implements ModerationLogDAO\n{\n\tpublic void add(ModerationLog log)\n\t{\n\t\tPreparedStatement p = null;\n\t\t\n\t\ttry {\n\t\t\tp = this.getStatementForAutoKeys(\"ModerationLog.addNew\");\n\t\t\tp.setInt(1, log.getUser().getId());\n\t\t\tp.setString(2, log.getDescription());\n\t\t\tp.setString(3, log.getOriginalMessage());\n\t\t\tp.setTimestamp(4, new Timestamp(System.currentTimeMillis()));\n\t\t\tp.setInt(5, log.getType());\n\t\t\tp.setInt(6, log.getPostId());\n\t\t\tp.setInt(7, log.getTopicId());\n\t\t\tp.setInt(8, log.getPosterUser().getId());\n\n\t\t\tthis.setAutoGeneratedKeysQuery(SystemGlobals.getSql(\"ModerationLog.lastGeneratedModerationLogId\"));\n\t\t\t\n\t\t\tint logId = this.executeAutoKeysQuery(p);\n\t\t\t\n\t\t\tlog.setId(logId);\n\t\t}\n\t\tcatch (SQLException e) {\n\t\t\tthrow new DatabaseException(e);\n\t\t}\n\t\tfinally {\n\t\t\tDbUtils.close(p);\n\t\t}\n\t}\n\n\tpublic List selectAll(int start, int count)\n\t{\n\t\tList l = new ArrayList();\n\n\t\tString sql = SystemGlobals.getSql(\"ModerationLog.selectAll\");\n\n\t\tPreparedStatement p = null;\n\t\tResultSet rs = null;\n\t\t\n\t\ttry {\n\t\t\tp = JForumExecutionContext.getConnection().prepareStatement(sql);\n\t\t\tp.setInt(1, start);\n\t\t\tp.setInt(2, count);\n\n\t\t\trs = p.executeQuery();\n\n\t\t\twhile (rs.next()) {\n\t\t\t\tl.add(this.makeLog(rs));\n\t\t\t}\n\n\t\t\treturn l;\n\t\t}\n\t\tcatch (SQLException e) {\n\t\t\tthrow new DatabaseException(e);\n\t\t}\n\t\tfinally {\n\t\t\tDbUtils.close(rs, p);\n\t\t}\n\t}\n\t\n\tprotected ModerationLog makeLog(ResultSet rs) throws SQLException \n\t{\n\t\tModerationLog log = new ModerationLog();\n\t\t\n\t\tlog.setId(rs.getInt(\"log_id\"));\n\t\tlog.setDescription(this.readDesriptionFromResultSet(rs));\n\t\tlog.setOriginalMessage(this.readOriginalMessageFromResultSet(rs));\n\t\tlog.setType(rs.getInt(\"log_type\"));\n\t\tlog.setDate(new Date(rs.getTimestamp(\"log_date\").getTime()));\n\t\tlog.setPostId(rs.getInt(\"post_id\"));\n\t\tlog.setTopicId(rs.getInt(\"topic_id\"));\n\t\t\n\t\tUser user = new User();\n\t\tuser.setId(rs.getInt(\"user_id\"));\n\t\tuser.setUsername(rs.getString(\"username\"));\n\t\t\n\t\tlog.setUser(user);\n\t\t\n\t\tUser posterUser = new User();\n\t\tposterUser.setId(rs.getInt(\"post_user_id\"));\n\t\tposterUser.setUsername(rs.getString(\"poster_username\"));\n\t\t\n\t\tlog.setPosterUser(posterUser);\n\t\t\n\t\treturn log;\n\t}\n\t\n\tprotected String readDesriptionFromResultSet(ResultSet rs) throws SQLException\n\t{\n\t\treturn rs.getString(\"log_description\");\n\t}\n\t\n\tprotected String readOriginalMessageFromResultSet(ResultSet rs) throws SQLException\n\t{\n\t\treturn rs.getString(\"log_original_message\");\n\t}\n\t\n\tpublic int totalRecords()\n\t{\n\t\tint total = 0;\n\t\t\n\t\tPreparedStatement p = null;\n\t\tResultSet rs = null;\n\t\t\n\t\ttry {\n\t\t\tp = JForumExecutionContext.getConnection().prepareStatement(\n\t\t\t\tSystemGlobals.getSql(\"ModerationLog.totalRecords\"));\n\n\t\t\trs = p.executeQuery();\n\t\t\t\n\t\t\tif (rs.next()) {\n\t\t\t\ttotal = rs.getInt(1);\n\t\t\t}\n\t\t}\n\t\tcatch (SQLException e) {\n\t\t\tthrow new DatabaseException(e);\n\t\t}\n\t\tfinally {\n\t\t\tDbUtils.close(rs, p);\n\t\t}\n\t\t\n\t\treturn total;\n\t}\n}",
  "metadata": {
    "fileId": "GenericModerationLogDAO_java_chunk_1",
    "fileName": "GenericModerationLogDAO.java",
    "filePath": "src/net/jforum/dao/generic/GenericModerationLogDAO.java"
  }
}