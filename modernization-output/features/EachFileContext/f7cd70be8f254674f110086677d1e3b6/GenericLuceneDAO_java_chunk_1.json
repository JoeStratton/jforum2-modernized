{
  "pageContent": "File Path: src/net/jforum/dao/generic/GenericLuceneDAO.java\n\n Original Content: /*\n * Copyright (c) JForum Team\n * All rights reserved.\n * \n * Redistribution and use in source and binary forms, \n * with or without modification, are permitted provided \n * that the following conditions are met:\n * \n * 1) Redistributions of source code must retain the above \n * copyright notice, this list of conditions and the \n * following  disclaimer.\n * 2)  Redistributions in binary form must reproduce the \n * above copyright notice, this list of conditions and \n * the following disclaimer in the documentation and/or \n * other materials provided with the distribution.\n * 3) Neither the name of \"Rafael Steil\" nor \n * the names of its contributors may be used to endorse \n * or promote products derived from this software without \n * specific prior written permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT \n * HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY \n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, \n * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF \n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR \n * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL \n * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE \n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, \n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES \n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF \n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, \n * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER \n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER \n * IN CONTRACT, STRICT LIABILITY, OR TORT \n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN \n * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF \n * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE\n * \n * Created on 24/07/2007 10:27:23\n * \n * The JForum Project\n * http://www.jforum.net\n */\npackage net.jforum.dao.generic;\n\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Timestamp;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.List;\n\nimport net.jforum.JForumExecutionContext;\nimport net.jforum.dao.LuceneDAO;\nimport net.jforum.entities.Post;\nimport net.jforum.exceptions.DatabaseException;\nimport net.jforum.search.LuceneReindexArgs;\nimport net.jforum.search.SearchPost;\nimport net.jforum.util.DbUtils;\nimport net.jforum.util.preferences.SystemGlobals;\n\n/**\n * @author Rafael Steil\n * @version $Id: GenericLuceneDAO.java,v 1.13 2007/10/17 04:36:13 rafaelsteil Exp $\n */\npublic class GenericLuceneDAO implements LuceneDAO\n{\n\t/**\n\t * @see net.jforum.dao.LuceneDAO#firstPostId()\n\t */\n\tpublic int firstPostId() \n\t{\n\t\tint postId = 0;\n\t\t\n\t\tPreparedStatement p = null;\n\t\tResultSet rs = null;\n\t\t\n\t\ttry {\n\t\t\tp = JForumExecutionContext.getConnection().prepareStatement(\n\t\t\t\tSystemGlobals.getSql(\"SearchModel.getFirstPostId\"));\n\t\t\t\n\t\t\trs = p.executeQuery();\n\t\t\t\n\t\t\tif (rs.next()) {\n\t\t\t\tpostId = rs.getInt(1);\n\t\t\t}\n\t\t}\n\t\tcatch (SQLException e) {\n\t\t\tthrow new DatabaseException(e);\n\t\t}\n\t\tfinally {\n\t\t\tDbUtils.close(rs, p);\n\t\t}\n\t\t\n\t\treturn postId;\n\t}\n\t\n\t/**\n\t * @see net.jforum.dao.LuceneDAO#getPostsToIndex(LuceneReindexArgs, int, int)\n\t */\n\tpublic List getPostsToIndex(int fromPostId, int toPostId)\n\t{\n\t\tList l = new ArrayList();\n\t\t\n\t\tPreparedStatement p = null;\n\t\tResultSet rs = null;\n\t\t\n\t\ttry {\n\t\t\tp = JForumExecutionContext.getConnection().prepareStatement(\n\t\t\t\tSystemGlobals.getSql(\"SearchModel.getPostsToIndexForLucene\"));\n\t\t\t\n\t\t\tp.setInt(1, fromPostId);\n\t\t\tp.setInt(2, toPostId);\n\t\t\t\n\t\t\trs = p.executeQuery();\n\t\t\t\n\t\t\twhile (rs.next()) {\n\t\t\t\tl.add(this.makePost(rs));\n\t\t\t}\n\t\t}\n\t\tcatch (SQLException e) {\n\t\t\tthrow new DatabaseException(e);\n\t\t}\n\t\tfinally {\n\t\t\tDbUtils.close(rs, p);\n\t\t}\n\t\t\n\t\treturn l;\n\t}\n\t\n\t/**\n\t * @see net.jforum.dao.LuceneDAO#firstPostIdByDate(java.util.Date)\n\t */\n\tpublic int firstPostIdByDate(Date date) \n\t{\n\t\treturn this.getPostIdByDate(date, SystemGlobals.getSql(\"SearchModel.firstPostIdByDate\"));\n\t}\n\t\n\t/**\n\t * @see net.jforum.dao.LuceneDAO#lastPostIdByDate(java.util.Date)\n\t */\n\tpublic int lastPostIdByDate(Date date) \n\t{\n\t\treturn this.getPostIdByDate(date, SystemGlobals.getSql(\"SearchModel.lastPostIdByDate\"));\n\t}\n\t\n\tprivate int getPostIdByDate(Date date, String query)\n\t{\n\t\tint postId = 0;\n\t\t\n\t\tPreparedStatement p = null;\n\t\tResultSet rs = null;\n\t\t\n\t\ttry {\n\t\t\tp = JForumExecutionContext.getConnection().prepareStatement(query);\n\t\t\t\n\t\t\tp.setTimestamp(1, new Timestamp(date.getTime()));\n\t\t\t\n\t\t\trs = p.executeQuery();\n\t\t\t\n\t\t\tif (rs.next()) {\n\t\t\t\tpostId = rs.getInt(1);\n\t\t\t}\n\t\t}\n\t\tcatch (SQLException e) {\n\t\t\tthrow new DatabaseException(e);\n\t\t}\n\t\tfinally {\n\t\t\tDbUtils.close(rs, p);\n\t\t}\n\t\t\n\t\treturn postId;\n\t}\n\t\n\t/**\n\t * @see net.jforum.dao.LuceneDAO#getPostsData(int[])\n\t */\n\tpublic List getPostsData(int[] postIds)\n\t{\n\t\tif (postIds.length == 0) {\n\t\t\treturn new ArrayList();\n\t\t}\n\t\t\n\t\tList l = new ArrayList();\n\t\t\n\t\tPreparedStatement p = null;\n\t\tResultSet rs = null;\n\t\t\n\t\ttry {\n\t\t\tString sql = SystemGlobals.getSql(\"SearchModel.getPostsDataForLucene\");\n\t\t\tsql = sql.replaceAll(\":posts:\", this.buildInClause(postIds));\n\t\t\t\n\t\t\tp = JForumExecutionContext.getConnection().prepareStatement(sql);\n\t\t\trs = p.executeQuery();\n\t\t\t\n\t\t\twhile (rs.next()) {\n\t\t\t\tPost post = this.makePost(rs);\n\t\t\t\tpost.setPostUsername(rs.getString(\"username\"));\n\t\t\t\t\n\t\t\t\tl.add(post);\n\t\t\t}\n\t\t}\n\t\tcatch (SQLException e) {\n\t\t\tthrow new DatabaseException(e);\n\t\t}\n\t\tfinally {\n\t\t\tDbUtils.close(rs, p);\n\t\t}\n\t\t\n\t\treturn l;\n\t}\n\t\n\tprivate String buildInClause(int[] postIds)\n\t{\n\t\tStringBuffer sb = new StringBuffer(128);\n\t\t\n\t\tfor (int i = 0; i < postIds.length - 1; i++) {\n\t\t\tsb.append(postIds[i]).append(',');\n\t\t}\n\t\t\n\t\tsb.append(postIds[postIds.length - 1]);\n\t\t\n\t\treturn sb.toString();\n\t}\n\t\n\tprivate Post makePost(ResultSet rs) throws SQLException\n\t{\n\t\tPost p = new SearchPost();\n\t\t\n\t\tp.setId(rs.getInt(\"post_id\"));\n\t\tp.setForumId(rs.getInt(\"forum_id\"));\n\t\tp.setTopicId(rs.getInt(\"topic_id\"));\n\t\tp.setUserId(rs.getInt(\"user_id\"));\n\t\tp.setTime(new Date(rs.getTimestamp(\"post_time\").getTime()));\n\t\tp.setText(this.readPostTextFromResultSet(rs));\n\t\tp.setBbCodeEnabled(rs.getInt(\"enable_bbcode\") == 1);\n\t\tp.setSmiliesEnabled(rs.getInt(\"enable_smilies\") == 1);\n\t\t\n\t\tString subject = rs.getString(\"post_subject\");\n\t\t\n\t\tif (subject == null || subject.trim().length() == 0) {\n\t\t\tsubject = rs.getString(\"topic_title\");\n\t\t}\n\t\t\n\t\tp.setSubject(subject);\n\t\t\n\t\treturn p;\n\t}\n\t\n\tprotected String readPostTextFromResultSet(ResultSet rs) throws SQLException\n\t{\n\t\treturn rs.getString(\"post_text\");\n\t}\n}",
  "metadata": {
    "fileId": "GenericLuceneDAO_java_chunk_1",
    "fileName": "GenericLuceneDAO.java",
    "filePath": "src/net/jforum/dao/generic/GenericLuceneDAO.java"
  }
}