{
  "pageContent": "File Path: src/net/jforum/dao/generic/GenericPrivateMessageDAO.java\n\n Original Content: /*\n * Copyright (c) JForum Team\n * All rights reserved.\n * \n * Redistribution and use in source and binary forms, \n * with or without modification, are permitted provided \n * that the following conditions are met:\n * \n * 1) Redistributions of source code must retain the above \n * copyright notice, this list of conditions and the \n * following  disclaimer.\n * 2)  Redistributions in binary form must reproduce the \n * above copyright notice, this list of conditions and \n * the following disclaimer in the documentation and/or \n * other materials provided with the distribution.\n * 3) Neither the name of \"Rafael Steil\" nor \n * the names of its contributors may be used to endorse \n * or promote products derived from this software without \n * specific prior written permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT \n * HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY \n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, \n * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF \n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR \n * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL \n * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE \n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, \n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES \n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF \n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, \n * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER \n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER \n * IN CONTRACT, STRICT LIABILITY, OR TORT \n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN \n * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF \n * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE\n * \n * This file creation date: 20/05/2004 - 15:51:10\n * The JForum Project\n * http://www.jforum.net\n */\npackage net.jforum.dao.generic;\n\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Timestamp;\nimport java.text.SimpleDateFormat;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.List;\n\nimport net.jforum.JForumExecutionContext;\nimport net.jforum.dao.DataAccessDriver;\nimport net.jforum.dao.UserDAO;\nimport net.jforum.entities.Post;\nimport net.jforum.entities.PrivateMessage;\nimport net.jforum.entities.PrivateMessageType;\nimport net.jforum.entities.User;\nimport net.jforum.exceptions.DatabaseException;\nimport net.jforum.util.DbUtils;\nimport net.jforum.util.preferences.ConfigKeys;\nimport net.jforum.util.preferences.SystemGlobals;\n\n/**\n * @author Rafael Steil\n * @version $Id: GenericPrivateMessageDAO.java,v 1.12 2007/08/31 22:56:40 rafaelsteil Exp $\n */\npublic class GenericPrivateMessageDAO extends AutoKeys implements net.jforum.dao.PrivateMessageDAO\n{\n\t/**\n\t * @see net.jforum.dao.PrivateMessageDAO#send(net.jforum.entities.PrivateMessage)\n\t */\n\tpublic void send(PrivateMessage pm)\n\t{\n\t\t// We should store 2 copies: one for the sendee's sent box\n\t\t// and another for the target user's inbox.\n\t\tPreparedStatement p = null;\n\t\t\n\t\ttry {\n\t\t\tp = this.getStatementForAutoKeys(\"PrivateMessageModel.add\");\n\n\t\t\t// Sendee's sent box\n\t\t\tthis.addPm(pm, p);\n\t\t\tthis.addPmText(pm);\n\n\t\t\t// Target user's inbox\n\t\t\tp.setInt(1, PrivateMessageType.NEW);\n\t\t\tpm.setId(this.executeAutoKeysQuery(p));\n\n\t\t\tthis.addPmText(pm);\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tthrow new DatabaseException(e);\n\t\t}\n\t\tfinally {\n\t\t\tDbUtils.close(p);\n\t\t}\n\t}\n\n\tprotected void addPmText(PrivateMessage pm) throws Exception\n\t{\n\t\tPreparedStatement text = JForumExecutionContext.getConnection().prepareStatement(\n\t\t\tSystemGlobals.getSql(\"PrivateMessagesModel.addText\"));\n\n\t\ttext.setInt(1, pm.getId());\n\t\ttext.setString(2, pm.getPost().getText());\n\t\ttext.executeUpdate();\n\n\t\ttext.close();\n\t}\n\n\tprotected void addPm(PrivateMessage pm, PreparedStatement p) throws SQLException\n\t{\n\t\tp.setInt(1, PrivateMessageType.SENT);\n\t\tp.setString(2, pm.getPost().getSubject());\n\t\tp.setInt(3, pm.getFromUser().getId());\n\t\tp.setInt(4, pm.getToUser().getId());\n\t\tp.setTimestamp(5, new Timestamp(pm.getPost().getTime().getTime()));\n\t\tp.setInt(6, pm.getPost().isBbCodeEnabled() ? 1 : 0);\n\t\tp.setInt(7, pm.getPost().isHtmlEnabled() ? 1 : 0);\n\t\tp.setInt(8, pm.getPost().isSmiliesEnabled() ? 1 : 0);\n\t\tp.setInt(9, pm.getPost().isSignatureEnabled() ? 1 : 0);\n\n\t\tthis.setAutoGeneratedKeysQuery(SystemGlobals.getSql(\"PrivateMessagesModel.lastGeneratedPmId\"));\n\t\tpm.setId(this.executeAutoKeysQuery(p));\n\t}\n\n\t/**\n\t * @see net.jforum.dao.PrivateMessageDAO#delete(net.jforum.entities.PrivateMessage[], int)\n\t */\n\tpublic void delete(PrivateMessage[] pm, int userId)\n\t{\n\t\tPreparedStatement deleteMessage = null;\n\t\tPreparedStatement deleteText = null;\n\t\tPreparedStatement isDeleteAllowed = null;\n\t\t\n\t\ttry {\n\t\t\tConnection connection = JForumExecutionContext.getConnection();\n\t\t\t\n\t\t\tdeleteMessage = connection.prepareStatement(SystemGlobals.getSql(\"PrivateMessageModel.delete\"));\n\t\t\tdeleteText = connection.prepareStatement(SystemGlobals.getSql(\"PrivateMessagesModel.deleteText\"));\n\t\t\t\n\t\t\tisDeleteAllowed = connection.prepareStatement(SystemGlobals.getSql(\"PrivateMessagesModel.isDeleteAllowed\"));\n\t\t\tisDeleteAllowed.setInt(2, userId);\n\t\t\tisDeleteAllowed.setInt(3, userId);\n\n\t\t\tfor (int i = 0; i < pm.length; i++) {\n\t\t\t\tPrivateMessage currentMessage = pm[i];\n\t\t\t\t\n\t\t\t\tisDeleteAllowed.setInt(1, currentMessage.getId());\n\n\t\t\t\tResultSet rs = null;\n\t\t\t\t\n\t\t\t\ttry {\n\t\t\t\t\trs = isDeleteAllowed.executeQuery();\n\t\t\t\t\t\n\t\t\t\t\tif (rs.next()) {\n\t\t\t\t\t\tdeleteText.setInt(1, currentMessage.getId());\n\t\t\t\t\t\tdeleteText.executeUpdate();\n\t\t\n\t\t\t\t\t\tdeleteMessage.setInt(1, currentMessage.getId());\n\t\t\t\t\t\tdeleteMessage.executeUpdate();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfinally {\n\t\t\t\t\tDbUtils.close(rs);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcatch (SQLException e) {\n\t\t\tthrow new DatabaseException(e);\n\t\t}\n\t\tfinally {\n\t\t\tDbUtils.close(deleteMessage);\n\t\t\tDbUtils.close(deleteText);\n\t\t\tDbUtils.close(isDeleteAllowed);\n\t\t}\n\t}\n\n\t/**\n\t * @see net.jforum.dao.PrivateMessageDAO#selectFromInbox(net.jforum.entities.User)\n\t */\n\tpublic List selectFromInbox(User user)\n\t{\n\t\tString query = SystemGlobals.getSql(\"PrivateMessageModel.baseListing\");\n\t\tquery = query.replaceAll(\"#FILTER#\", SystemGlobals.getSql(\"PrivateMessageModel.inbox\"));\n\n\t\tPreparedStatement p = null;\n\t\tResultSet rs = null;\n\t\ttry {\n\t\t\tp = JForumExecutionContext.getConnection().prepareStatement(query);\n\t\t\tp.setInt(1, user.getId());\n\n\t\t\tList pmList = new ArrayList();\n\n\t\t\trs = p.executeQuery();\n\t\t\twhile (rs.next()) {\n\t\t\t\tPrivateMessage pm = this.getPm(rs, false);\n\n\t\t\t\tUser fromUser = new User();\n\t\t\t\tfromUser.setId(rs.getInt(\"user_id\"));\n\t\t\t\tfromUser.setUsername(rs.getString(\"username\"));\n\n\t\t\t\tpm.setFromUser(fromUser);\n\n\t\t\t\tpmList.add(pm);\n\t\t\t}\n\n\t\t\treturn pmList;\n\t\t}\n\t\tcatch (SQLException e) {\n\t\t\tthrow new DatabaseException(e);\n\t\t}\n\t\tfinally {\n\t\t\tDbUtils.close(rs, p);\n\t\t}\n\t}\n\n\t/**\n\t * @see net.jforum.dao.PrivateMessageDAO#selectFromSent(net.jforum.entities.User)\n\t */\n\tpublic List selectFromSent(User user)\n\t{\n\t\tString query = SystemGlobals.getSql(\"PrivateMessageModel.baseListing\");\n\t\tquery = query.replaceAll(\"#FILTER#\", SystemGlobals.getSql(\"PrivateMessageModel.sent\"));\n\n\t\tPreparedStatement p = null;\n\t\tResultSet rs = null;\n\t\ttry {\n\t\t\tp = JForumExecutionContext.getConnection().prepareStatement(query);\n\t\t\tp.setInt(1, user.getId());\n\n\t\t\tList pmList = new ArrayList();\n\n\t\t\trs = p.executeQuery();\n\t\t\twhile (rs.next()) {\n\t\t\t\tPrivateMessage pm = this.getPm(rs, false);\n\n\t\t\t\tUser toUser = new User();\n\t\t\t\ttoUser.setId(rs.getInt(\"user_id\"));\n\t\t\t\ttoUser.setUsername(rs.getString(\"username\"));\n\n\t\t\t\tpm.setToUser(toUser);\n\n\t\t\t\tpmList.add(pm);\n\t\t\t}\n\t\t\treturn pmList;\n\t\t}\n\t\tcatch (SQLException e) {\n\t\t\tthrow new DatabaseException(e);\n\t\t}\n\t\tfinally {\n\t\t\tDbUtils.close(rs, p);\n\t\t}\n\t}\n\n\tprotected PrivateMessage getPm(ResultSet rs) throws SQLException\n\t{\n\t\treturn this.getPm(rs, true);\n\t}\n\n\tprotected PrivateMessage getPm(ResultSet rs, boolean full) throws SQLException\n\t{\n\t\tPrivateMessage pm = new PrivateMessage();\n\t\tPost p = new Post();\n\n\t\tpm.setId(rs.getInt(\"privmsgs_id\"));\n\t\tpm.setType(rs.getInt(\"privmsgs_type\"));\n\t\tp.setTime(new Date(rs.getTimestamp(\"privmsgs_date\").getTime()));\n\t\tp.setSubject(rs.getString(\"privmsgs_subject\"));\n\n\t\tSimpleDateFormat df = new SimpleDateFormat(SystemGlobals.getValue(ConfigKeys.DATE_TIME_FORMAT));\n\t\tpm.setFormatedDate(df.format(p.getTime()));\n\n\t\tif (full) {\n\t\t\tUserDAO um = DataAccessDriver.getInstance().newUserDAO();\n\t\t\tpm.setFromUser(um.selectById(rs.getInt(\"privmsgs_from_userid\")));\n\t\t\tpm.setToUser(um.selectById(rs.getInt(\"privmsgs_to_userid\")));\n\n\t\t\tp.setBbCodeEnabled(rs.getInt(\"privmsgs_enable_bbcode\") == 1);\n\t\t\tp.setSignatureEnabled(rs.getInt(\"privmsgs_attach_sig\") == 1);\n\t\t\tp.setHtmlEnabled(rs.getInt(\"privmsgs_enable_html\") == 1);\n\t\t\tp.setSmiliesEnabled(rs.getInt(\"privmsgs_enable_smilies\") == 1);\n\t\t\tp.setText(this.getPmText(rs));\n\t\t}\n\n\t\tpm.setPost(p);\n\n\t\treturn pm;\n\t}\n\n\tprotected String getPmText(ResultSet rs) throws SQLException\n\t{\n\t\treturn rs.getString(\"privmsgs_text\");\n\t}\n\n\t/**\n\t * @see net.jforum.dao.PrivateMessageDAO#selectById(net.jforum.entities.PrivateMessage)\n\t */\n\tpublic PrivateMessage selectById(PrivateMessage pm)\n\t{\n\t\tPreparedStatement p = null;\n\t\tResultSet rs = null;\n\t\ttry {\n\t\t\tp = JForumExecutionContext.getConnection().prepareStatement(\n\t\t\t\t\tSystemGlobals.getSql(\"PrivateMessageModel.selectById\"));\n\t\t\tp.setInt(1, pm.getId());\n\n\t\t\trs = p.executeQuery();\n\t\t\tif (rs.next()) {\n\t\t\t\tpm = this.getPm(rs);\n\t\t\t}\n\n\t\t\treturn pm;\n\t\t}\n\t\tcatch (SQLException e) {\n\t\t\tthrow new DatabaseException(e);\n\t\t}\n\t\tfinally {\n\t\t\tDbUtils.close(rs, p);\n\t\t}\n\t}\n\n\t/**\n\t * @see net.jforum.dao.PrivateMessageDAO#updateType(net.jforum.entities.PrivateMessage)\n\t */\n\tpublic void updateType(PrivateMessage pm)\n\t{\n\t\tPreparedStatement p = null;\n\t\ttry {\n\t\t\tp = JForumExecutionContext.getConnection().prepareStatement(\n\t\t\t\t\tSystemGlobals.getSql(\"PrivateMessageModel.updateType\"));\n\t\t\tp.setInt(1, pm.getType());\n\t\t\tp.setInt(2, pm.getId());\n\t\t\tp.executeUpdate();\n\t\t}\n\t\tcatch (SQLException e) {\n\t\t\tthrow new DatabaseException(e);\n\t\t}\n\t\tfinally {\n\t\t\tDbUtils.close(p);\n\t\t}\n\t}\n}",
  "metadata": {
    "fileId": "GenericPrivateMessageDAO_java_chunk_1",
    "fileName": "GenericPrivateMessageDAO.java",
    "filePath": "src/net/jforum/dao/generic/GenericPrivateMessageDAO.java"
  }
}