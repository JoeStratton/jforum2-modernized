{
  "pageContent": "File Path: src/net/jforum/api/rest/UserREST.java\n\n Original Content: /*\n * Created on 04/09/2006 21:23:22\n */\npackage net.jforum.api.rest;\n\nimport java.util.List;\n\nimport freemarker.template.SimpleHash;\nimport freemarker.template.Template;\n\nimport net.jforum.Command;\nimport net.jforum.JForumExecutionContext;\nimport net.jforum.context.RequestContext;\nimport net.jforum.context.ResponseContext;\nimport net.jforum.dao.DataAccessDriver;\nimport net.jforum.dao.UserDAO;\nimport net.jforum.entities.User;\nimport net.jforum.exceptions.APIException;\nimport net.jforum.util.I18n;\nimport net.jforum.util.preferences.ConfigKeys;\nimport net.jforum.util.preferences.SystemGlobals;\nimport net.jforum.util.preferences.TemplateKeys;\n\n/**\n * @author Rafael Steil\n * @version $Id: UserREST.java,v 1.3 2006/10/10 00:49:04 rafaelsteil Exp $\n */\npublic class UserREST extends Command\n{\n\t/**\n\t * List all users\n\t */\n\tpublic void list()\n\t{\n\t\ttry {\n\t\t\tthis.authenticate();\n\t\t\t\n\t\t\tUserDAO dao = DataAccessDriver.getInstance().newUserDAO();\n\t\t\tList users = dao.selectAll();\n\t\t\n\t\t\tthis.setTemplateName(TemplateKeys.API_USER_LIST);\n\t\t\tthis.context.put(\"users\", users);\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tthis.setTemplateName(TemplateKeys.API_ERROR);\n\t\t\tthis.context.put(\"exception\", e);\n\t\t}\n\t}\n\t\n\t/**\n\t * Creates a new user.\n\t * Required parameters ara \"username\", \"email\" and \"password\".\n\t */\n\tpublic void insert()\n\t{\n\t\ttry {\n\t\t\tthis.authenticate();\n\t\t\t\n\t\t\tString username = this.requiredRequestParameter(\"username\");\n\t\t\tString email = this.requiredRequestParameter(\"email\");\n\t\t\tString password = this.requiredRequestParameter(\"password\");\n\t\t\t\n\t\t\tif (username.length() > SystemGlobals.getIntValue(ConfigKeys.USERNAME_MAX_LENGTH)) {\n\t\t\t\tthrow new APIException(I18n.getMessage(\"User.usernameTooBig\"));\n\t\t\t}\n\t\t\t\n\t\t\tif (username.indexOf('<') > -1 || username.indexOf('>') > -1) {\n\t\t\t\tthrow new APIException(I18n.getMessage(\"User.usernameInvalidChars\"));\n\t\t\t}\n\t\t\t\n\t\t\tUserDAO dao = DataAccessDriver.getInstance().newUserDAO();\n\n\t\t\tif (dao.isUsernameRegistered(username)) {\n\t\t\t\tthrow new APIException(I18n.getMessage(\"UsernameExists\"));\n\t\t\t}\n\t\t\t\n\t\t\tif (dao.findByEmail(email) != null) {\n\t\t\t\tthrow new APIException(I18n.getMessage(\"User.emailExists\", new Object[] { email }));\n\t\t\t}\n\t\t\t\n\t\t\t// Ok, time to insert the user\n\t\t\tUser user = new User();\n\t\t\tuser.setUsername(username);\n\t\t\tuser.setEmail(email);\n\t\t\tuser.setPassword(password);\n\t\t\t\n\t\t\tint userId = dao.addNew(user);\n\t\t\t\n\t\t\tthis.setTemplateName(TemplateKeys.API_USER_INSERT);\n\t\t\tthis.context.put(\"userId\", new Integer(userId));\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tthis.setTemplateName(TemplateKeys.API_ERROR);\n\t\t\tthis.context.put(\"exception\", e);\n\t\t}\n\t}\n\t\n\t/**\n\t * Retrieves a parameter from the request and ensures it exists\n\t * @param paramName the parameter name to retrieve its value\n\t * @return the parameter value\n\t * @throws APIException if the parameter is not found or its value is empty\n\t */\n\tprivate String requiredRequestParameter(String paramName)\n\t{\n\t\tString value = this.request.getParameter(paramName);\n\t\t\n\t\tif (value == null || value.trim().length() == 0) {\n\t\t\tthrow new APIException(\"The parameter '\" + paramName + \"' was not found\");\n\t\t}\n\t\t\n\t\treturn value;\n\t}\n\n\t/**\n\t * Tries to authenticate the user accessing the API\n\t * @throws APIException if the authentication fails\n\t */\n\tprivate void authenticate()\n\t{\n\t\tString apiKey = this.requiredRequestParameter(\"api_key\");\n\t\t\n\t\tRESTAuthentication auth = new RESTAuthentication();\n\t\t\n\t\tif (!auth.validateApiKey(apiKey)) {\n\t\t\tthrow new APIException(\"The provided API authentication information is not valid\");\n\t\t}\n\t}\n\t\n\tpublic Template process(RequestContext request, ResponseContext response, SimpleHash context)\n\t{\n\t\tJForumExecutionContext.setContentType(\"text/xml\");\n\t\treturn super.process(request, response, context);\n\t}\n}",
  "metadata": {
    "fileId": "UserREST_java_chunk_1",
    "fileName": "UserREST.java",
    "filePath": "src/net/jforum/api/rest/UserREST.java"
  }
}