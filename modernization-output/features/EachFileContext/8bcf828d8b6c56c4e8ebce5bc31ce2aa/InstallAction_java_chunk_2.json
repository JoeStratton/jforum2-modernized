{
  "pageContent": "File Path: src/net/jforum/view/install/InstallAction.java\n\n Original Content: public class InstallAction extends Command\n{\n\tprivate static Logger logger = Logger.getLogger(InstallAction.class);\n\n    private static final String POOLED_CONNECTION = net.jforum.PooledConnection.class.getName();\n    private static final String SIMPLE_CONNECTION = net.jforum.SimpleConnection.class.getName();\n    private static final String DATASOURCE_CONNECTION = net.jforum.DataSourceConnection.class.getName();\n\n    public void welcome()\n\t{\n\t\tthis.checkLanguage();\n\t\t\n\t\tthis.context.put(\"language\", this.getFromSession(\"language\"));\n\t\tthis.context.put(\"database\", this.getFromSession(\"database\"));\n\t\tthis.context.put(\"dbhost\", this.getFromSession(\"dbHost\"));\n\t\tthis.context.put(\"dbuser\", this.getFromSession(\"dbUser\"));\n\t\tthis.context.put(\"dbname\", this.getFromSession(\"dbName\"));\n\t\tthis.context.put(\"dbport\", this.getFromSession(\"dbPort\"));\n\t\tthis.context.put(\"dbpasswd\", this.getFromSession(\"dbPassword\"));\n\t\tthis.context.put(\"dbencoding\", this.getFromSession(\"dbEncoding\"));\n\t\tthis.context.put(\"use_pool\", this.getFromSession(\"usePool\"));\n\t\tthis.context.put(\"forumLink\", this.getFromSession(\"forumLink\"));\n\t\tthis.context.put(\"siteLink\", this.getFromSession(\"siteLink\"));\n\t\tthis.context.put(\"dbdatasource\", this.getFromSession(\"dbdatasource\"));\n\t\t\n\t\tthis.setTemplateName(TemplateKeys.INSTALL_WELCOME);\n\t}\n\t\n\tprivate void checkLanguage()\n\t{\n\t\tString lang = this.request.getParameter(\"l\");\n\t\t\n\t\tif (lang == null) {\n\t\t\tLocale locale = this.request.getLocale();\n\t\t\tlang = locale.getLanguage() + \"_\" + locale.getCountry();\n\t\t}\n\t\t\n\t\tif (!I18n.languageExists(lang)) {\n\t\t\treturn;\n\t\t}\n\t\tI18n.load(lang);\n\t\t\n\t\tUserSession us = new UserSession();\n\t\tus.setLang(lang);\n\t\t\n\t\tSessionFacade.add(us);\n\t\tthis.addToSessionAndContext(\"language\", lang);\n\t}\n\t\n\tprivate String getFromSession(String key)\n\t{\n\t\treturn (String)this.request.getSessionContext().getAttribute(key);\n\t}\n\t\n\tprivate void error()\n\t{\n\t\tthis.setTemplateName(TemplateKeys.INSTALL_ERROR);\n\t}\n\t\n\tpublic void doInstall()\n\t{\n\t\tif (!this.checkForWritableDir()) {\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tthis.removeUserConfig();\n\t\t\n\t\tConnection conn = null;\n\n\t\tif (!\"passed\".equals(this.getFromSession(\"configureDatabase\"))) {\n\t\t\tlogger.info(\"Going to configure the database...\");\n\t\t\t\n\t\t\tconn = this.configureDatabase();\n\t\t\t\n\t\t\tif (conn == null) {\n\t\t\t\tthis.context.put(\"message\", I18n.getMessage(\"Install.databaseError\"));\n\t\t\t\tthis.error();\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t\n\t\tlogger.info(\"Database configuration ok\");\n\n\t\t// Database Configuration is ok\n\t\tthis.addToSessionAndContext(\"configureDatabase\", \"passed\");\n\t\t\n\t\tDBConnection simpleConnection = new SimpleConnection();\n\t\t\n\t\tif (conn == null) {\n\t\t\tconn = simpleConnection.getConnection();\n\t\t}\n\t\t\n\t\tboolean dbError = false;\n\t\t\n\t\ttry {\n\t\t\t//this.setupAutoCommit(conn);\n\t\t\t\n\t\t\tif (!\"passed\".equals(this.getFromSession(\"createTables\")) && !this.createTables(conn)) {\n\t\t\t\tthis.context.put(\"message\", I18n.getMessage(\"Install.createTablesError\"));\n\t\t\t\tdbError = true;\n\t\t\t\tthis.error();\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\t// Create tables is ok\n\t\t\tthis.addToSessionAndContext(\"createTables\", \"passed\");\n\t\t\tlogger.info(\"Table creation is ok\");\n\t\t\tthis.setupAutoCommit(conn); \n\t        if (!\"passed\".equals(this.getFromSession(\"importTablesData\")) && !this.importTablesData(conn)) {\n\t\t\t\tthis.context.put(\"message\", I18n.getMessage(\"Install.importTablesDataError\"));\n\t\t\t\tdbError = true;\n\t\t\t\tthis.error();\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\t// Dump is ok\n\t\t\tthis.addToSessionAndContext(\"importTablesData\", \"passed\");\n\t\t\t\n\t\t\tif (!this.updateAdminPassword(conn)) {\n\t\t\t\tthis.context.put(\"message\", I18n.getMessage(\"Install.updateAdminError\"));\n\t\t\t\tdbError = true;\n\t\t\t\tthis.error();\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tthis.storeSupportProjectMessage(conn);\n\t\t}\n\t\tfinally {\n\t\t\tif (conn != null) {\n\t\t\t\ttry {\n\t\t\t\t\tif (dbError) {\n\t\t\t\t\t\tconn.rollback();\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tconn.commit();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcatch (SQLException e) { }\n\t\t\t\t\n\t\t\t\tsimpleConnection.releaseConnection(conn);\n\t\t\t}\n\t\t}\n\n\t\tJForumExecutionContext.setRedirect(this.request.getContextPath() + \"/install/install\"\n\t\t\t+ SystemGlobals.getValue(ConfigKeys.SERVLET_EXTENSION)\n\t\t\t+ \"?module=install&action=finished\");\n\t}\n\t\n\tprivate void setupAutoCommit(Connection conn)\n\t{\n\t\ttry {\n\t\t\tconn.setAutoCommit(false);\n\t\t}\n\t\tcatch (SQLException e) {\n\t\t\tthrow new DatabaseException(e);\n\t\t}\n\t}\n\t\n\tprivate void removeUserConfig()\n\t{\n\t\tFile f = new File(SystemGlobals.getValue(ConfigKeys.INSTALLATION_CONFIG));\n\t\t\n\t\tif (f.exists() && f.canWrite()) {\n\t\t\ttry {\n\t\t\t\tf.delete();\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\tlogger.info(e.toString());\n\t\t\t}\n\t\t}\n\t}\n\t\n\tpublic void finished() \n\t{\n\t\tthis.setTemplateName(TemplateKeys.INSTALL_FINISHED);\n\n\t\tthis.context.put(\"clickHere\", I18n.getMessage(\"Install.clickHere\"));\n\t\tthis.context.put(\"forumLink\", this.getFromSession(\"forumLink\"));\n\n\t\tString lang = this.getFromSession(\"language\");\n\n\t\tif (lang == null) {\n\t\t\tlang = \"en_US\";\n\t\t}\n\n\t\tthis.context.put(\"lang\", lang);\n\n\t\tthis.fixModulesMapping();\n\t\tthis.configureSystemGlobals();\n\n\t\tSystemGlobals.loadQueries(SystemGlobals.getValue(ConfigKeys.SQL_QUERIES_GENERIC));\n\t\tSystemGlobals.loadQueries(SystemGlobals.getValue(ConfigKeys.SQL_QUERIES_DRIVER));\n\t\t\n\t\tSessionFacade.remove(this.request.getSessionContext().getId());\n\t}\n\t\n\tprivate void fixModulesMapping()\n\t{\n\t\tFileInputStream fis = null;\n\t\tFileOutputStream fos = null;\n\t\t\n\t\ttry {\n\t\t\t// Modules Mapping\n\t\t\tString modulesMapping = SystemGlobals.getValue(ConfigKeys.CONFIG_DIR) + \"/modulesMapping.properties\";\n\t\t\t\n\t\t\tif (new File(modulesMapping).canWrite()) {\n\t\t\t\tProperties p = new Properties();\n\t\t\t\tfis = new FileInputStream(modulesMapping);\n\t\t\t\tp.load(fis);\n\t\t\t\t\n\t\t\t\tif (p.containsKey(\"install\")) {\n\t\t\t\t\tp.remove(\"install\");\n\n\t\t\t\t\tfos = new FileOutputStream(modulesMapping);\n\t\t\t\t\t\n\t\t\t\t\tp.store(fos, \"Modified by JForum Installer\");\n\t\t\t\t\tConfigLoader.loadModulesMapping(SystemGlobals.getValue(ConfigKeys.CONFIG_DIR));\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.addToSessionAndContext(\"mappingFixed\", \"true\");\n\t\t\t}\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tlogger.warn(\"Error while working on modulesMapping.properties: \" + e);\n\t\t}\n\t\tfinally {\n\t\t\tif (fis != null) {\n\t\t\t\ttry { fis.close(); } catch (Exception e) {}\n\t\t\t}\n\t\t\t\n\t\t\tif (fos != null) {\n\t\t\t\ttry { fos.close(); } catch (Exception e) {}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate void configureSystemGlobals()\n\t{\n\t\tSystemGlobals.setValue(ConfigKeys.USER_HASH_SEQUENCE, MD5.crypt(this.getFromSession(\"dbPassword\")\n\t\t\t+ System.currentTimeMillis()));\n\n\t\tSystemGlobals.setValue(ConfigKeys.FORUM_LINK, this.getFromSession(\"forumLink\"));\n\t\tSystemGlobals.setValue(ConfigKeys.HOMEPAGE_LINK, this.getFromSession(\"siteLink\"));\n\t\tSystemGlobals.setValue(ConfigKeys.I18N_DEFAULT, this.getFromSession(\"language\"));\n\t\tSystemGlobals.setValue(ConfigKeys.INSTALLED, \"true\");\n\t\t\n\t\tSystemGlobals.saveInstallation();\n\t\t\n\t\tthis.restartSystemGlobals();\n\t}\n\t\n\tprivate boolean importTablesData(Connection conn)\n    {\n        try\n        {\n            boolean status = true;\n            boolean autoCommit = conn.getAutoCommit();\n            conn.setAutoCommit(false);\n\n            String dbType = this.getFromSession(\"database\");\n\n            List statements = ParseDBDumpFile.parse(SystemGlobals.getValue(ConfigKeys.CONFIG_DIR)\n                + \"/database/\"\n                + dbType\n                + \"/\" + dbType + \"_data_dump.sql\");\n\n            for (Iterator iter = statements.iterator(); iter.hasNext();) {\n                String query = (String)iter.next();\n\n                if (query == null || \"\".equals(query.trim())) {\n                    continue;\n                }\n\n                query = query.trim();\n\n                Statement s = conn.createStatement();\n\n                try {\n                    if (query.startsWith(\"UPDATE\") || query.startsWith(\"INSERT\") || query.startsWith(\"SET\")) {\n                        s.executeUpdate(query);\n                    }\n                    else if (query.startsWith(\"SELECT\")) {\n                        s.executeQuery(query);\n                    }\n                    else {\n                        throw new SQLException(\"Invalid query: \" + query);\n                    }\n                }\n                catch (SQLException ex) {\n                    status = false;\n                    conn.rollback();\n                    logger.error(\"Error importing data for \" + query + \": \" + ex, ex);\n                    this.context.put(\"exceptionMessage\", ex.getMessage() + \"\\n\" + query);\n                    break;\n                }\n                finally {\n                    s.close();\n                }\n            }\n\n            conn.setAutoCommit(autoCommit);\n            return status;\n        }\n        catch (Exception e)\n        {\n            throw new ForumException(e);\n        }\n    }\n\t\n\tprivate boolean createTables(Connection conn)\n\t{\n           \n\t\tlogger.info(\"Going to create tables...\");\n\t\tString dbType = this.getFromSession(\"database\");\n\n\t\tif (\"postgresql\".equals(dbType) || \"oracle\".equals(dbType)) {\n\t\t\t// This should be in a separate transaction block; otherwise, an empty database will fail.\n\t\t\tthis.dropOracleOrPostgreSQLTables(dbType, conn);\n\t\t}\n\t\ttry { \n\t\t\tboolean status = true;\n\t\t\tboolean autoCommit = conn.getAutoCommit();\n\t\t\tconn.setAutoCommit(false);\n\n\t\t\tList statements = ParseDBStructFile.parse(SystemGlobals.getValue(ConfigKeys.CONFIG_DIR)\n\t\t\t\t\t+ \"/database/\"\n\t\t\t\t\t+ dbType\n\t\t\t\t\t+ \"/\" + dbType + \"_db_struct.sql\");\n\n\n\t\t\tfor (Iterator iter = statements.iterator(); iter.hasNext(); ) {\n\t\t\t\tString query = (String)iter.next();\n\n\t\t\t\tif (query == null || \"\".equals(query.trim())) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tStatement s = null;\n\n\t\t\t\ttry {\n\t\t\t\t\ts = conn.createStatement();\n\t\t\t\t\ts.executeUpdate(query);\n\t\t\t\t}\n\t\t\t\tcatch (SQLException ex) {\n\t\t\t\t\tstatus = false;\n\n\t\t\t\t\tlogger.error(\"Error executing query: \" + query + \": \" + ex, ex);\n\t\t\t\t\tthis.context.put(\"exceptionMessage\", ex.getMessage() + \"\\n\" + query);",
  "metadata": {
    "fileId": "InstallAction_java_chunk_2",
    "fileName": "InstallAction.java",
    "filePath": "src/net/jforum/view/install/InstallAction.java"
  }
}