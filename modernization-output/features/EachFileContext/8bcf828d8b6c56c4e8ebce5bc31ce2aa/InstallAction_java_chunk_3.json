{
  "pageContent": "File Path: src/net/jforum/view/install/InstallAction.java\n\n Original Content: if (\"postgresql\".equals(dbType) || \"oracle\".equals(dbType)) {\n\t\t\t// This should be in a separate transaction block; otherwise, an empty database will fail.\n\t\t\tthis.dropOracleOrPostgreSQLTables(dbType, conn);\n\t\t}\n\t\ttry { \n\t\t\tboolean status = true;\n\t\t\tboolean autoCommit = conn.getAutoCommit();\n\t\t\tconn.setAutoCommit(false);\n\n\t\t\tList statements = ParseDBStructFile.parse(SystemGlobals.getValue(ConfigKeys.CONFIG_DIR)\n\t\t\t\t\t+ \"/database/\"\n\t\t\t\t\t+ dbType\n\t\t\t\t\t+ \"/\" + dbType + \"_db_struct.sql\");\n\n\n\t\t\tfor (Iterator iter = statements.iterator(); iter.hasNext(); ) {\n\t\t\t\tString query = (String)iter.next();\n\n\t\t\t\tif (query == null || \"\".equals(query.trim())) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tStatement s = null;\n\n\t\t\t\ttry {\n\t\t\t\t\ts = conn.createStatement();\n\t\t\t\t\ts.executeUpdate(query);\n\t\t\t\t}\n\t\t\t\tcatch (SQLException ex) {\n\t\t\t\t\tstatus = false;\n\n\t\t\t\t\tlogger.error(\"Error executing query: \" + query + \": \" + ex, ex);\n\t\t\t\t\tthis.context.put(\"exceptionMessage\", ex.getMessage() + \"\\n\" + query);\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tfinally {\n\t\t\t\t\tDbUtils.close(s);\n\t\t\t\t}\n\t\t\t}\n\t\t\tconn.setAutoCommit(autoCommit);\n\t\t\treturn status;\n\t\t}\n\t\tcatch (Exception e)\n\t\t{\n\t\t\tthrow new ForumException(e);\n\t\t}\n\t}\n\t\n\tprivate void dropOracleOrPostgreSQLTables(String dbName, Connection conn)\n\t{\n\t\tStatement s = null;\n\t\t\n\t\ttry {\n\t\t\tboolean autoCommit = conn.getAutoCommit();\n\t\t\tconn.setAutoCommit(false);\n\t\t\t\n\t\t\tList statements = ParseDBStructFile.parse(SystemGlobals.getValue(ConfigKeys.CONFIG_DIR)\n\t\t\t\t+ \"/database/\" + dbName + \"/\" + dbName + \"_drop_tables.sql\");\n\t\t\t\n\t\t\tthis.setupAutoCommit(conn);\n\t\t\tfor (Iterator iter = statements.iterator(); iter.hasNext(); ) {\n\t\t\t\ttry {\n\t\t\t\t\tString query = (String)iter.next();\n\t\t\t\t\t\n\t\t\t\t\tif (query == null || \"\".equals(query.trim())) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\ts = conn.createStatement();\n\t\t\t\t\ts.executeUpdate(query);\n\t\t\t\t\ts.close();\n                }\n\t\t\t\tcatch (Exception e) {\n\t\t\t\t\tlogger.error(\"IGNORE: \" + e.toString());\n\t\t\t\t}\n\t\t\t}\n\t\t\tconn.setAutoCommit(autoCommit);\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tlogger.error(e.toString(), e);\n\t\t}\n\t\tfinally {\n            DbUtils.close(s);\n\t\t}\n\t}\n\t\n\tprivate boolean checkForWritableDir()\n\t{\n\t\tboolean canWriteToWebInf = this.canWriteToWebInf();\n\t\tboolean canWriteToLuceneIndex = this.canWriteToLuceneIndex();\n\t\t\n\t\tif (!canWriteToWebInf || !canWriteToLuceneIndex) {\n\t\t\tif (!canWriteToWebInf) {\n\t\t\t\tthis.context.put(\"message\", I18n.getMessage(\"Install.noWritePermission\"));\n\t\t\t}\n\t\t\telse if (!canWriteToLuceneIndex) {\n\t\t\t\tthis.context.put(\"message\", I18n.getMessage(\"Install.noWritePermissionLucene\", \n\t\t\t\t\tnew Object[] { SystemGlobals.getValue(ConfigKeys.LUCENE_INDEX_WRITE_PATH) } ));\n\t\t\t}\n\t\t\t\n\t\t\tthis.context.put(\"tryAgain\", true);\n\t\t\tthis.error();\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\t\n\tprivate boolean canWriteToWebInf()\n\t{\n\t\treturn new File(SystemGlobals.getValue(ConfigKeys.CONFIG_DIR) + \"/modulesMapping.properties\").canWrite();\n\t}\n\t\n\tprivate boolean canWriteToLuceneIndex()\n\t{\n\t\tFile file = new File(SystemGlobals.getValue(ConfigKeys.LUCENE_INDEX_WRITE_PATH));\n\t\t\n\t\tif (!file.exists()) {\n\t\t\treturn file.mkdir();\n\t\t}\n\t\t\n\t\treturn file.canWrite();\n\t}\n\t\n\tprivate void handleDatabasePort(Properties p, String port)\n\t{\n\t\tString portKey = \":${database.connection.port}\";\n\t\tString connectionString = p.getProperty(ConfigKeys.DATABASE_CONNECTION_STRING);\n\t\t\n\t\tif (port == null || port.trim().length() == 0) {\n\t\t\tint index = connectionString.indexOf(portKey);\n\t\t\t\n\t\t\tif (index > -1) {\n\t\t\t\tif (connectionString.charAt(index - 1) == '\\\\') {\n\t\t\t\t\tconnectionString = connectionString.replaceAll(\"\\\\\" + portKey, \"\");\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tconnectionString = connectionString.replaceAll(portKey, \"\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (connectionString.indexOf(portKey) == -1) {\n\t\t\tString hostKey = \"${database.connection.host}\";\n\t\t\tconnectionString = StringUtils.replace(connectionString, hostKey, hostKey + portKey);\n\t\t}\n\t\t\n\t\tp.setProperty(ConfigKeys.DATABASE_CONNECTION_STRING, connectionString);\n\t}\n\t\n\tprivate void configureJDBCConnection()\n\t{\n\t\tString username = this.getFromSession(\"dbUser\");\n\t\tString password = this.getFromSession(\"dbPassword\");\n\t\tString dbName = this.getFromSession(\"dbName\");\n\t\tString host = this.getFromSession(\"dbHost\");\n\t\tString type = this.getFromSession(\"database\");\n\t\tString encoding = this.getFromSession(\"dbEncoding\");\n\t\tString port = this.getFromSession(\"dbPort\");\n\t\t\n\t\tString dbConfigFilePath = SystemGlobals.getValue(ConfigKeys.CONFIG_DIR) \n\t\t\t+ \"/database/\" + type + \"/\" + type + \".properties\";\n\t\t\n\t\tProperties p = new Properties();\n\t\tFileInputStream fis = null;\n\t\t\n\t\ttry {\n            fis = new FileInputStream(dbConfigFilePath);\n\t\t\tp.load(fis);\n        }\n        catch (IOException e) {\n            throw new ForumException(e);\n        }\n        finally {\n        \tif (fis != null) {\n        \t\ttry { fis.close(); } catch (Exception e) {}\n        \t}\n        }\n\n        this.handleDatabasePort(p, port);\n\t\t\n\t\t// Write database information to the respective file\n\t\tp.setProperty(ConfigKeys.DATABASE_CONNECTION_HOST, host);\n\t\tp.setProperty(ConfigKeys.DATABASE_CONNECTION_USERNAME, username);\n\t\tp.setProperty(ConfigKeys.DATABASE_CONNECTION_PASSWORD, password);\n\t\tp.setProperty(ConfigKeys.DATABASE_CONNECTION_DBNAME, dbName);\n\t\tp.setProperty(ConfigKeys.DATABASE_CONNECTION_ENCODING, encoding);\n\t\tp.setProperty(ConfigKeys.DATABASE_CONNECTION_PORT, port);\n\t\tp.setProperty(ConfigKeys.DATABASE_DRIVER_NAME, type);\n\n\t\tFileOutputStream fos = null;\n\t\t\n\t\ttry {\n\t\t\tfos = new FileOutputStream(dbConfigFilePath);\n\t\t\tp.store(fos, null);\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tlogger.warn(\"Error while trying to write to \" + type + \".properties: \" + e);\n\t\t}\n\t\tfinally {\n\t\t\tif (fos != null) {\n\t\t\t\ttry {\n\t\t\t\t\tfos.close();\n\t\t\t\t}\n\t\t\t\tcatch (IOException e) { }\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Proceed to SystemGlobals / jforum-custom.conf configuration\n\t\tfor (Enumeration e = p.keys(); e.hasMoreElements(); ) {\n\t\t\tString key = (String)e.nextElement();\n\t\t\tString value = p.getProperty(key);\n\t\t\t\n\t\t\tSystemGlobals.setValue(key, value);\n\t\t\t\n\t\t\tlogger.info(\"Updating key \" + key + \" with value \" + value);\n\t\t}\n\t}\n\t\n\tprivate Connection configureDatabase()\n\t{\n\t\tString database = this.getFromSession(\"database\");\n\t\tString connectionType = this.getFromSession(\"db_connection_type\");\n\t\tString implementation;\n\t\t\n\t\tboolean isDatasource = false;\n\t\t\n\t\tif (\"JDBC\".equals(connectionType)) {\n\t\t\timplementation = \"yes\".equals(this.getFromSession(\"usePool\")) && !\"hsqldb\".equals(database) \n\t\t\t\t? POOLED_CONNECTION\n                : SIMPLE_CONNECTION;\n\t\t\t\n\t\t\tthis.configureJDBCConnection();\n\t\t}\n\t\telse {\n\t\t\tisDatasource = true;\n\t\t\timplementation = DATASOURCE_CONNECTION;\n\t\t\tSystemGlobals.setValue(ConfigKeys.DATABASE_DATASOURCE_NAME, this.getFromSession(\"dbdatasource\"));\n\t\t}\n\t\t\n\t\tSystemGlobals.setValue(ConfigKeys.DATABASE_CONNECTION_IMPLEMENTATION, implementation);\n\t\tSystemGlobals.setValue(ConfigKeys.DATABASE_DRIVER_NAME, database);\n\t\t\n\t\tSystemGlobals.saveInstallation();\n\t\tthis.restartSystemGlobals();\n\t\t\n\t\tint fileChangesDelay = SystemGlobals.getIntValue(ConfigKeys.FILECHANGES_DELAY);\n\t\t\n\t\tif (fileChangesDelay > 0) {\n\t\t\tFileMonitor.getInstance().addFileChangeListener(new SystemGlobalsListener(),\n\t\t\t\tSystemGlobals.getValue(ConfigKeys.INSTALLATION_CONFIG), fileChangesDelay);\n\t\t}\n\t\t\n\t\tConnection conn;\n\t\ttry {\n\t\t\tDBConnection s;\n\t\t\t\n\t\t\tif (!isDatasource) { \n\t\t\t\ts = new SimpleConnection();\n\t\t\t}\n\t\t\telse {\n\t\t\t\ts =  new DataSourceConnection();\n\t\t\t}\n\t\t\t\n\t\t\ts.init();\n\t\t\t\n\t\t\tconn = s.getConnection();\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tlogger.warn(\"Error while trying to get a connection: \" + e);\n\t\t\tthis.context.put(\"exceptionMessage\", e.getMessage());\n\t\t\treturn null;\n\t\t}\n\t\t\n\t\treturn conn;\n\t}\n\t\n\tprivate void restartSystemGlobals() \n\t{\n\t\tString appPath = SystemGlobals.getApplicationPath();\n\t\t\n\t\tSystemGlobals.reset();\n\t\t\n\t\tConfigLoader.startSystemglobals(appPath);\n\t}\n\t\n\tprivate boolean updateAdminPassword(Connection conn)\n\t{\n\t\tlogger.info(\"Going to update the administrator's password\");\n\t\t\n\t\tboolean status = false;\n\t\t\n        PreparedStatement p = null;\n        \n\t\ttry {\n            p = conn.prepareStatement(\"UPDATE jforum_users SET user_password = ? WHERE username = 'Admin'\");\n            p.setString(1, MD5.crypt(this.getFromSession(\"adminPassword\")));\n\t\t\tp.executeUpdate();\n\t\t\tstatus = true;\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tlogger.warn(\"Error while trying to update the administrator's password: \" + e);\n\t\t\tthis.context.put(\"exceptionMessage\", e.getMessage());\n\t\t}\n        finally {\n            DbUtils.close(p);\n        }",
  "metadata": {
    "fileId": "InstallAction_java_chunk_3",
    "fileName": "InstallAction.java",
    "filePath": "src/net/jforum/view/install/InstallAction.java"
  }
}