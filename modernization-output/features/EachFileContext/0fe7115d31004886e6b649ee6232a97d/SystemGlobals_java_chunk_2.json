{
  "pageContent": "File Path: src/net/jforum/util/preferences/SystemGlobals.java\n\n Original Content: public class SystemGlobals implements VariableStore\n{\n\tprivate static SystemGlobals globals = new SystemGlobals();\n\n\tprivate String defaultConfig;\n\tprivate String installationConfig;\n\n\tprivate Properties defaults = new Properties();\n\tprivate Properties installation = new Properties();\n\tprivate Map objectProperties = new HashMap();\n\tprivate static List additionalDefaultsList = new ArrayList();\n\tprivate static Properties queries = new Properties();\n\tprivate static Properties transientValues = new Properties();\n\n\tprivate VariableExpander expander = new VariableExpander(this, \"${\", \"}\");\n\t\n\tprivate static final Logger logger = Logger.getLogger(SystemGlobals.class);\n\t\n\tprivate SystemGlobals() {}\n\n\t/**\n\t * Initialize the global configuration\n\t * @param appPath The application path (normally the path to the webapp base dir\n\t * @param mainConfigurationFile The file containing system defaults (when null, defaults to <appPath>/WEB-INF/config/default.conf)\n\t */\n\tpublic static void initGlobals(String appPath, String mainConfigurationFile)\n\t{\n\t\tglobals = new SystemGlobals();\n\t\tglobals.buildSystem(appPath, mainConfigurationFile);\n\t}\n\t\n\tpublic static void reset()\n\t{\n\t\tglobals.defaults.clear();\n\t\tglobals.installation.clear();\n\t\tadditionalDefaultsList.clear();\n\t\tqueries.clear();\n\t\ttransientValues.clear();\n\t}\n\t\n\tprivate void buildSystem(String appPath, String mainConfigurationFile)\n\t{\n\t\tif (mainConfigurationFile == null) {\n\t\t\tthrow new InvalidParameterException(\"defaultConfig could not be null\");\n\t\t}\n\n\t\tthis.defaultConfig = mainConfigurationFile;\n\t\tthis.defaults = new Properties();\n\n\t\tthis.defaults.put(ConfigKeys.APPLICATION_PATH, appPath);\n\t\tthis.defaults.put(ConfigKeys.DEFAULT_CONFIG, mainConfigurationFile);\n\t\t\n\t\tSystemGlobals.loadDefaults();\n\t\n\t\tthis.installation = new Properties();\n\t\tthis.installationConfig = getVariableValue(ConfigKeys.INSTALLATION_CONFIG);\n\n\t\tfor (Iterator iter = additionalDefaultsList.iterator(); iter.hasNext(); ) {\n\t\t\tloadAdditionalDefaults((String)iter.next());\n\t\t}\n\t\t\n\t\tif (new File(this.installationConfig).exists()) {\n\t\t\tloadAdditionalDefaults(this.installationConfig);\n\t\t}\n\t}\n\t\n\t/**\n\t * Sets a value for some property\n\t * \n\t * @param field The property name\n\t * @param value The property value \n\t * @see #getVariableValue(String)\n\t * */\n\tpublic static void setValue(String field, String value)\n\t{\n\t\tglobals.installation.put(field, value);\n\t\tglobals.expander.clearCache();\n\t}\n\t\n\tpublic static void setObjectValue(String field, Object value)\n\t{\n\t\tglobals.objectProperties.put(field, value);\n\t}\n\t\n\tpublic static Object getObjectValue(String field)\n\t{\n\t\treturn globals.objectProperties.get(field);\n\t}\n\n\t/**\n\t * Set a transient configuration value (a value that will not be saved) \n\t * @param field The name of the configuration option\n\t * @param value The value of the configuration option\n\t */\n\tpublic static void setTransientValue(String field, String value)\n\t{\n\t\ttransientValues.put(field, value);\n\t}\n\n\t/**\n\t * Load system defaults\n\t */\n\tpublic static void loadDefaults()\n\t{\n\t\ttry\n\t\t{\n\t\t\tFileInputStream input = new FileInputStream(globals.defaultConfig);\n\t\t\tglobals.defaults.load(input);\n\t\t\tinput.close();\n\t\t\tglobals.expander.clearCache();\n\t\t}\n\t\tcatch (IOException e)\n\t\t{\n\t\t\tthrow new ForumException(e);\n\t\t}\n\t}\n\t\n\t/**\n\t * Merge additional configuration defaults\n\t * \n\t * @param file File from which to load the additional defaults\n\t */\n\tpublic static void loadAdditionalDefaults(String file)\n\t{\n\t\tif (!new File(file).exists()) {\n\t\t\tlogger.info(\"Cannot find file \" + file + \". Will ignore it\");\n\t\t\treturn;\n\t\t}\n\n\t\ttry\n\t\t{\n\t\t\tFileInputStream input = new FileInputStream(file);\n\t\t\tglobals.installation.load(input);\n\t\t\tinput.close();\n\t\t}\n\t\tcatch (IOException e)\n\t\t{\n\t\t\tthrow new ForumException(e);\n\t\t}\n\n\t\tif (!additionalDefaultsList.contains(file)) {\n\t\t\tadditionalDefaultsList.add(file);\n\t\t}\n\t}\n\n\t/**\n\t * Save installation defaults\n\t */\n\tpublic static void saveInstallation()\n\t{\n\t\t// We need this temporary \"p\" because, when\n\t\t// new FileOutputStream() is called, it will \n\t\t// raise an event to the TimerTask who is listen\n\t\t// for file modifications, which then reloads the\n\t\t// configurations from the filesystem, overwriting\n\t\t// our new keys. \n\t\tclass SortedProperties extends Properties{\n\t\t\tpublic synchronized Enumeration keys() {\n\t\t\t\tEnumeration keysEnum = super.keys();\n\t\t\t\tVector keyList = new Vector();\n\t\t\t\twhile(keysEnum.hasMoreElements()){\n\t\t\t\t\tkeyList.add(keysEnum.nextElement());\n\t\t\t\t}\n\t\t\t\tCollections.sort(keyList);\n\t\t\t\treturn keyList.elements();\n\t\t\t}\n\t\t}\n\n\t\tProperties p = new SortedProperties();\n\t\tp.putAll(globals.installation);\n\t\t\n\t\ttry {\n\t\t\tFileOutputStream out = new FileOutputStream(globals.installationConfig);\n\t\t\tp.store(out, \"Installation specific configuration options\");\n\t\t\tout.close();\n\t\t}\n\t\tcatch (IOException e) {\n\t\t\tthrow new ForumException(e);\n\t\t}\n\n\t\tConfigLoader.listenInstallationConfig();\n\t}\n\n\t/**\n\t * Gets the value of some property\n\t * \n\t * @param field The property name to retrieve the value\n\t * @return String with the value, or <code>null</code> if not found\n\t * @see #setValue(String, String)\n\t * */\n\tpublic static String getValue(String field)\n\t{\n\t\treturn globals.getVariableValue(field);\n\t}\n\t\n\tpublic static String getTransientValue(String field)\n\t{\n\t\treturn transientValues.getProperty(field);\n\t}\n\n\t/**\n\t * Retrieve an integer-valued configuration field\n\t * \n\t * @param field Name of the configuration option\n\t * @return The value of the configuration option\n\t * @exception NullPointerException when the field does not exists\n\t */\n\tpublic static int getIntValue(String field)\n\t{\n\t\treturn Integer.parseInt(getValue(field));\n\t}\n\n\t/**\n\t * Retrieve an boolean-values configuration field\n\t * \n\t * @param field name of the configuration option\n\t * @return The value of the configuration option\n\t * @exception NullPointerException when the field does not exists\n\t */\n\tpublic static boolean getBoolValue(String field)\n\t{\n\t\treturn \"true\".equals(getValue(field));\n\t}\n\n\t/**\n\t * Return the value of a configuration value as a variable. Variable expansion is performe\n\t * on the result.\n\t * \n\t * @param field The field name to retrieve\n\t * @return The value of the field if present or null if not  \n\t */\n\n\tpublic String getVariableValue(String field)\n\t{\n\t\tString preExpansion = globals.installation.getProperty(field);\n\t\t\n\t\tif (preExpansion == null) {\n\t\t\tpreExpansion = this.defaults.getProperty(field);\n\n\t\t\tif (preExpansion == null) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\n\t\treturn expander.expandVariables(preExpansion);\n\t}\n\n\t/**\n\t * Sets the application's root directory \n\t * \n\t * @param ap String containing the complete path to the root dir\n\t * @see #getApplicationPath\n\t * */\n\tpublic static void setApplicationPath(String ap)\n\t{\n\t\tsetValue(ConfigKeys.APPLICATION_PATH, ap);\n\t}\n\n\t/**\n\t * Getst the complete path to the application's root dir\n\t * \n\t * @return String with the path\n\t * @see #setApplicationPath\n\t * */\n\tpublic static String getApplicationPath()\n\t{\n\t\treturn getValue(ConfigKeys.APPLICATION_PATH);\n\t}\n\n\t/**\n\t * Gets the path to the resource's directory.\n\t * This method returns the directory name where the config\n\t * files are stored. \n\t *  Caso queira saber o caminho absoluto do diretorio, voce precisa\n\t * usar\n\t * Note that this method does not return the complete path. If you \n\t * want the full path, you must use \n\t * <blockquote><pre>SystemGlobals.getApplicationPath() + SystemGlobals.getApplicationResourcedir()</pre></blockquote>\n\t * \n\t * @return String with the name of the resource dir, relative \n\t * to application's root dir.\n\t * @see #getApplicationPath()\n\t * */\n\tpublic static String getApplicationResourceDir()\n\t{\n\t\treturn getValue(ConfigKeys.RESOURCE_DIR);\n\t}\n\n\t/**\n\t * Load the SQL queries\n\t *\n\t * @param queryFile Complete path to the SQL queries file.\n\t **/\n\tpublic static void loadQueries(String queryFile)\n\t{\n\t\tFileInputStream fis = null;\n\t\t\n\t\ttry {\n\t\t\tfis = new FileInputStream(queryFile);\n\t\t\tqueries.load(fis);\n\t\t}\n\t\tcatch (IOException e) {\n\t\t\tthrow new ForumException(e);\n\t\t}\n\t\tfinally {\n\t\t\tif (fis != null) {\n\t\t\t\ttry { fis.close(); } catch (Exception e) {}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Gets some SQL statement.\n\t * \n\t * @param sql The query's name, as defined in the file loaded by\n\t * {@link #loadQueries(String)}\n\t * @return The SQL statement, or <code>null</code> if not found.\n\t * */\n\tpublic static String getSql(String sql)\n\t{\n\t\treturn queries.getProperty(sql);\n\t}\n\n\t/**\n\t * Retrieve an iterator that iterates over all known configuration keys\n\t * \n\t * @return An iterator that iterates over all known configuration keys\n\t */\n\tpublic static Iterator fetchConfigKeyIterator()\n\t{\n\t\treturn globals.defaults.keySet().iterator();\n\t}\n\t\n\tpublic static Properties getConfigData()\n\t{\n\t\treturn new Properties(globals.defaults);\n\t}\n}",
  "metadata": {
    "fileId": "SystemGlobals_java_chunk_2",
    "fileName": "SystemGlobals.java",
    "filePath": "src/net/jforum/util/preferences/SystemGlobals.java"
  }
}