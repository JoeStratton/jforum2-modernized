{
  "pageContent": "File Path: src/net/jforum/context/RequestContext.java\n\n Original Content: public String getContextPath();\n\n\t/**\n\t * Returns the login of the user making this request, if the user has been authenticated, or\n\t * <code>null</code> if the user has not been authenticated. Whether the user name is sent\n\t * with each subsequent request depends on the browser and type of authentication. Same as the\n\t * value of the CGI variable REMOTE_USER.\n\t * \n\t * @return a <code>String</code> specifying the login of the user making this request, or\n\t * <code>null</code> if the user login is not known\n\t */\n\n\tpublic String getRemoteUser();\n\n\t/**\n\t * Gets an parameter that is a number. A call to <code>Integer#parseInt(String)</code> is made\n\t * to do the conversion\n\t * \n\t * @param parameter The parameter name to get the value\n\t * @return int\n\t */\n\tpublic int getIntParameter(String parameter);\n\n\t/**\n\t * Returns an array of <code>String</code> objects containing all of the values the given\n\t * request parameter has, or <code>null</code> if the parameter does not exist.\n\t * \n\t * <p>\n\t * If the parameter has a single value, the array has a length of 1.\n\t * \n\t * @param name a <code>String</code> containing the name of the parameter \n\t * whose value is requested\n\t * \n\t * @return an array of <code>String</code> objects containing the parameter's values\n\t * @see #getParameter\n\t */\n\tpublic String[] getParameterValues(String name);\n\n\t/**\n\t * Returns the value of a request parameter as a <code>String</code>, or <code>null</code>\n\t * if the parameter does not exist. Request parameters are extra information sent with the\n\t * request. For HTTP servlets, parameters are contained in the query string or posted form data.\n\t * \n\t * <p>\n\t * You should only use this method when you are sure the parameter has only one value. If the\n\t * parameter might have more than one value, use {@link #getParameterValues}.\n\t * \n\t * <p>\n\t * If you use this method with a multivalued parameter, the value returned is equal to the first\n\t * value in the array returned by <code>getParameterValues</code>.\n\t * \n\t * <p>\n\t * If the parameter data was sent in the request body, such as occurs with an HTTP POST request,\n\t * then reading the body directly via {@link #getInputStream} or {@link #getReader} can\n\t * interfere with the execution of this method.\n\t * \n\t * @param name a <code>String</code> specifying the name of the parameter\n\t * @return a <code>String</code> representing the single value of the parameter\n\t * @see #getParameterValues\n\t */\n\tpublic String getParameter(String name);\n\n\t/**\n\t * Returns an <code>Enumeration</code> of <code>String</code> objects containing the names\n\t * of the parameters contained in this request. If the request has no parameters, the method\n\t * returns an empty <code>Enumeration</code>.\n\t * \n\t * @return an <code>Enumeration</code> of <code>String</code> objects, each\n\t * <code>String</code> containing the name of a request parameter; or an empty\n\t * <code>Enumeration</code> if the request has no parameters\n\t */\n\tpublic Enumeration getParameterNames();\n\n\t/**\n\t * Gets the <i>action</i> of the current request.\n\t * \n\t * An <i>Action</i> is the parameter name which specifies what next action should be done by\n\t * the system. It may be add or edit a post, editing the groups, whatever. In the URL, the\n\t * Action can the represented in two forms:\n\t * <p>\n\t * <blockquote> <code>\n\t * http://www.host.com/webapp/servletName?module=groups&action=list\n\t * </code>\n\t * </blockquote>\n\t * <p>\n\t * or\n\t * <p>\n\t * <blockquote> <code>\n\t * http://www.host.com/webapp/servletName/groups/list\n\t * </code> </blockquote>\n\t * <p>\n\t * In both situations, the action's name is \"list\".\n\t * \n\t * @return String representing the action name\n\t */\n\tpublic String getAction();\n\n\t/**\n\t * Gets the <i>module</i> of the current request.\n\t * \n\t * A <i>Module</i> is the parameter name which specifies what module the user is requesting. It\n\t * may be the group administration, the topics or anything else configured module. In the URL,\n\t * the Module can the represented in two forms:\n\t * <p>\n\t * <blockquote> <code>\n\t * http://www.host.com/webapp/servletName?module=groups&action=list\n\t * </code>\n\t * </blockquote>\n\t * <p>\n\t * or\n\t * <p>\n\t * <blockquote> <code>\n\t * http://www.host.com/webapp/servletName/groups/list\n\t * </code> </blockquote>\n\t * <p>\n\t * In both situations, the module's name is \"groups\".\n\t * \n\t * @return String representing the module name\n\t */\n\tpublic String getModule();\n\n\t/**\n\t * Adds a new parameter to the request.\n\t * If there is already one parameter which name is equals to the \n\t * value of the \"name\" parameter, a set of values associated to that\n\t * name will be generated, thus requiring a call to getParameterValues()\n\t * to retrieve them all. \n\t * \n\t * If you want to <strong>replace</strong> a possible existing value, \n\t * use {@link #addOrReplaceParameter(String, Object)}\n\t * \n\t * @param name Parameter name\n\t * @param value Parameter value\n\t */\n\tpublic void addParameter(String name, Object value);\n\t\n\t/**\n\t * Replace or add a parameter. If it does not exist, it is added to the list, \n\t * otherwise the existing value will be replaced by the new value. \n\t * \n\t * @param name\n\t * @param value\n\t */\n\tpublic void addOrReplaceParameter(String name, Object value);\n\n\t/**\n\t * Gets some request parameter as <code>Object</code>. This method may be used when you have\n\t * to get some value of a <i>multipart/form-data</i> request, like a image of file. <br>\n\t * \n\t * @param parameter String\n\t * @return Object\n\t */\n\tpublic Object getObjectParameter(String parameter);\n\t\n\t/**\n\t * Gets user browser's locale. This method may be used during first installation to\n\t * automatically switch to corresponding language I18N resource.\n\t * \n\t * @return Locale\n\t */\n\tpublic Locale getLocale();\n}",
  "metadata": {
    "fileId": "RequestContext_java_chunk_3",
    "fileName": "RequestContext.java",
    "filePath": "src/net/jforum/context/RequestContext.java"
  }
}