{
  "pageContent": "File Path: src/net/jforum/context/RequestContext.java\n\n Original Content: public interface RequestContext\n{\n\t/**\n\t * Returns the part of this request's URL from the protocol name up to the query string in the\n\t * first line of the HTTP request. The web container does not decode this String. For example:\n\t * \n\t * <table summary=\"Examples of Returned Values\">\n\t * <tr align=left>\n\t * <th>First line of HTTP request </th>\n\t * <th> Returned Value</th>\n\t * <tr>\n\t * <td>POST /some/path.html HTTP/1.1\n\t * <td>\n\t * <td>/some/path.html\n\t * <tr>\n\t * <td>GET http://foo.bar/a.html HTTP/1.0\n\t * <td>\n\t * <td>/a.html\n\t * <tr>\n\t * <td>HEAD /xyz?a=b HTTP/1.1\n\t * <td>\n\t * <td>/xyz </table>\n\t * \n\t * <p>\n\t * To reconstruct an URL with a scheme and host, use\n\t * {@link javax.servlet.http.HttpUtils#getRequestURL}.\n\t * \n\t * @return a <code>String</code> containing the part of the URL from the protocol name up to\n\t *         the query string\n\t * \n\t * @see javax.servlet.http.HttpUtils#getRequestURL\n\t */\n\tpublic String getRequestURI();\n\n\t/**\n\t * Returns the query string that is contained in the request URL after the path. This method\n\t * returns <code>null</code> if the URL does not have a query string. Same as the value of the\n\t * CGI variable QUERY_STRING.\n\t * \n\t * @return a <code>String</code> containing the query string or <code>null</code> if the URL\n\t *         contains no query string. The value is not decoded by the container.\n\t */\n\tpublic String getQueryString();\n\n\t/**\n\t * Returns the value of the specified request header as a <code>String</code>. If the request\n\t * did not include a header of the specified name, this method returns <code>null</code>. If\n\t * there are multiple headers with the same name, this method returns the first head in the\n\t * request. The header name is case insensitive. You can use this method with any request\n\t * header.\n\t * \n\t * @param name\n\t *            a <code>String</code> specifying the header name\n\t * \n\t * @return a <code>String</code> containing the value of the requested header, or\n\t *         <code>null</code> if the request does not have a header of that name\n\t */\n\tpublic String getHeader(String name);\n\n\t/**\n\t * Returns an array containing all of the <code>Cookie</code> objects the client sent with\n\t * this request. This method returns <code>null</code> if no cookies were sent.\n\t * \n\t * @return an array of all the <code>Cookies</code> included with this request, or\n\t *         <code>null</code> if the request has no cookies\n\t */\n\tpublic Cookie[] getCookies();\n\n\t/**\n\t * Returns the Internet Protocol (IP) address of the client or last proxy that sent the request.\n\t * For HTTP servlets, same as the value of the CGI variable <code>REMOTE_ADDR</code>.\n\t * \n\t * @return a <code>String</code> containing the IP address of the client that sent the request\n\t */\n\tpublic String getRemoteAddr();\n\n\t/**\n\t * Returns the port number to which the request was sent. It is the value of the part after \":\"\n\t * in the <code>Host</code> header value, if any, or the server port where the client\n\t * connection was accepted on.\n\t * \n\t * @return an integer specifying the port number\n\t */\n\tpublic int getServerPort();\n\n\t/**\n\t * Returns the name of the scheme used to make this request, for example, <code>http</code>,\n\t * <code>https</code>, or <code>ftp</code>. Different schemes have different rules for\n\t * constructing URLs, as noted in RFC 1738.\n\t * \n\t * @return a <code>String</code> containing the name of the scheme used to make this request\n\t */\n\tpublic String getScheme();\n\n\t/**\n\t * Returns the host name of the server to which the request was sent. It is the value of the\n\t * part before \":\" in the <code>Host</code> header value, if any, or the resolved server name,\n\t * or the server IP address.\n\t * \n\t * @return a <code>String</code> containing the name of the server\n\t */\n\tpublic String getServerName();\n\n\t/**\n\t * Removes an attribute from this request. This method is not generally needed as attributes\n\t * only persist as long as the request is being handled.\n\t * \n\t * <p>\n\t * Attribute names should follow the same conventions as package names. Names beginning with\n\t * <code>java.*</code>, <code>javax.*</code>, and <code>com.sun.*</code>, are reserved\n\t * for use by Sun Microsystems.\n\t * \n\t * @param name a <code>String</code> specifying the name of the attribute to remove\n\t */\n\tpublic void removeAttribute(String name);\n\n\t/**\n\t * Stores an attribute in this request. Attributes are reset between requests. This method is\n\t * most often used in conjunction with {@link javax.servlet.RequestDispatcher}.\n\t * \n\t * <p>\n\t * Attribute names should follow the same conventions as package names. Names beginning with\n\t * <code>java.*</code>, <code>javax.*</code>, and <code>com.sun.*</code>, are reserved\n\t * for use by Sun Microsystems. <br>\n\t * If the object passed in is null, the effect is the same as calling {@link #removeAttribute}.\n\t * <br>\n\t * It is warned that when the request is dispatched from the servlet resides in a different web\n\t * application by <code>RequestDispatcher</code>, the object set by this method may not be\n\t * correctly retrieved in the caller servlet.\n\t * \n\t * @param name a <code>String</code> specifying the name of the attribute\n\t * @param o the <code>Object</code> to be stored\n\t */\n\tpublic void setAttribute(String name, Object o);\n\n\t/**\n\t * Returns the value of the named attribute as an <code>Object</code>, or <code>null</code>\n\t * if no attribute of the given name exists.\n\t * \n\t * <p>\n\t * Attributes can be set two ways. The servlet container may set attributes to make available\n\t * custom information about a request. For example, for requests made using HTTPS, the attribute\n\t * <code>javax.servlet.request.X509Certificate</code> can be used to retrieve information on\n\t * the certificate of the client. Attributes can also be set programatically using\n\t * {@link #setAttribute}. This allows information to be embedded into a request before a\n\t * {@link javax.servlet.RequestDispatcher} call.\n\t * \n\t * <p>\n\t * Attribute names should follow the same conventions as package names. This specification\n\t * reserves names matching <code>java.*</code>, <code>javax.*</code>, and\n\t * <code>sun.*</code>.\n\t * \n\t * @param name a <code>String</code> specifying the name of the attribute\n\t * @return an <code>Object</code> containing the value of the attribute, \n\t * or <code>null</code> if the attribute does not exist\n\t */\n\n\tpublic Object getAttribute(String name);\n\n\t/**\n\t * Overrides the name of the character encoding used in the body of this request. This method\n\t * must be called prior to reading request parameters or reading input using getReader().\n\t * \n\t * @param env a <code>String</code> containing the name of the character encoding.\n\t * @throws java.io.UnsupportedEncodingException if this is not a valid encoding\n\t */\n\n\tpublic void setCharacterEncoding(String env) throws UnsupportedEncodingException;\n\n\t/**\n\t * Returns the current <code>HttpSession</code> associated with this request or, if there is\n\t * no current session and <code>create</code> is true, returns a new session.\n\t * \n\t * <p>\n\t * If <code>create</code> is <code>false</code> and the request has no valid\n\t * <code>HttpSession</code>, this method returns <code>null</code>.\n\t * \n\t * <p>\n\t * To make sure the session is properly maintained, you must call this method before the\n\t * response is committed. If the container is using cookies to maintain session integrity and is\n\t * asked to create a new session when the response is committed, an IllegalStateException is\n\t * thrown.\n\t * \n\t * @param create <code>true</code> to create a new session for this request if necessary;\n\t * <code>false</code> to return <code>null</code> if there's no current session\n\t * @return the <code>HttpSession</code> associated with this request or <code>null</code> if\n\t * <code>create</code> is <code>false</code> and the request has no valid session\n\t * \n\t * @see #getSessionContext()\n\t */\n\n\tpublic SessionContext getSessionContext(boolean create);\n\n\t/**\n\t * Returns the current session associated with this request, or if the request does not have a\n\t * session, creates one.\n\t * \n\t * @return the <code>HttpSession</code> associated with this request\n\t * @see #getSessionContext(boolean)\n\t */\n\n\tpublic SessionContext getSessionContext();\n\n\t/**\n\t * Returns the portion of the request URI that indicates the context of the request. The context\n\t * path always comes first in a request URI. The path starts with a \"/\" character but does not\n\t * end with a \"/\" character. For servlets in the default (root) context, this method returns \"\".\n\t * The container does not decode this string.\n\t * \n\t * @return a <code>String</code> specifying the portion of the request URI that indicates the\n\t * context of the request\n\t */\n\n\tpublic String getContextPath();\n\n\t/**\n\t * Returns the login of the user making this request, if the user has been authenticated, or\n\t * <code>null</code> if the user has not been authenticated. Whether the user name is sent\n\t * with each subsequent request depends on the browser and type of authentication. Same as the\n\t * value of the CGI variable REMOTE_USER.\n\t * \n\t * @return a <code>String</code> specifying the login of the user making this request, or\n\t * <code>null</code> if the user login is not known\n\t */\n\n\tpublic String getRemoteUser();\n\n\t/**\n\t * Gets an parameter that is a number. A call to <code>Integer#parseInt(String)</code> is made\n\t * to do the conversion\n\t * \n\t * @param parameter The parameter name to get the value\n\t * @return int\n\t */\n\tpublic int getIntParameter(String parameter);",
  "metadata": {
    "fileId": "RequestContext_java_chunk_2",
    "fileName": "RequestContext.java",
    "filePath": "src/net/jforum/context/RequestContext.java"
  }
}