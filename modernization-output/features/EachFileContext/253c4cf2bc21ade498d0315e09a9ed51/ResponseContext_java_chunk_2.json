{
  "pageContent": "File Path: src/net/jforum/context/ResponseContext.java\n\n Original Content: public interface ResponseContext\n{\n\t/**\n\t * Sets the length of the content body in the response In HTTP servlets, this method sets the\n\t * HTTP Content-Length header.\n\t * \n\t * @param len an integer specifying the length of the content being returned to the client; \n\t * sets the Content-Length header\n\t */\n\tpublic void setContentLength(int len);\n\n\t/**\n\t * Returns a boolean indicating whether the named response header has already been set.\n\t * \n\t * @param name the header name\n\t * @return <code>true</code> if the named response header has already been set;\n\t * <code>false</code> otherwise\n\t */\n\tpublic boolean containsHeader(String name);\n\n\t/**\n\t * Sets a response header with the given name and value. If the header had already been set, the\n\t * new value overwrites the previous one. The <code>containsHeader</code> method can be used\n\t * to test for the presence of a header before setting its value.\n\t * \n\t * @param name the name of the header\n\t * @param value the header value If it contains octet string, it should be encoded \n\t * according to RFC 2047 (http://www.ietf.org/rfc/rfc2047.txt)\n\t * \n\t * @see #containsHeader\n\t * @see #addHeader\n\t */\n\tpublic void setHeader(String name, String value);\n\n\t/**\n\t * Adds the specified cookie to the response. This method can be called multiple times to set\n\t * more than one cookie.\n\t * \n\t * @param cookie the Cookie to return to the client\n\t */\n\tpublic void addCookie(Cookie cookie);\n\n\t/**\n\t * Encodes the specified URL for use in the <code>sendRedirect</code> method or, if encoding\n\t * is not needed, returns the URL unchanged. The implementation of this method includes the\n\t * logic to determine whether the session ID needs to be encoded in the URL. Because the rules\n\t * for making this determination can differ from those used to decide whether to encode a normal\n\t * link, this method is separated from the <code>encodeURL</code> method.\n\t * \n\t * <p>\n\t * All URLs sent to the <code>HttpServletResponse.sendRedirect</code> method should be run\n\t * through this method. Otherwise, URL rewriting cannot be used with browsers which do not\n\t * support cookies.\n\t * \n\t * @param url the url to be encoded.\n\t * @return the encoded URL if encoding is needed; the unchanged URL otherwise.\n\t * \n\t * @see #sendRedirect\n\t * @see #encodeUrl\n\t */\n\tpublic String encodeRedirectURL(String url);\n\n\t/**\n\t * Returns the name of the character encoding (MIME charset) used for the body sent in this\n\t * response. The character encoding may have been specified explicitly using the\n\t * {@link #setCharacterEncoding} or {@link #setContentType} methods, or implicitly using the\n\t * {@link #setLocale} method. Explicit specifications take precedence over implicit\n\t * specifications. Calls made to these methods after <code>getWriter</code> has been called or\n\t * after the response has been committed have no effect on the character encoding. If no\n\t * character encoding has been specified, <code>ISO-8859-1</code> is returned.\n\t * <p>\n\t * See RFC 2047 (http://www.ietf.org/rfc/rfc2047.txt) for more information about character\n\t * encoding and MIME.\n\t * \n\t * @return a <code>String</code> specifying the name of the character encoding, for example,\n\t * <code>UTF-8</code>\n\t * \n\t */\n\tpublic String getCharacterEncoding();\n\n\t/**\n\t * Sends a temporary redirect response to the client using the specified redirect location URL.\n\t * This method can accept relative URLs; the servlet container must convert the relative URL to\n\t * an absolute URL before sending the response to the client. If the location is relative\n\t * without a leading '/' the container interprets it as relative to the current request URI. If\n\t * the location is relative with a leading '/' the container interprets it as relative to the\n\t * servlet container root.\n\t * \n\t * <p>\n\t * If the response has already been committed, this method throws an IllegalStateException.\n\t * After using this method, the response should be considered to be committed and should not be\n\t * written to.\n\t * \n\t * @param location the redirect location URL\n\t * @exception IOException If an input or output exception occurs\n\t * @exception IllegalStateException If the response was committed or if a partial \n\t * URL is given and cannot be converted into a valid URL\n\t */\n\tpublic void sendRedirect(String location) throws IOException;\n\n\t/**\n\t * Returns a {@link javax.servlet.ServletOutputStream} suitable for writing binary data in the\n\t * response. The servlet container does not encode the binary data.\n\t * \n\t * <p>\n\t * Calling flush() on the ServletOutputStream commits the response.\n\t * \n\t * Either this method or {@link #getWriter} may be called to write the body, not both.\n\t * \n\t * @return a {@link javax.servlet.ServletOutputStream} for writing binary data\n\t * @exception IllegalStateException if the <code>getWriter</code> method has \n\t * been called on this response\n\t * @exception IOException if an input or output exception occurred\n\t * @see #getWriter\n\t */\n\n\tpublic ServletOutputStream getOutputStream() throws IOException;\n\n\t/**\n\t * Returns a <code>PrintWriter</code> object that can send character text to the client. The\n\t * <code>PrintWriter</code> uses the character encoding returned by\n\t * {@link #getCharacterEncoding}. If the response's character encoding has not been specified\n\t * as described in <code>getCharacterEncoding</code> (i.e., the method just returns the\n\t * default value <code>ISO-8859-1</code>), <code>getWriter</code> updates it to\n\t * <code>ISO-8859-1</code>.\n\t * <p>\n\t * Calling flush() on the <code>PrintWriter</code> commits the response.\n\t * <p>\n\t * Either this method or {@link #getOutputStream} may be called to write the body, not both.\n\t * \n\t * @return a <code>PrintWriter</code> object that can return character data to the client\n\t * \n\t * @exception java.io.UnsupportedEncodingException if the character encoding \n\t * returned by <code>getCharacterEncoding</code> cannot be used\n\t * @exception IllegalStateException if the <code>getOutputStream</code> method has \n\t * already been called for this response object\n\t * @exception IOException if an input or output exception occurred\n\t * \n\t * @see #getOutputStream\n\t * @see #setCharacterEncoding\n\t * \n\t */\n\tpublic PrintWriter getWriter() throws IOException;\n\n\t/**\n\t * Sets the content type of the response being sent to the client, if the response has not been\n\t * committed yet. The given content type may include a character encoding specification, for\n\t * example, <code>text/html;charset=UTF-8</code>. The response's character encoding is only\n\t * set from the given content type if this method is called before <code>getWriter</code> is\n\t * called.\n\t * <p>\n\t * This method may be called repeatedly to change content type and character encoding. This\n\t * method has no effect if called after the response has been committed. It does not set the\n\t * response's character encoding if it is called after <code>getWriter</code> has been called\n\t * or after the response has been committed.\n\t * <p>\n\t * Containers must communicate the content type and the character encoding used for the servlet\n\t * response's writer to the client if the protocol provides a way for doing so. In the case of\n\t * HTTP, the <code>Content-Type</code> header is used.\n\t * \n\t * @param type a <code>String</code> specifying the MIME type of the content\n\t * \n\t * @see #setLocale\n\t * @see #setCharacterEncoding\n\t * @see #getOutputStream\n\t * @see #getWriter\n\t */\n\tpublic void setContentType(String type);\n\n\t/**\n\t * Encodes the specified URL by including the session ID in it, or, if encoding is not needed,\n\t * returns the URL unchanged. The implementation of this method includes the logic to determine\n\t * whether the session ID needs to be encoded in the URL. For example, if the browser supports\n\t * cookies, or session tracking is turned off, URL encoding is unnecessary.\n\t * \n\t * <p>\n\t * For robust session tracking, all URLs emitted by a servlet should be run through this method.\n\t * Otherwise, URL rewriting cannot be used with browsers which do not support cookies.\n\t * \n\t * @param url the url to be encoded.\n\t * @return the encoded URL if encoding is needed; the unchanged URL otherwise.\n\t */\n\tpublic String encodeURL(String url);\n\n\t/**\n\t * Adds a response header with the given name and value. This method allows response headers to\n\t * have multiple values.\n\t * \n\t * @param name the name of the header\n\t * @param value the additional header value If it contains octet string, \n\t * it should be encoded according to RFC 2047 (http://www.ietf.org/rfc/rfc2047.txt)\n\t */\n\tpublic void addHeader(String name, String value);\n\n\t/**\n\t * Sends an error response to the client using the specified status code and clearing the\n\t * buffer.\n\t * <p>\n\t * If the response has already been committed, this method throws an IllegalStateException.\n\t * After using this method, the response should be considered to be committed and should not be\n\t * written to.\n\t * \n\t * @param sc the error status code\n\t * @exception java.io.IOException If an input or output exception occurs\n\t * @exception IllegalStateException If the response was committed before this method call\n\t */\n\tpublic void sendError(int sc) throws IOException;\n}",
  "metadata": {
    "fileId": "ResponseContext_java_chunk_2",
    "fileName": "ResponseContext.java",
    "filePath": "src/net/jforum/context/ResponseContext.java"
  }
}