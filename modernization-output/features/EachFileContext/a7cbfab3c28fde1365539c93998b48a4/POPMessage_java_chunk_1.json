{
  "pageContent": "File Path: src/net/jforum/api/integration/mail/pop/POPMessage.java\n\n Original Content: /*\n * Created on 21/08/2006 22:14:04\n */\npackage net.jforum.api.integration.mail.pop;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.util.Date;\nimport java.util.Enumeration;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport javax.mail.Header;\nimport javax.mail.Message;\nimport javax.mail.MessagingException;\nimport javax.mail.Multipart;\nimport javax.mail.Part;\nimport javax.mail.internet.InternetAddress;\n\nimport net.jforum.exceptions.MailException;\n\n/**\n * Represents a pop message. \n * @author Rafael Steil\n * @version $Id: POPMessage.java,v 1.6 2006/10/09 00:54:08 rafaelsteil Exp $\n */\npublic class POPMessage\n{\n\tprivate static final String IN_REPLY_TO = \"In-Reply-To\";\n\tprivate static final String REFERENCES = \"References\";\n\t\n\tprivate String subject;\n\tprivate Object message;\n\tprivate String messageContents;\n\tprivate String sender;\n\tprivate String replyTo;\n\tprivate String references;\n\tprivate String inReplyTo;\n\tprivate String contentType;\n\tprivate String listEmail;\n\tprivate Date sendDate;\n\tprivate Map headers;\n\t\n\t/**\n\t * Creates a new instance based on a {@link Message}\n\t * @param message the message to convert from.\n\t */\n\tpublic POPMessage(Message message)\n\t{\n\t\tthis.extract(message);\n\t}\n\t\n\t/**\n\t * Given a {@link Message}, converts it to our internal format\n\t * @param message the message to convert\n\t */\n\tprivate void extract(Message message)\n\t{\n\t\ttry {\n\t\t\tthis.subject = message.getSubject();\n\t\t\t\n\t\t\tthis.message = message.getContent();\n\t\t\tthis.contentType = message.getContentType();\n\t\t\tthis.sender = ((InternetAddress)message.getFrom()[0]).getAddress();\n\t\t\tthis.listEmail = ((InternetAddress)message.getAllRecipients()[0]).getAddress();\n\t\t\tthis.sendDate = message.getSentDate();\n\t\t\t\t\n\t\t\tif (message.getReplyTo().length > 0) {\n\t\t\t\tthis.replyTo = ((InternetAddress)message.getReplyTo()[0]).getAddress();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.replyTo = this.sender;\n\t\t\t}\n\t\t\t\n\t\t\tthis.headers = new HashMap();\n\t\t\t\n\t\t\tfor (Enumeration e = message.getAllHeaders(); e.hasMoreElements(); ) {\n\t\t\t\tHeader header = (Header)e.nextElement();\n\t\t\t\tthis.headers.put(header.getName(), header.getValue());\n\t\t\t}\n\t\t\t\n\t\t\tif (this.headers.containsKey(IN_REPLY_TO)) {\n\t\t\t\tthis.inReplyTo = this.headers.get(IN_REPLY_TO).toString();\n\t\t\t}\n\t\t\t\n\t\t\tif (this.headers.containsKey(REFERENCES)) {\n\t\t\t\tthis.references = this.headers.get(REFERENCES).toString();\n\t\t\t}\n\t\t\t\n\t\t\tthis.extractMessageContents(message);\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\t\n\t\t}\n\t}\n\t\n\tprivate void extractMessageContents(Message m) throws MessagingException\n\t{\n\t\tPart messagePart = m;\n\t\t\n\t\tif (this.message instanceof Multipart) {\n\t\t\tmessagePart = ((Multipart)this.message).getBodyPart(0);\n\t\t}\n\t\t\n\t\tif (contentType.startsWith(\"text/html\")\n\t\t\t|| contentType.startsWith(\"text/plain\")) {\n\t\t\tInputStream is = null;\n\t\t\tBufferedReader reader = null;\n\t\t\t\n\t\t\ttry {\n\t\t\t\tis = messagePart.getInputStream();\n\t\t\t\tis.reset();\n\t\t\t\treader = new BufferedReader(\n\t\t\t\t\tnew InputStreamReader(is));\n\t\t\t\t\n\t\t\t\tStringBuffer sb = new StringBuffer(512);\n\t\t\t\tint c = 0;\n\t\t\t\tchar[] ch = new char[2048];\n\t\t\t\t\n\t\t\t\twhile ((c = reader.read(ch)) != -1) {\n\t\t\t\t\tsb.append(ch, 0, c);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.messageContents = sb.toString();\n\t\t\t}\n\t\t\tcatch (IOException e) {\n\t\t\t\tthrow new MailException(e);\n\t\t\t}\n\t\t\tfinally {\n\t\t\t\tif (reader != null) { try { reader.close(); } catch (Exception e) {} }\n\t\t\t\tif (is != null) { try { is.close(); } catch (Exception e) {} }\n\t\t\t}\n\t\t}\n\t}\n\t\n\tpublic String getListEmail()\n\t{\n\t\treturn this.listEmail;\n\t}\n\n\t/**\n\t * @return the contentType\n\t */\n\tpublic String getContentType()\n\t{\n\t\treturn this.contentType;\n\t}\n\n\t/**\n\t * @return the headers\n\t */\n\tpublic Map getHeaders()\n\t{\n\t\treturn this.headers;\n\t}\n\n\t/**\n\t * @return the inReplyTo\n\t */\n\tpublic String getInReplyTo()\n\t{\n\t\treturn this.inReplyTo;\n\t}\n\n\t/**\n\t * @return the message\n\t */\n\tpublic String getMessage()\n\t{\n\t\treturn this.messageContents;\n\t}\n\n\t/**\n\t * @return the references\n\t */\n\tpublic String getReferences()\n\t{\n\t\treturn this.references;\n\t}\n\n\t/**\n\t * @return the replyTo\n\t */\n\tpublic String getReplyTo()\n\t{\n\t\treturn this.replyTo;\n\t}\n\n\t/**\n\t * @return the sendDate\n\t */\n\tpublic Date getSendDate()\n\t{\n\t\treturn this.sendDate;\n\t}\n\n\t/**\n\t * @return the sender\n\t */\n\tpublic String getSender()\n\t{\n\t\treturn this.sender;\n\t}\n\n\t/**\n\t * @return the subject\n\t */\n\tpublic String getSubject()\n\t{\n\t\treturn this.subject;\n\t}\n\n\t/**\n\t * @param contentType the contentType to set\n\t */\n\tpublic void setContentType(String contentType)\n\t{\n\t\tthis.contentType = contentType;\n\t}\n\n\t/**\n\t * @param headers the headers to set\n\t */\n\tpublic void setHeaders(Map headers)\n\t{\n\t\tthis.headers = headers;\n\t}\n\n\t/**\n\t * @param inReplyTo the inReplyTo to set\n\t */\n\tpublic void setInReplyTo(String inReplyTo)\n\t{\n\t\tthis.inReplyTo = inReplyTo;\n\t}\n\n\t/**\n\t * @param message the message to set\n\t */\n\tpublic void setMessage(Object message)\n\t{\n\t\tthis.message = message;\n\t}\n\n\t/**\n\t * @param references the references to set\n\t */\n\tpublic void setReferences(String references)\n\t{\n\t\tthis.references = references;\n\t}\n\n\t/**\n\t * @param replyTo the replyTo to set\n\t */\n\tpublic void setReplyTo(String replyTo)\n\t{\n\t\tthis.replyTo = replyTo;\n\t}\n\n\t/**\n\t * @param sendDate the sendDate to set\n\t */\n\tpublic void setSendDate(Date sendDate)\n\t{\n\t\tthis.sendDate = sendDate;\n\t}\n\n\t/**\n\t * @param sender the sender to set\n\t */\n\tpublic void setSender(String sender)\n\t{\n\t\tthis.sender = sender;\n\t}\n\n\t/**\n\t * @param subject the subject to set\n\t */\n\tpublic void setSubject(String subject)\n\t{\n\t\tthis.subject = subject;\n\t}\n\t\n\t/**\n\t * @see java.lang.Object#toString()\n\t */\n\tpublic String toString()\n\t{\n\t\treturn new StringBuffer()\n\t\t\t.append('[')\n\t\t\t.append(\", subject=\").append(this.subject)\n\t\t\t.append(\", sender=\").append(this.sender)\n\t\t\t.append(\", replyTo=\").append(this.replyTo)\n\t\t\t.append(\", references=\").append(this.references)\n\t\t\t.append(\", inReplyTo=\").append(this.inReplyTo)\n\t\t\t.append(\", contentType=\").append(this.contentType)\n\t\t\t.append(\", date=\").append(this.sendDate)\n\t\t\t.append(\", content=\").append(this.messageContents)\n\t\t\t.append(\", headers=\").append(this.headers)\n\t\t\t.append(']')\n\t\t\t.toString();\n\t}\n}",
  "metadata": {
    "fileId": "POPMessage_java_chunk_1",
    "fileName": "POPMessage.java",
    "filePath": "src/net/jforum/api/integration/mail/pop/POPMessage.java"
  }
}