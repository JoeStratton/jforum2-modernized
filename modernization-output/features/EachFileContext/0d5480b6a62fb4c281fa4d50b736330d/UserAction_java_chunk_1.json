{
  "pageContent": "File Path: src/net/jforum/view/admin/UserAction.java\n\n Original Content: /*\n * Copyright (c) JForum Team\n * All rights reserved.\n * \n * Redistribution and use in source and binary forms, \n * with or without modification, are permitted provided \n * that the following conditions are met:\n * \n * 1) Redistributions of source code must retain the above \n * copyright notice, this list of conditions and the \n * following  disclaimer.\n * 2)  Redistributions in binary form must reproduce the \n * above copyright notice, this list of conditions and \n * the following disclaimer in the documentation and/or \n * other materials provided with the distribution.\n * 3) Neither the name of \"Rafael Steil\" nor \n * the names of its contributors may be used to endorse \n * or promote products derived from this software without \n * specific prior written permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT \n * HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY \n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, \n * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF \n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR \n * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL \n * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE \n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, \n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES \n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF \n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, \n * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER \n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER \n * IN CONTRACT, STRICT LIABILITY, OR TORT \n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN \n * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF \n * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE\n * \n * This file creation date: Apr 19, 2003 / 9:13:16 PM\n * The JForum Project\n * http://www.jforum.net\n */\npackage net.jforum.view.admin;\n\nimport java.util.ArrayList;\nimport java.util.Iterator;\nimport java.util.List;\n\nimport net.jforum.SessionFacade;\nimport net.jforum.dao.DataAccessDriver;\nimport net.jforum.dao.GroupDAO;\nimport net.jforum.dao.UserDAO;\nimport net.jforum.entities.Group;\nimport net.jforum.entities.User;\nimport net.jforum.repository.SecurityRepository;\nimport net.jforum.util.I18n;\nimport net.jforum.util.TreeGroup;\nimport net.jforum.util.preferences.ConfigKeys;\nimport net.jforum.util.preferences.SystemGlobals;\nimport net.jforum.util.preferences.TemplateKeys;\nimport net.jforum.view.forum.common.UserCommon;\nimport net.jforum.view.forum.common.ViewCommon;\n\n/**\n * @author Rafael Steil\n * @version $Id: UserAction.java,v 1.35 2007/09/21 17:29:30 rafaelsteil Exp $\n */\npublic class UserAction extends AdminCommand \n{\n\tpublic void list()\n\t{\n\t\tint start = this.preparePagination(DataAccessDriver.getInstance().newUserDAO().getTotalUsers());\n\t\tint usersPerPage = SystemGlobals.getIntValue(ConfigKeys.USERS_PER_PAGE);\n\t\t\n\t\tthis.context.put(\"users\", DataAccessDriver.getInstance().newUserDAO().selectAll(start ,usersPerPage));\n\t\tthis.commonData();\n\t}\n\t\n\tpublic void pendingActivations()\n\t{\n\t\tUserDAO dao = DataAccessDriver.getInstance().newUserDAO();\n\t\tList users = dao.pendingActivations();\n\t\t\n\t\tthis.setTemplateName(TemplateKeys.USER_ADMIN_PENDING_ACTIVATIONS);\n\t\tthis.context.put(\"users\", users);\n\t}\n\t\n\tpublic void activateAccount()\n\t{\n\t\tString[] ids = this.request.getParameterValues(\"user_id\");\n\t\t\n\t\tif (ids != null) {\n\t\t\tUserDAO dao = DataAccessDriver.getInstance().newUserDAO();\n\t\t\t\n\t\t\tfor (int i = 0; i < ids.length; i++) {\n\t\t\t\tint userId = Integer.parseInt(ids[i]);\n\t\t\t\tdao.writeUserActive(userId);\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.pendingActivations();\n\t}\n\t\n\tprivate int preparePagination(int totalUsers)\n\t{\n\t\tint start = ViewCommon.getStartPage();\n\t\tint usersPerPage = SystemGlobals.getIntValue(ConfigKeys.USERS_PER_PAGE);\n\t\t\n\t\tViewCommon.contextToPagination(start, totalUsers, usersPerPage);\n\t\t\n\t\treturn start;\n\t}\n\t\n\tprivate void commonData()\n\t{\n\t\tthis.context.put(\"selectedList\", new ArrayList());\n\t\tthis.context.put(\"groups\", new TreeGroup().getNodes());\n\t\tthis.setTemplateName(TemplateKeys.USER_ADMIN_COMMON);\n\t\tthis.context.put(\"searchAction\", \"list\");\n\t\tthis.context.put(\"searchId\", new Integer(-1));\n\t}\n\t\n\tpublic void groupSearch()\n\t{\n\t\tfinal int groupId = this.request.getIntParameter(\"group_id\");\n\t\tif (groupId == 0) {\n\t\t\tthis.list();\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tUserDAO um = DataAccessDriver.getInstance().newUserDAO();\n\t\t\n\t\tint start = this.preparePagination(um.getTotalUsersByGroup(groupId));\n\t\tint usersPerPage = SystemGlobals.getIntValue(ConfigKeys.USERS_PER_PAGE);\n\t\t\n\t\tthis.commonData();\n\t\t\n\t\tList l = new ArrayList();\n\t\tl.add(new Integer(groupId));\n\t\t\n\t\tthis.context.put(\"selectedList\", l);\n\t\tthis.context.put(\"searchAction\", \"groupSearch\");\n\t\tthis.context.put(\"users\", um.selectAllByGroup(groupId, start, usersPerPage));\n\t\tthis.context.put(\"searchId\", new Integer(groupId));\n\t}\n\t\n\tpublic void search()\n\t{\n\t\tString search = this.request.getParameter(\"username\");\n\t\tString group = this.request.getParameter(\"group\");\n\t\t\n\t\tif (search != null && !\"\".equals(search)) {\n            List users;\n\t\t\tusers = DataAccessDriver.getInstance().newUserDAO().findByName(search, false);\n\t\t\t\n\t\t\tthis.commonData();\n\t\t\t\n\t\t\tthis.context.put(\"users\", users);\n\t\t\tthis.context.put(\"search\", search);\n\t\t\tthis.context.put(\"start\", new Integer(1));\n\t\t}\n\t\telse if (!\"0\".equals(group)) {\n\t\t\tthis.groupSearch();\n\t\t}\n\t\telse {\n\t\t\tthis.list();\n\t\t}\n\t}\n\t\n\tpublic void edit()\n\t{\n\t\tint userId = this.request.getIntParameter(\"id\");\t\n\t\tUserDAO um = DataAccessDriver.getInstance().newUserDAO();\n\t\tUser u = um.selectById(userId);\n\t\t\n\t\tthis.setTemplateName(TemplateKeys.USER_ADMIN_EDIT);\n\t\tthis.context.put(\"u\", u);\n\t\tthis.context.put(\"action\", \"editSave\");\t\t\n\t\tthis.context.put(\"specialRanks\", DataAccessDriver.getInstance().newRankingDAO().selectSpecials());\n\t\tthis.context.put(\"avatarAllowExternalUrl\", SystemGlobals.getBoolValue(ConfigKeys.AVATAR_ALLOW_EXTERNAL_URL));\n\t\tthis.context.put(\"admin\", true);\n\t}\n\t\n\tpublic void editSave() \n\t{\n\t\tint userId = this.request.getIntParameter(\"user_id\");\n\t\tUserCommon.saveUser(userId);\n\n\t\tthis.list();\n\t}\n\n\t// Delete\n\tpublic void delete()\n\t{\n\t\tString ids[] = this.request.getParameterValues(\"user_id\");\n\t\tUserDAO um = DataAccessDriver.getInstance().newUserDAO();\n\t\t\n\t\tif (ids != null) {\n\t\t\tfor (int i = 0; i < ids.length; i++) {\n\t\t\t\t\n\t\t\t\tint user = Integer.parseInt(ids[i]);\n\t\t\t\t\n\t\t\t\tif (um.isDeleted(user)){\n\t\t\t\t\tum.undelete(user);\n\t\t\t\t} \n\t\t\t\telse {\n\t\t\t\t\tString sessionId = SessionFacade.isUserInSession(user);\n\t\t\t\t\t\n\t\t\t\t\tif (sessionId != null) {\n\t\t\t\t\t\tSessionFacade.remove(sessionId);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tum.delete(user);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.list();\n\t}\n\t\n\t// Groups\n\tpublic void groups()\n\t{\n\t\tint userId = this.request.getIntParameter(\"id\");\n\t\t\n\t\tUserDAO um = DataAccessDriver.getInstance().newUserDAO();\n\t\tUser u = um.selectById(userId);\n\t\t\n\t\tList selectedList = new ArrayList();\n\t\tfor (Iterator iter = u.getGroupsList().iterator(); iter.hasNext(); ) {\n\t\t\tselectedList.add(new Integer(((Group)iter.next()).getId()));\n\t\t}\n\t\t\n\t\tthis.context.put(\"selectedList\", selectedList);\n\t\tthis.context.put(\"groups\", new TreeGroup().getNodes());\n\t\tthis.context.put(\"user\", u);\n\t\tthis.context.put(\"userId\", new Integer(userId));\n\t\tthis.setTemplateName(TemplateKeys.USER_ADMIN_GROUPS);\n\t\tthis.context.put(\"groupFor\", I18n.getMessage(\"User.GroupsFor\", new String[] { u.getUsername() }));\n\t}\n\t\n\t// Groups Save\n\tpublic void groupsSave()\n\t{\n\t\tint userId = this.request.getIntParameter(\"user_id\");\n\t\t\n\t\tUserDAO um = DataAccessDriver.getInstance().newUserDAO();\n\t\tGroupDAO gm = DataAccessDriver.getInstance().newGroupDAO();\n\t\t\n\t\t// Remove the old groups\n\t\tList allGroupsList = gm.selectAll();\n\t\tint[] allGroups = new int[allGroupsList.size()];\n\t\t\n\t\tint counter = 0;\n\t\tfor (Iterator iter = allGroupsList.iterator(); iter.hasNext(); counter++) {\n\t\t\tGroup g = (Group)iter.next();\n\t\t\t\n\t\t\tallGroups[counter] = g.getId();\n\t\t}\n\t\t\n\t\tum.removeFromGroup(userId, allGroups);\n\t\t\n\t\t// Associate the user to the selected groups\n\t\tString[] selectedGroups = this.request.getParameterValues(\"groups\");\n\t\t\n\t\tif(selectedGroups == null) {\n\t\t\tselectedGroups = new String[0]; \n\t\t}\n\t\t\n\t\tint[] newGroups = new int[selectedGroups.length];\n\t\t\n\t\tfor (int i = 0; i < selectedGroups.length; i++) {\n\t\t\tnewGroups[i] = Integer.parseInt(selectedGroups[i]);\n\t\t}\n\t\t\n\t\tum.addToGroup(userId, newGroups);\n\t\tSecurityRepository.remove(userId);\n\t\t\n\t\tthis.list();\n\t}\n}",
  "metadata": {
    "fileId": "UserAction_java_chunk_1",
    "fileName": "UserAction.java",
    "filePath": "src/net/jforum/view/admin/UserAction.java"
  }
}