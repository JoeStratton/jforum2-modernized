{
  "pageContent": "File Path: src/net/jforum/view/admin/LuceneStatsAction.java\n\n Original Content: /*\n * Copyright (c) JForum Team\n * All rights reserved.\n * \n * Redistribution and use in source and binary forms, \n * with or without modification, are permitted provided \n * that the following conditions are met:\n * \n * 1) Redistributions of source code must retain the above \n * copyright notice, this list of conditions and the \n * following  disclaimer.\n * 2)  Redistributions in binary form must reproduce the \n * above copyright notice, this list of conditions and \n * the following disclaimer in the documentation and/or \n * other materials provided with the distribution.\n * 3) Neither the name of \"Rafael Steil\" nor \n * the names of its contributors may be used to endorse \n * or promote products derived from this software without \n * specific prior written permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT \n * HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY \n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, \n * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF \n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR \n * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL \n * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE \n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, \n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES \n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF \n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, \n * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER \n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER \n * IN CONTRACT, STRICT LIABILITY, OR TORT \n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN \n * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF \n * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE\n * \n * Created on 23/07/2007 15:14:27\n * \n * The JForum Project\n * http://www.jforum.net\n */\npackage net.jforum.view.admin;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.Date;\nimport java.util.GregorianCalendar;\n\nimport net.jforum.context.RequestContext;\nimport net.jforum.context.ResponseContext;\nimport net.jforum.exceptions.ForumException;\nimport net.jforum.repository.ForumRepository;\nimport net.jforum.search.LuceneManager;\nimport net.jforum.search.LuceneReindexArgs;\nimport net.jforum.search.LuceneReindexer;\nimport net.jforum.search.LuceneSettings;\nimport net.jforum.util.preferences.ConfigKeys;\nimport net.jforum.util.preferences.SystemGlobals;\nimport net.jforum.util.preferences.TemplateKeys;\n\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.lucene.index.IndexReader;\n\nimport freemarker.template.SimpleHash;\nimport freemarker.template.Template;\n\n/**\n * @author Rafael Steil\n * @version $Id: LuceneStatsAction.java,v 1.24 2007/09/09 16:43:55 rafaelsteil Exp $\n */\npublic class LuceneStatsAction extends AdminCommand\n{\n\t/**\n\t * @see net.jforum.Command#list()\n\t */\n\tpublic void list()\n\t{\n\t\tIndexReader reader = null;\n\t\t\n\t\ttry {\n\t\t\tFile indexDir = new File(SystemGlobals.getValue(ConfigKeys.LUCENE_INDEX_WRITE_PATH));\n\t\t\t\n\t\t\tthis.setTemplateName(TemplateKeys.SEARCH_STATS_LIST);\n\t\t\tboolean isInformationAvailable = true;\n\t\t\t\n\t\t\ttry {\n\t\t\t\treader = IndexReader.open(indexDir);\n\t\t\t}\n\t\t\tcatch (IOException e) {\n\t\t\t\tisInformationAvailable = false;\n\t\t\t}\n\t\t\t\n\t\t\tthis.context.put(\"isInformationAvailable\", isInformationAvailable);\n\t\t\tthis.context.put(\"indexExists\", IndexReader.indexExists(indexDir));\n\t\t\tthis.context.put(\"currentlyIndexing\", \"1\".equals(SystemGlobals.getValue(ConfigKeys.LUCENE_CURRENTLY_INDEXING)));\n\t\t\t\n\t\t\tif (isInformationAvailable) {\n\t\t\t\tthis.context.put(\"isLocked\", IndexReader.isLocked(indexDir.getAbsolutePath()));\n\t\t\t\tthis.context.put(\"lastModified\", new Date(IndexReader.lastModified(indexDir)));\n\t\t\t\tthis.context.put(\"indexLocation\", indexDir.getAbsolutePath());\n\t\t\t\tthis.context.put(\"totalMessages\", new Integer(ForumRepository.getTotalMessages()));\n\t\t\t\tthis.context.put(\"indexVersion\", new Long(reader.getVersion()));\n\t\t\t\tthis.context.put(\"numberOfDocs\", new Integer(reader.numDocs()));\n\t\t\t}\n\t\t}\n\t\tcatch (IOException e) {\n\t\t\tthrow new ForumException(e);\n\t\t}\n\t\tfinally {\n\t\t\tif (reader != null) {\n\t\t\t\ttry { reader.close(); }\n\t\t\t\tcatch (Exception e) {}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tpublic void createIndexDirectory() throws Exception\n\t{\n\t\tthis.settings().createIndexDirectory(\n\t\t\tSystemGlobals.getValue(ConfigKeys.LUCENE_INDEX_WRITE_PATH));\n\t\tthis.list();\n\t}\n\t\n\tpublic void reconstructIndexFromScratch()\n\t{\n\t\tLuceneReindexArgs args = this.buildReindexArgs();\n\t\tboolean recreate = \"recreate\".equals(this.request.getParameter(\"indexOperationType\"));\n\t\t\n\t\tLuceneReindexer reindexer = new LuceneReindexer(this.settings(), args, recreate);\n\t\treindexer.startBackgroundProcess();\n\t\t\n\t\tthis.list();\n\t}\n\t\n\tpublic void cancelIndexing()\n\t{\n\t\tSystemGlobals.setValue(ConfigKeys.LUCENE_CURRENTLY_INDEXING, \"0\");\n\t\tthis.list();\n\t}\n\t\n\tpublic void luceneNotEnabled()\n\t{\n\t\tthis.setTemplateName(TemplateKeys.SEARCH_STATS_NOT_ENABLED);\n\t}\n\t\n\tpublic Template process(RequestContext request, ResponseContext response, SimpleHash context)\n\t{\n\t\tif (!this.isSearchEngineLucene()) {\n\t\t\tthis.ignoreAction();\n\t\t\tthis.luceneNotEnabled();\n\t\t}\n\t\t\n\t\treturn super.process(request, response, context);\n\t}\n\t\n\tprivate boolean isSearchEngineLucene()\n\t{\n\t\treturn LuceneManager.class.getName()\n\t\t\t.equals(SystemGlobals.getValue(ConfigKeys.SEARCH_INDEXER_IMPLEMENTATION))\n\t\t\t|| this.settings() == null;\n\t}\n\t\n\tprivate LuceneSettings settings()\n\t{\n\t\treturn (LuceneSettings)SystemGlobals.getObjectValue(ConfigKeys.LUCENE_SETTINGS);\n\t}\n\t\n\tprivate LuceneReindexArgs buildReindexArgs()\n\t{\n\t\tDate fromDate = this.buildDateFromRequest(\"from\");\n\t\tDate toDate = this.buildDateFromRequest(\"to\");\n\t\t\n\t\tint firstPostId = 0;\n\t\tint lastPostId = 0;\n\t\t\n\t\tif (!StringUtils.isEmpty(this.request.getParameter(\"firstPostId\"))) {\n\t\t\tfirstPostId = this.request.getIntParameter(\"firstPostId\");\n\t\t}\n\t\t\n\t\tif (!StringUtils.isEmpty(this.request.getParameter(\"lastPostId\"))) {\n\t\t\tlastPostId = this.request.getIntParameter(\"lastPostId\");\n\t\t}\n\t\t\n\t\treturn new LuceneReindexArgs(fromDate, toDate, firstPostId, \n\t\t\tlastPostId, \"yes\".equals(this.request.getParameter(\"avoidDuplicatedRecords\")), \n\t\t\tthis.request.getIntParameter(\"type\"));\n\t}\n\t\n\tprivate Date buildDateFromRequest(String prefix)\n\t{\n\t\tString day = this.request.getParameter(prefix + \"Day\");\n\t\tString month = this.request.getParameter(prefix + \"Month\");\n\t\tString year = this.request.getParameter(prefix + \"Year\");\n\t\t\n\t\tString hour = this.request.getParameter(prefix + \"Hour\");\n\t\tString minutes = this.request.getParameter(prefix + \"Minutes\");\n\t\t\n\t\tDate date = null;\n\t\t\n\t\tif (!StringUtils.isEmpty(day) \n\t\t\t&& !StringUtils.isEmpty(month) \n\t\t\t&& !StringUtils.isEmpty(year) \n\t\t\t&& !StringUtils.isEmpty(hour) \n\t\t\t&& !StringUtils.isEmpty(minutes))\n\t\t{\n\t\t\tdate = new GregorianCalendar(Integer.parseInt(year), \n\t\t\t\tInteger.parseInt(month) - 1, \n\t\t\t\tInteger.parseInt(year), \n\t\t\t\tInteger.parseInt(hour), \n\t\t\t\tInteger.parseInt(minutes), 0).getTime();\n\t\t}\n\t\t\n\t\treturn date;\n\t}\n}",
  "metadata": {
    "fileId": "LuceneStatsAction_java_chunk_1",
    "fileName": "LuceneStatsAction.java",
    "filePath": "src/net/jforum/view/admin/LuceneStatsAction.java"
  }
}