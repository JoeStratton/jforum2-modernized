{
  "pageContent": "File Path: src/net/jforum/view/admin/CategoryAction.java\n\n Original Content: /*\n * Copyright (c) JForum Team\n * All rights reserved.\n * \n * Redistribution and use in source and binary forms, \n * with or without modification, are permitted provided \n * that the following conditions are met:\n * \n * 1) Redistributions of source code must retain the above \n * copyright notice, this list of conditions and the \n * following  disclaimer.\n * 2)  Redistributions in binary form must reproduce the \n * above copyright notice, this list of conditions and \n * the following disclaimer in the documentation and/or \n * other materials provided with the distribution.\n * 3) Neither the name of \"Rafael Steil\" nor \n * the names of its contributors may be used to endorse \n * or promote products derived from this software without \n * specific prior written permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT \n * HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY \n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, \n * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF \n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR \n * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL \n * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE \n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, \n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES \n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF \n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, \n * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER \n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER \n * IN CONTRACT, STRICT LIABILITY, OR TORT \n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN \n * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF \n * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE\n * \n * This file creation date: Mar 10, 2003 / 8:49:51 PM\n * The JForum Project\n * http://www.jforum.net\n */\npackage net.jforum.view.admin;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport net.jforum.dao.CategoryDAO;\nimport net.jforum.dao.DataAccessDriver;\nimport net.jforum.dao.GroupSecurityDAO;\nimport net.jforum.entities.Category;\nimport net.jforum.repository.ForumRepository;\nimport net.jforum.repository.SecurityRepository;\nimport net.jforum.repository.RolesRepository;\nimport net.jforum.security.PermissionControl;\nimport net.jforum.security.Role;\nimport net.jforum.security.RoleValue;\nimport net.jforum.security.RoleValueCollection;\nimport net.jforum.security.SecurityConstants;\nimport net.jforum.util.I18n;\nimport net.jforum.util.TreeGroup;\nimport net.jforum.util.preferences.TemplateKeys;\nimport net.jforum.view.admin.common.ModerationCommon;\n\n/**\n * ViewHelper for category administration.\n * \n * @author Rafael Steil\n * @version $Id: CategoryAction.java,v 1.25 2006/12/07 23:34:04 rafaelsteil Exp $\n */\npublic class CategoryAction extends AdminCommand \n{\n\tprivate CategoryDAO cm = DataAccessDriver.getInstance().newCategoryDAO();\n\t\n\t// Listing\n\tpublic void list()\n\t{\n\t\tthis.context.put(\"categories\", DataAccessDriver.getInstance().newCategoryDAO().selectAll());\n\t\tthis.context.put(\"repository\", new ForumRepository());\n\t\tthis.setTemplateName(TemplateKeys.CATEGORY_LIST);\n\t}\n\t\n\t// One more, one more\n\tpublic void insert()\n\t{\n\t\tthis.context.put(\"groups\", new TreeGroup().getNodes());\n\t\tthis.context.put(\"selectedList\", new ArrayList());\n\t\tthis.setTemplateName(TemplateKeys.CATEGORY_INSERT);\n\t\tthis.context.put(\"action\", \"insertSave\");\n\t}\n\t\n\t// Edit\n\tpublic void edit()\n\t{\n\t\tthis.context.put(\"category\", this.cm.selectById(this.request.getIntParameter(\"category_id\")));\n\t\tthis.setTemplateName(TemplateKeys.CATEGORY_EDIT);\n\t\tthis.context.put(\"action\", \"editSave\");\n\t}\n\t\n\t//  Save information\n\tpublic void editSave()\n\t{\n\t\tCategory c = new Category(ForumRepository.getCategory(\n\t\t\t\tthis.request.getIntParameter(\"categories_id\")));\n\t\tc.setName(this.request.getParameter(\"category_name\"));\n\t\tc.setModerated(\"1\".equals(this.request.getParameter(\"moderate\")));\n\t\t\t\n\t\tthis.cm.update(c);\n\t\tForumRepository.reloadCategory(c);\n\t\t\n\t\tnew ModerationCommon().setForumsModerationStatus(c, c.isModerated());\n\t\t\n\t\tthis.list();\n\t}\n\t\n\t// Delete\n\tpublic void delete()\n\t{\n\t\tString ids[] = this.request.getParameterValues(\"categories_id\");\n\t\tList errors = new ArrayList();\n\t\t\n\t\tif (ids != null) {\t\t\t\t\t\t\n\t\t\tfor (int i = 0; i < ids.length; i++){\n\t\t\t\tif (this.cm.canDelete(Integer.parseInt(ids[i]))) {\n\t\t\t\t\tint id = Integer.parseInt(ids[i]);\n\t\t\t\t\tCategory c = this.cm.selectById(id);\n\t\t\t\t\tthis.cm.delete(id);\n\t\t\t\t\t\n\t\t\t\t\tForumRepository.removeCategory(c);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\terrors.add(I18n.getMessage(I18n.CANNOT_DELETE_CATEGORY, new Object[] { new Integer(ids[i]) }));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (errors.size() > 0) {\n\t\t\tthis.context.put(\"errorMessage\", errors);\n\t\t}\n\t\t\n\t\tthis.list();\n\t}\n\t\n\t// A new one\n\tpublic void insertSave()\n\t{\n\t\tCategory c = new Category();\n\t\tc.setName(this.request.getParameter(\"category_name\"));\n\t\tc.setModerated(\"1\".equals(this.request.getParameter(\"moderated\")));\n\t\t\t\n\t\tint categoryId = this.cm.addNew(c);\n\t\tc.setId(categoryId);\n\n\t\tForumRepository.addCategory(c);\n\t\t\n\t\tString[] groups = this.request.getParameterValues(\"groups\");\n\t\tif (groups != null) {\n\t\t\tGroupSecurityDAO gmodel = DataAccessDriver.getInstance().newGroupSecurityDAO();\n\t\t\tPermissionControl pc = new PermissionControl();\n\t\t\tpc.setSecurityModel(gmodel);\n\n\t\t\tRole role = new Role();\n\t\t\trole.setName(SecurityConstants.PERM_CATEGORY);\n\n\t\t\tfor (int i = 0; i < groups.length; i++) {\n\t\t\t\tint groupId = Integer.parseInt(groups[i]);\n\t\t\t\tRoleValueCollection roleValues = new RoleValueCollection();\n\t\t\t\t\n\t\t\t\tRoleValue rv = new RoleValue();\n\t\t\t\trv.setValue(Integer.toString(categoryId));\n\t\t\t\t\n\t\t\t\troleValues.add(rv);\n\t\t\t\t\n\t\t\t\tpc.addRoleValue(groupId, role, roleValues);\n\t\t\t}\n\t\t\t\n\t\t\tSecurityRepository.clean();\n\t\t\tRolesRepository.clear();\n\t\t}\n\t\t\t\n\t\tthis.list();\n\t}\n\t\n\tpublic void up()\n\t{\n\t\tthis.processOrdering(true);\n\t}\n\t\n\tpublic void down()\n\t{\n\t\tthis.processOrdering(false);\n\t}\n\t\n\tprivate void processOrdering(boolean up) \n\t{\n\t\tCategory toChange = new Category(ForumRepository.getCategory(Integer.parseInt(\n\t\t\t\tthis.request.getParameter(\"category_id\"))));\n\t\t\n\t\tList categories = ForumRepository.getAllCategories();\n\t\t\n\t\tint index = categories.indexOf(toChange);\n\t\tif (index == -1 || (up && index == 0) || (!up && index + 1 == categories.size())) {\n\t\t\tthis.list();\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tif (up) {\n\t\t\t// Get the category which comes *before* the category we want to change\n\t\t\tCategory otherCategory = new Category((Category)categories.get(index - 1));\n\t\t\tthis.cm.setOrderUp(toChange, otherCategory);\n\t\t}\n\t\telse {\n\t\t\t// Get the category which comes *after* the category we want to change\n\t\t\tCategory otherCategory = new Category((Category)categories.get(index + 1));\n\t\t\tthis.cm.setOrderDown(toChange, otherCategory);\n\t\t}\n\t\t\n\t\tForumRepository.reloadCategory(toChange);\n\t\tthis.list();\n\t}\n}",
  "metadata": {
    "fileId": "CategoryAction_java_chunk_1",
    "fileName": "CategoryAction.java",
    "filePath": "src/net/jforum/view/admin/CategoryAction.java"
  }
}