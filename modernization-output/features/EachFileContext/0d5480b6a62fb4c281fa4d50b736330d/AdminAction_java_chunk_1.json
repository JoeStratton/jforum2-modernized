{
  "pageContent": "File Path: src/net/jforum/view/admin/AdminAction.java\n\n Original Content: /*\n * Copyright (c) JForum Team\n * All rights reserved.\n * \n * Redistribution and use in source and binary forms, \n * with or without modification, are permitted provided \n * that the following conditions are met:\n * \n * 1) Redistributions of source code must retain the above \n * copyright notice, this list of conditions and the \n * following  disclaimer.\n * 2)  Redistributions in binary form must reproduce the \n * above copyright notice, this list of conditions and \n * the following disclaimer in the documentation and/or \n * other materials provided with the distribution.\n * 3) Neither the name of \"Rafael Steil\" nor \n * the names of its contributors may be used to endorse \n * or promote products derived from this software without \n * specific prior written permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT \n * HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY \n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, \n * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF \n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR \n * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL \n * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE \n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, \n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES \n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF \n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, \n * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER \n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER \n * IN CONTRACT, STRICT LIABILITY, OR TORT \n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN \n * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF \n * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE\n * \n * This file creation date: 17/01/2004 / 19:34:01\n * The JForum Project\n * http://www.jforum.net\n */\npackage net.jforum.view.admin;\n\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.net.URL;\nimport java.net.URLConnection;\n\nimport net.jforum.Command;\nimport net.jforum.JForumExecutionContext;\nimport net.jforum.SessionFacade;\nimport net.jforum.api.integration.mail.pop.POPListener;\nimport net.jforum.context.RequestContext;\nimport net.jforum.context.ResponseContext;\nimport net.jforum.dao.DataAccessDriver;\nimport net.jforum.dao.ForumDAO;\nimport net.jforum.entities.UserSession;\nimport net.jforum.repository.ModulesRepository;\nimport net.jforum.repository.SecurityRepository;\nimport net.jforum.security.PermissionControl;\nimport net.jforum.security.SecurityConstants;\nimport net.jforum.util.preferences.ConfigKeys;\nimport net.jforum.util.preferences.SystemGlobals;\nimport net.jforum.util.preferences.TemplateKeys;\nimport freemarker.template.SimpleHash;\nimport freemarker.template.Template;\n\n/**\n * @author Rafael Steil\n * @version $Id: AdminAction.java,v 1.23 2007/02/25 13:48:34 rafaelsteil Exp $\n */\npublic class AdminAction extends Command {\n\n\t/** \n\t * @see net.jforum.Command#list()\n\t */\n\tpublic void list()  \n\t{\n\t\tthis.login();\n\t}\n\t\n\tpublic void login()\n\t{\n\t\tUserSession us = SessionFacade.getUserSession();\n\t\tPermissionControl pc = SecurityRepository.get(us.getUserId());\n\t\t\n\t\tif (!SessionFacade.isLogged() \n\t\t\t\t|| pc == null \n\t\t\t\t|| !pc.canAccess(SecurityConstants.PERM_ADMINISTRATION)) {\n\t\t\tString returnPath =  this.request.getContextPath() + \"/admBase/login\" \n\t\t\t\t+ SystemGlobals.getValue(ConfigKeys.SERVLET_EXTENSION);\n\n\t\t\tJForumExecutionContext.setRedirect(this.request.getContextPath() \n\t\t\t\t+ \"/jforum\" \n\t\t\t\t+ SystemGlobals.getValue(ConfigKeys.SERVLET_EXTENSION) \n\t\t\t\t+ \"?module=user&action=login&returnPath=\"\n\t\t\t\t+ returnPath);\n\t\t}\n\t\telse {\n\t\t\tthis.setTemplateName(TemplateKeys.ADMIN_INDEX);\n\t\t}\n\t}\n\t\n\tpublic void menu()\n\t{\n\t\tif (this.checkAdmin()) {\n\t\t\tthis.setTemplateName(TemplateKeys.ADMIN_MENU);\n\t\t}\n\t}\n\t\n\tpublic void main() throws Exception\n\t{\n\t\tif (this.checkAdmin()) {\n\t\t\tthis.setTemplateName(TemplateKeys.ADMIN_MAIN);\n\t\t\t\n\t\t\t// Checks if the install module is still active\n\t\t\tthis.context.put(\"installModuleExists\", ModulesRepository.getModuleClass(\"install\") != null);\n\t\t\tthis.context.put(\"sessions\", SessionFacade.getAllSessions());\n\t\t\t\n\t\t\tForumDAO dao = DataAccessDriver.getInstance().newForumDAO();\n\t\t\tthis.context.put(\"stats\", dao.getBoardStatus());\n\t\t\t\n\t\t\tthis.checkBoardVersion();\n\t\t}\n\t}\n\t\n\tpublic void fetchMail() throws Exception\n\t{\n\t\tnew Thread(new Runnable() {\n\t\t\tpublic void run() {\n\t\t\t\ttry {\n\t\t\t\t\tnew POPListener().execute(null);\n\t\t\t\t}\n\t\t\t\tcatch (Exception e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}).start();\n\t\t\n\t\tthis.main();\n\t}\n\t\n\tprivate void checkBoardVersion()\n\t{\n\t\tString data = this.readVersionFromSocket();\n\t\t\n\t\tif (data == null || data.trim().length() == 0) {\n\t\t\tthis.context.put(\"developmentVersion\", false);\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tint index = data.indexOf('\\n');\n\t\t\n\t\tString version = data.substring(0, index).trim();\n\t\tString notes = data.substring(index + 1, data.length());\n\t\t\n\t\tthis.matchVersion(version);\n\t\tthis.context.put(\"notes\", notes);\n\t}\n\t\n\tprivate void matchVersion(String latest)\n\t{\n\t\tString current = SystemGlobals.getValue(ConfigKeys.VERSION);\n\t\t\n\t\tString[] currentParts = current.split(\"\\\\.\");\n\t\tString[] latestParts = latest.split(\"\\\\.\");\n\t\t\n\t\tif (currentParts[2].indexOf('-') > -1) {\n\t\t\tcurrentParts[2] = currentParts[2].substring(0, currentParts[2].indexOf('-'));\n\t\t}\n\t\t\n\t\tif (Integer.parseInt(latestParts[2]) > Integer.parseInt(currentParts[2]) // Revision\n\t\t\t|| Integer.parseInt(latestParts[1]) > Integer.parseInt(currentParts[1]) // Minor\n\t\t\t|| Integer.parseInt(latestParts[0]) > Integer.parseInt(currentParts[0])) { // Major\n\t\t\tthis.context.put(\"upToDate\", false);\n\t\t}\n\t\telse {\n\t\t\tthis.context.put(\"upToDate\", true);\n\t\t}\n\t\t\n\t\tthis.context.put(\"latestVersion\", latest);\n\t\tthis.context.put(\"currentVersion\", current);\n\t\tthis.context.put(\"developmentVersion\", current.indexOf(\"-dev\") > -1);\n\t}\n\t\n\tprivate String readVersionFromSocket()\n\t{\n\t\tInputStream is = null;\n\t\tOutputStream os = null;\n\t\t\n\t\tString data = null;\n\t\t\n\t\ttry {\n\t\t\tURL url = new URL(SystemGlobals.getValue(ConfigKeys.JFORUM_VERSION_URL));\n\t\t\tURLConnection conn = url.openConnection();\n\t\t\t\n\t\t\tis = conn.getInputStream();\n\t\t\tos = new ByteArrayOutputStream();\n\t\t\t\n\t\t\tint available = is.available();\n\t\t\t\n\t\t\twhile (available > 0) {\n\t\t\t\tbyte[] b = new byte[available];\n\t\t\t\tis.read(b);\n\t\t\t\tos.write(b);\n\t\t\t\t\n\t\t\t\tavailable = is.available();\n\t\t\t}\n\t\t\t\n\t\t\tdata = os.toString();\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\tfinally {\n\t\t\tif (is != null) {\n\t\t\t\ttry {  is.close(); } catch (Exception e) {}\n\t\t\t}\n\t\t\t\n\t\t\tif (os != null) {\n\t\t\t\ttry { os.close(); } catch (Exception e) {}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn data;\n\t}\n\t\n\tpublic boolean checkAdmin()\n\t{\n\t\tint userId = SessionFacade.getUserSession().getUserId();\n\t\t\n\t\tif (SecurityRepository.get(userId).canAccess(SecurityConstants.PERM_ADMINISTRATION)) {\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\tJForumExecutionContext.setRedirect(JForumExecutionContext.getRequest().getContextPath() \n\t\t\t+ \"/admBase/login\"\n\t\t\t+ SystemGlobals.getValue(ConfigKeys.SERVLET_EXTENSION));\n\t\t\n\t\tsuper.ignoreAction();\n\n\t\treturn false;\n\t}\n\n\tpublic Template process(RequestContext request, ResponseContext response, \n\t\t\tSimpleHash context)\n\t{\n\t\treturn super.process(request, response, context);\n\t}\n}",
  "metadata": {
    "fileId": "AdminAction_java_chunk_1",
    "fileName": "AdminAction.java",
    "filePath": "src/net/jforum/view/admin/AdminAction.java"
  }
}