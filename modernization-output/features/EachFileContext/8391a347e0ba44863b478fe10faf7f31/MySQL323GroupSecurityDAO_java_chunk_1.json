{
  "pageContent": "File Path: src/net/jforum/dao/mysql/security/MySQL323GroupSecurityDAO.java\n\n Original Content: /*\n * Copyright (c) JForum Team\n * All rights reserved.\n * \n * Redistribution and use in source and binary forms, \n * with or without modification, are permitted provided \n * that the following conditions are met:\n * \n * 1) Redistributions of source code must retain the above \n * copyright notice, this list of conditions and the \n * following  disclaimer.\n * 2)  Redistributions in binary form must reproduce the \n * above copyright notice, this list of conditions and \n * the following disclaimer in the documentation and/or \n * other materials provided with the distribution.\n * 3) Neither the name of \"Rafael Steil\" nor \n * the names of its contributors may be used to endorse \n * or promote products derived from this software without \n * specific prior written permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT \n * HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY \n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, \n * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF \n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR \n * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL \n * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE \n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, \n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES \n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF \n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, \n * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER \n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER \n * IN CONTRACT, STRICT LIABILITY, OR TORT \n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN \n * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF \n * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE\n * \n * Created on 02/07/2005 13:18:34\n * The JForum Project\n * http://www.jforum.net\n */\npackage net.jforum.dao.mysql.security;\n\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\n\nimport com.mysql.jdbc.Connection;\nimport com.mysql.jdbc.Statement;\n\nimport net.jforum.JForumExecutionContext;\nimport net.jforum.dao.generic.security.GenericGroupSecurityDAO;\nimport net.jforum.dao.generic.security.SecurityCommon;\nimport net.jforum.exceptions.DatabaseException;\nimport net.jforum.security.RoleCollection;\nimport net.jforum.util.DbUtils;\nimport net.jforum.util.preferences.SystemGlobals;\n\n/**\n * MySQL 3.23 hacks based on Andy's work\n * \n * @author Rafael Steil\n * @version $Id: MySQL323GroupSecurityDAO.java,v 1.9 2007/08/16 13:07:33 rafaelsteil Exp $\n */\npublic class MySQL323GroupSecurityDAO extends GenericGroupSecurityDAO\n{\t\n\t/**\n\t * @see net.jforum.dao.generic.security.GenericGroupSecurityDAO#loadRoles(int[])\n\t */\n\tprotected RoleCollection loadRoles(int[] groupIds)\n\t{\n\t\tString groupIdAsString = SecurityCommon.groupIdAsString(groupIds);\n\n\t\tRoleCollection roleCollection = new RoleCollection();\n\t\t\n\t\tPreparedStatement rolesP = null;\n\t\tPreparedStatement roleValuesP = null;\n\t\tResultSet roles = null;\n\t\tResultSet roleValues = null;\n\t\t\n\t\ttry {\n\t\t\t// Roles\n\t\t\tString sql = this.sqlWithGroups(\"PermissionControl.getRoles\", groupIdAsString);\n\n\t\t\trolesP = JForumExecutionContext.getConnection().prepareStatement(sql);\n\t\t\troles = rolesP.executeQuery();\n\t\t\t\n\t\t\t// RoleValues\n\t\t\tsql = this.sqlWithGroups(\"PermissionControl.getRoleValues\", groupIdAsString);\n\n\t\t\troleValuesP = JForumExecutionContext.getConnection().prepareStatement(sql);\n\t\t\troleValues = roleValuesP.executeQuery();\n\t\t\t\n\t\t\tMySQL323RoleResultSet mergedRs = new MySQL323RoleResultSet(0, 0, null, null);\n\t\t\tmergedRs.merge(roles, roleValues);\n\t\t\t\n\t\t\troleCollection = SecurityCommon.loadRoles(mergedRs);\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tthrow new DatabaseException(e);\n\t\t}\n\t\tfinally {\n\t\t\tDbUtils.close(roles, rolesP);\n\t\t\tDbUtils.close(roleValues, roleValuesP);\n\t\t}\n\t\t\n\t\treturn roleCollection;\n\t}\n\t\n\tprivate String sqlWithGroups(String queryName, String groups)\n\t{\n\t\tString sql = SystemGlobals.getSql(queryName);\n\t\t\n\t\tif (\"\".equals(groups)) {\n\t\t\t// We suppose there is no \"negative\" group ids\n\t\t\tsql = sql.replaceAll(\"#IN#\", \"-1\");\n\t\t}\n\t\telse {\n\t\t\tsql = sql.replaceAll(\"#IN#\", groups);\n\t\t}\n\t\t\n\t\treturn sql.replaceAll(\"#IN#\", groups);\n\t}\n\t\n\t/**\n\t * @see net.jforum.dao.security.SecurityDAO#deleteAllRoles(int)\n\t */\n\tpublic void deleteAllRoles(int id)\n\t{\n\t\tPreparedStatement p = null;\n\t\ttry {\n\t\t\t// First, get the set of role ids\n\t\t\tp = JForumExecutionContext.getConnection().prepareStatement(\n\t\t\t\t\tSystemGlobals.getSql(\"PermissionControl.getRoleIdsByGroup\"));\n\t\t\tp.setInt(1, id);\n\n\t\t\tString roleIds = this.getCsvIdList(p);\n\n\t\t\tp.close();\n\n\t\t\tif (roleIds.length() > 0) {\n\t\t\t\t// Then remove all matching values\n\t\t\t\tp = this.getStatementForCsv(SystemGlobals.getSql(\"PermissionControl.deleteRoleValuesByRoleId\"), roleIds);\n\t\t\t\tp.executeUpdate();\n\t\t\t\tp.close();\n\t\t\t}\n\t\t\t\n\t\t\t// Now delete the group roles \n\t\t\tp = JForumExecutionContext.getConnection().prepareStatement(\n\t\t\t\t\tSystemGlobals.getSql(\"PermissionControl.deleteAllGroupRoles\"));\n\t\t\tp.setInt(1, id);\n\t\t\tp.executeUpdate();\n\t\t}\n\t\tcatch (SQLException e) {\n\t\t\tthrow new DatabaseException(e);\n\t\t}\n\t\tfinally {\n\t\t\tDbUtils.close(p);\n\t\t}\n\t}\n\n\t/**\n\t * Gets a statement to use with some csv data\n\t * \n\t * @param sql The SQL query to execute. It must have an \"?\", which will be replaced by\n\t *            <code>csv</code>\n\t * @param csv The ids to replace\n\t * @return The statement, ready to execute\n\t * @throws SQLException\n\t */\n\tprotected PreparedStatement getStatementForCsv(String sql, String csv) throws SQLException\n\t{\n\t\tint index = sql.indexOf('?');\n\t\tsql = sql.substring(0, index) + csv + sql.substring(index + 1);\n\t\treturn JForumExecutionContext.getConnection().prepareStatement(sql);\n\t}\n\n\t/**\n\t * Gets a set of ids from a statement The statement is expected to return an id in the first\n\t * column\n\t * \n\t * @param p The statement to execute\n\t * @return The ids, separated by comma\n\t * @throws SQLException\n\t */\n\tprotected String getCsvIdList(PreparedStatement p) throws SQLException\n\t{\n\t\tResultSet rs = p.executeQuery();\n\n\t\tStringBuffer sb = new StringBuffer();\n\n\t\twhile (rs.next()) {\n\t\t\tsb.append(rs.getInt(1)).append(\",\");\n\t\t}\n\n\t\tsb.append(\"-1\");\n\n\t\trs.close();\n\n\t\treturn sb.toString();\n\t}\n\t\n\tprivate static class MySQL323RoleResultSet extends com.mysql.jdbc.ResultSet\n\t{\n\t\tprivate Map currentEntry;\n\t\tprivate Iterator dataIterator;\n\t\tprivate List data = new ArrayList();\n\t\t\n\t\tpublic MySQL323RoleResultSet(long updateCount, long updateId, Connection connection, Statement statement)\n\t\t{\n\t\t\tsuper(updateCount, updateId, connection, statement);\n\t\t}\n\t\t\n\t\tpublic void merge(ResultSet roles, ResultSet roleValues) throws SQLException\n\t\t{\n\t\t\tthis.fillDataFromRs(roles);\n\t\t\tthis.fillDataFromRs(roleValues);\n\t\t\t\n\t\t\tthis.dataIterator = this.data.iterator();\n\t\t}\n\t\t\n\t\tprivate void fillDataFromRs(ResultSet rs) throws SQLException\n\t\t{\n\t\t\twhile (rs.next()) {\n\t\t\t\tMap m = new HashMap();\n\t\t\t\t\n\t\t\t\tm.put(\"name\", rs.getString(\"name\"));\n\t\t\t\tm.put(\"role_value\", rs.getString(\"role_value\"));\n\t\t\t\t\n\t\t\t\tthis.data.add(m);\n\t\t\t}\n\t\t}\n\t\t\n\t\t/**\n\t\t * @see com.mysql.jdbc.ResultSet#next()\n\t\t */\n\t\tpublic boolean next() throws SQLException\n\t\t{\n\t\t\tboolean hasNext = this.dataIterator.hasNext();\n\t\t\t\n\t\t\tif (hasNext) {\n\t\t\t\tthis.currentEntry = (Map)this.dataIterator.next();\n\t\t\t}\n\t\t\t\n\t\t\treturn hasNext;\n\t\t}\n\t\t\n\t\t/**\n\t\t * @see com.mysql.jdbc.ResultSet#getString(java.lang.String)\n\t\t */\n\t\tpublic String getString(String column) throws SQLException\n\t\t{\n\t\t\treturn (String)this.currentEntry.get(column);\n\t\t}\n\t\t\n\t\t/**\n\t\t * Always returns false\n\t\t */\n\t\tpublic boolean wasNull() throws SQLException\n\t\t{\n\t\t\treturn false;\n\t\t}\n\n\t\t/**\n\t\t * Does nothing\n\t\t */\n\t\tpublic void close() throws SQLException {}\n\t} \n}",
  "metadata": {
    "fileId": "MySQL323GroupSecurityDAO_java_chunk_1",
    "fileName": "MySQL323GroupSecurityDAO.java",
    "filePath": "src/net/jforum/dao/mysql/security/MySQL323GroupSecurityDAO.java"
  }
}