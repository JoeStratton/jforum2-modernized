{
  "pageContent": "File Path: src/net/jforum/JForumExecutionContext.java\n\n Original Content: /*\n * Copyright (c) JForum Team\n * All rights reserved.\n * \n * Redistribution and use in source and binary forms, \n * with or without modification, are permitted provided \n * that the following conditions are met:\n * \n * 1) Redistributions of source code must retain the above \n * copyright notice, this list of conditions and the \n * following  disclaimer.\n * 2)  Redistributions in binary form must reproduce the \n * above copyright notice, this list of conditions and \n * the following disclaimer in the documentation and/or \n * other materials provided with the distribution.\n * 3) Neither the name of \"Rafael Steil\" nor \n * the names of its contributors may be used to endorse \n * or promote products derived from this software without \n * specific prior written permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT \n * HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY \n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, \n * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF \n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR \n * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL \n * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE \n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, \n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES \n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF \n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, \n * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER \n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER \n * IN CONTRACT, STRICT LIABILITY, OR TORT \n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN \n * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF \n * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE\n * \n * This file creation date: 29/01/2006 - 12:19:11\n * The JForum Project\n * http://www.jforum.net\n */\npackage net.jforum;\n\nimport java.io.IOException;\nimport java.sql.Connection;\n\nimport javax.servlet.http.HttpServletResponse;\n\nimport net.jforum.context.RequestContext;\nimport net.jforum.context.ResponseContext;\nimport net.jforum.context.ForumContext;\nimport net.jforum.exceptions.ForumException;\nimport net.jforum.util.preferences.ConfigKeys;\nimport net.jforum.util.preferences.SystemGlobals;\n\nimport org.apache.log4j.Logger;\n\nimport freemarker.template.Configuration;\nimport freemarker.template.ObjectWrapper;\nimport freemarker.template.SimpleHash;\n\n/**\n * Data execution context. \n * \n * @author Rafael Steil\n * @version $Id: JForumExecutionContext.java,v 1.10 2006/10/10 01:59:55 rafaelsteil Exp $\n */\npublic class JForumExecutionContext\n{\n    private static ThreadLocal userData = new ThreadLocal();\n\tprivate static Logger logger = Logger.getLogger(JForumExecutionContext.class);\n\tprivate static Configuration templateConfig;\n\t\n\tprivate Connection conn;\n    private ForumContext forumContext;\n    private SimpleHash context = new SimpleHash(ObjectWrapper.BEANS_WRAPPER);\n    private String redirectTo;\n    private String contentType;\n    private boolean isCustomContent;\n    private boolean enableRollback;\n\t\n\t/**\n\t * Gets the execution context.\n\t * @return JForumExecutionContext\n\t */\n\tpublic static JForumExecutionContext get()\n\t{\n\t\tJForumExecutionContext ex = (JForumExecutionContext)userData.get();\n\n\t\tif (ex == null) {\n\t\t\tex = new JForumExecutionContext();\n\t\t\tuserData.set(ex);\n\t\t}\n\t\t\n\t\treturn ex;\n\t}\n\t\n\t/**\n\t * Checks if there is an execution context already set\n\t * @return <code>true</code> if there is an execution context\n\t * @see #get()\n\t */\n\tpublic static boolean exists()\n\t{\n\t\treturn (userData.get() != null);\n\t}\n\t\n\t/**\n\t * Sets the default template configuration \n\t * @param config The template configuration to set\n\t */\n\tpublic static void setTemplateConfig(Configuration config)\n\t{\n\t\ttemplateConfig = config;\n\t}\n\t\n\t/**\n\t * Gets a reference to the default template configuration settings.\n\t * @return The template configuration instance\n\t */\n\tpublic static Configuration templateConfig()\n\t{\n\t\treturn templateConfig;\n\t}\n\t\n\t/**\n\t * Sets the execution context\n\t * @param ex JForumExecutionContext\n\t */\n\tpublic static void set(JForumExecutionContext ex)\n\t{\n\t\tuserData.set(ex);\n\t}\n\t\n\t/**\n\t * Sets a connection\n\t * @param conn The connection to use\n\t */\n\tpublic void setConnection(Connection conn)\n\t{\n\t\tthis.conn = conn;\n\t}\n\t\n\t/**\n\t * Gets the current thread's connection\n\t * @return Connection\n\t */\n\tpublic static Connection getConnection() \n\t{\n\t\treturn getConnection(true);\n\t}\n\t\n\tpublic static Connection getConnection(boolean validate)\n\t{\n\t\tJForumExecutionContext ex = get();\n\t\tConnection c =  ex.conn;\n\t\t\n\t\tif (validate && c == null) {\n\t\t\tc = DBConnection.getImplementation().getConnection();\n\t\t\t\n\t\t\ttry {\n\t\t\t\tc.setAutoCommit(!SystemGlobals.getBoolValue(ConfigKeys.DATABASE_USE_TRANSACTIONS));\n\t\t\t}\n\t\t\tcatch (Exception e) {\n                //catch error autocommit\n            }\n\t\t\t\n\t\t\tex.setConnection(c);\n\t\t\tset(ex);\n\t\t}\n\t    \n\t\treturn c; \n\t}\n\n    public static ForumContext getForumContext()\n    {\n        return ((JForumExecutionContext)userData.get()).forumContext;\n    }\n\n    public void setForumContext(ForumContext forumContext)\n    {\n        this.forumContext = forumContext;\n    }\n\n    /**\n\t * Gets the current thread's request\n\t * @return WebContextRequest\n\t */\n\tpublic static RequestContext getRequest() {\n\t\treturn getForumContext().getRequest();\n\t}\n\t\n\t/**\n\t * Gets the current thread's response\n\t * @return HttpServletResponse\n\t */\n\tpublic static ResponseContext getResponse() {\n\t\treturn getForumContext().getResponse();\n\t}\n\n\t/**\n\t * Gets the current thread's template context\n\t * @return SimpleHash\n\t */\n\tpublic static SimpleHash getTemplateContext() {\n\t\treturn ((JForumExecutionContext)userData.get()).context;\n\t}\n\n\t/**\n\t * Gets the current thread's <code>DataHolder</code> instance\n     * @param redirect String\n     */\n\tpublic static void setRedirect(String redirect) {\n\t\t((JForumExecutionContext)userData.get()).redirectTo = redirect;\n\t}\n\n\t/**\n\t * Sets the content type for the current http response.\n\t * @param contentType String\n\t */\n\tpublic static void setContentType(String contentType) {\n\t\t((JForumExecutionContext)userData.get()).contentType = contentType;\n\t}\n\t\n\t/**\n\t * Gets the content type for the current request.\n\t * @return String\n\t */\n\tpublic static String getContentType()\n\t{\n\t\treturn ((JForumExecutionContext)userData.get()).contentType;\n\t}\n\n\t/**\n\t * Gets the URL to redirect to, if any.\n\t * @return The URL to redirect, of <code>null</code> if none.\n\t */\n\tpublic static String getRedirectTo()\n\t{\n\t\tJForumExecutionContext ex = (JForumExecutionContext)userData.get();\n\t\treturn (ex != null ? ex.redirectTo : null);\n\t}\n\n\t/**\n\t * Marks the request to use a binary content-type.\n\t * @param enable boolean\n\t */\n\tpublic static void enableCustomContent(boolean enable) {\n\t\t((JForumExecutionContext)userData.get()).isCustomContent = enable;\n\t}\n\t\n\t/**\n\t * Checks if the current request is binary\n\t * @return <code>true</code> if the content tyee for the current request is \n\t * any binary data.\n\t */\n\tpublic static boolean isCustomContent()\n\t{\n\t\treturn ((JForumExecutionContext)userData.get()).isCustomContent;\n\t}\n\n\t/**\n\t * Forces the request to not commit the connection.\n\t */\n\tpublic static void enableRollback() {\n\t\t((JForumExecutionContext)userData.get()).enableRollback = true;\n\t}\n\n\t/**\n\t * Check if commit is disabled or not for the current request.\n\t * @return <code>true</code> if a commit should NOT be made\n\t */\n\tpublic static boolean shouldRollback() {\n\t\treturn ((JForumExecutionContext)userData.get()).enableRollback;\n\t}\n\n    /**\n     * Send UNAUTHORIZED to the browser and ask user to login via basic authentication\n     */\n\tpublic static void requestBasicAuthentication()  \n\t{\n\t\tgetResponse().addHeader(\"WWW-Authenticate\", \"Basic realm=\\\"JForum\\\"\");\n\t\t\n\t\ttry {\n\t\t\tgetResponse().sendError(HttpServletResponse.SC_UNAUTHORIZED);\n\t\t}\n\t\tcatch (IOException e) {\n\t\t\tthrow new ForumException(e);\n\t\t}\n\t\t\n\t\tenableCustomContent(true);\n    }\n\t\n\t/**\n\t * Finishes the execution context\n\t */\n\tpublic static void finish()\n\t{\n\t\tConnection conn = JForumExecutionContext.getConnection(false);\n\t\t\n\t\tif (conn != null) {\n\t\t\tif (SystemGlobals.getBoolValue(ConfigKeys.DATABASE_USE_TRANSACTIONS)) {\n\t\t\t\tif (JForumExecutionContext.shouldRollback()) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconn.rollback();\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t\tlogger.error(\"Error while rolling back a transaction\", e);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconn.commit();\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t\tlogger.error(\"Error while commiting a transaction\", e);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\ttry {\n\t\t\t\tDBConnection.getImplementation().releaseConnection(conn);\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\tlogger.error(\"Error while releasing the connection : \" + e, e);\n\t\t\t}\n\t\t}\n\t\t\n\t\tuserData.set(null);\n\t}\n}",
  "metadata": {
    "fileId": "JForumExecutionContext_java_chunk_1",
    "fileName": "JForumExecutionContext.java",
    "filePath": "src/net/jforum/JForumExecutionContext.java"
  }
}