{
  "pageContent": "File Path: src/net/jforum/Command.java\n\n Original Content: /*\n * Copyright (c) JForum Team\n * All rights reserved.\n * \n * Redistribution and use in source and binary forms, \n * with or without modification, are permitted provided \n * that the following conditions are met:\n * \n * 1) Redistributions of source code must retain the above \n * copyright notice, this list of conditions and the \n * following  disclaimer.\n * 2)  Redistributions in binary form must reproduce the \n * above copyright notice, this list of conditions and \n * the following disclaimer in the documentation and/or \n * other materials provided with the distribution.\n * 3) Neither the name of \"Rafael Steil\" nor \n * the names of its contributors may be used to endorse \n * or promote products derived from this software without \n * specific prior written permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT \n * HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY \n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, \n * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF \n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR \n * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL \n * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE \n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, \n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES \n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF \n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, \n * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER \n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER \n * IN CONTRACT, STRICT LIABILITY, OR TORT \n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN \n * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF \n * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE\n * \n * This file creation date: Mar 3, 2003 / 10:55:19 AM\n * The JForum Project\n * http://www.jforum.net\n */\npackage net.jforum;\n\nimport java.io.IOException;\n\nimport net.jforum.context.RequestContext;\nimport net.jforum.context.ResponseContext;\nimport net.jforum.exceptions.ForumException;\nimport net.jforum.exceptions.TemplateNotFoundException;\nimport net.jforum.repository.Tpl;\nimport net.jforum.util.preferences.ConfigKeys;\nimport net.jforum.util.preferences.SystemGlobals;\nimport net.jforum.util.preferences.TemplateKeys;\nimport freemarker.template.SimpleHash;\nimport freemarker.template.Template;\n\n/**\n * <code>Command</code> Pattern implementation.\n * All View Helper classes, which are intead to configure and processs\n * presentation actions must extend this class. \n * \n * @author Rafael Steil\n * @version $Id: Command.java,v 1.27 2007/07/28 14:17:11 rafaelsteil Exp $\n */\npublic abstract class Command \n{\n\tprivate static Class[] NO_ARGS_CLASS = new Class[0];\n\tprivate static Object[] NO_ARGS_OBJECT = new Object[0];\n\t\n\tprivate boolean ignoreAction;\n\t\n\tprotected String templateName;\n\tprotected RequestContext request;\n\tprotected ResponseContext response;\n\tprotected SimpleHash context;\n\t\n\tprotected void setTemplateName(String templateName)\n\t{\n\t\tthis.templateName = Tpl.name(templateName);\n\t}\n\t\n\tprotected void ignoreAction()\n\t{\n\t\tthis.ignoreAction = true;\n\t}\n\t\n\t/**\n\t * Base method for listings. \n\t * May be used as general listing or as helper\n\t * to another specialized type of listing. Subclasses\n\t * must implement it to the cases where some invalid\n\t * action is called ( which means that the exception will\n\t * be caught and the general listing will be used )\n\t */\n\tpublic abstract void list() ;\n\t\n\t/**\n\t * Process and manipulate a requisition.\n\t * @return <code>Template</code> reference\n     * @param request WebContextRequest\n     * @param response WebContextResponse\n\t */\n\tpublic Template process(RequestContext request, ResponseContext response, SimpleHash context)\n\t{\n\t\tthis.request = request;\n\t\tthis.response = response;\n\t\tthis.context = context;\n\t\t\n\t\tString action = this.request.getAction();\n\n\t\tif (!this.ignoreAction) {\n\t\t\ttry {\n\t\t\t\tthis.getClass().getMethod(action, NO_ARGS_CLASS).invoke(this, NO_ARGS_OBJECT);\n\t\t\t}\n\t\t\tcatch (NoSuchMethodException e) {\t\t\n\t\t\t\tthis.list();\t\t\n\t\t\t}\n\t\t\tcatch (Exception e)\n            {\n                throw new ForumException(e);\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (JForumExecutionContext.getRedirectTo() != null) {\n\t\t\tthis.setTemplateName(TemplateKeys.EMPTY);\n\t\t}\n\t\telse if (request.getAttribute(\"template\") != null) {\n\t\t\tthis.setTemplateName((String)request.getAttribute(\"template\"));\n\t\t}\n\t\t\n\t\tif (JForumExecutionContext.isCustomContent()) {\n\t\t\treturn null;\n\t\t}\n\t\t\n\t\tif (this.templateName == null) {\n\t\t\tthrow new TemplateNotFoundException(\"Template for action \" + action + \" is not defined\");\n\t\t}\n\n        try {\n            return JForumExecutionContext.templateConfig().getTemplate(\n                new StringBuffer(SystemGlobals.getValue(ConfigKeys.TEMPLATE_DIR)).\n                append('/').append(this.templateName).toString());\n        }\n        catch (IOException e) {\n            throw new ForumException( e);\n        }\n    }\n}",
  "metadata": {
    "fileId": "Command_java_chunk_1",
    "fileName": "Command.java",
    "filePath": "src/net/jforum/Command.java"
  }
}