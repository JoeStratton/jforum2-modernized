{
  "pageContent": "File Path: src/net/jforum/DBConnection.java\n\n Original Content: /*\n * Copyright (c) JForum Team\n * All rights reserved.\n * \n * Redistribution and use in source and binary forms, \n * with or without modification, are permitted provided \n * that the following conditions are met:\n * \n * 1) Redistributions of source code must retain the above \n * copyright notice, this list of conditions and the \n * following  disclaimer.\n * 2)  Redistributions in binary form must reproduce the \n * above copyright notice, this list of conditions and \n * the following disclaimer in the documentation and/or \n * other materials provided with the distribution.\n * 3) Neither the name of \"Rafael Steil\" nor \n * the names of its contributors may be used to endorse \n * or promote products derived from this software without \n * specific prior written permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT \n * HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY \n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, \n * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF \n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR \n * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL \n * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE \n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, \n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES \n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF \n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, \n * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER \n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER \n * IN CONTRACT, STRICT LIABILITY, OR TORT \n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN \n * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF \n * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE\n * \n * This file creation date: 25/08/2004 23:03:14\n * The JForum Project\n * http://www.jforum.net\n */\npackage net.jforum;\n\nimport java.sql.Connection;\n\nimport net.jforum.util.preferences.ConfigKeys;\nimport net.jforum.util.preferences.SystemGlobals;\n\nimport org.apache.log4j.Logger;\n\n/**\n * Base class for all database connection implementations that\n * may be used with JForum.\n * Default implementations are <code>PooledConnection</code>, which\n * is the defeault connection pool implementation, and <code>SimpleConnection</code>,\n * which opens a new connection on every request.  \n * \n * @author Rafael Steil\n * @version $Id: DBConnection.java,v 1.14 2006/08/23 02:24:06 rafaelsteil Exp $\n */\npublic abstract class DBConnection \n{\n\tprivate static final Logger logger = Logger.getLogger(DBConnection.class);\n\tprotected boolean isDatabaseUp;\n\t\n\tprivate static DBConnection instance;\n\n\t/**\n\t * Creates an instance of some <code>DBConnection </code>implementation. \n\t * \n\t * @return <code>true</code> if the instance was successfully created, \n\t * or <code>false</code> if some exception was thrown.\n\t */\n\tpublic static boolean createInstance()\n\t{\n\t\ttry {\n\t\t\tinstance = (DBConnection)Class.forName(SystemGlobals.getValue(\n\t\t\t\t\tConfigKeys.DATABASE_CONNECTION_IMPLEMENTATION)).newInstance();\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\t logger.warn(\"Error creating the database connection implementation instance. \" + e);\n\t\t\t e.printStackTrace();\n\t\t\t return false;\n\t\t}\n\t\t\n\t\treturn true;\n\t}\n\t\n\t/**\n\t * Gets the current <code>DBConnection</code> implementation's instance\n\t * \n\t * @return DBConnection\n\t */\n\tpublic static DBConnection getImplementation()\n\t{\n\t\treturn instance;\n\t}\n\t\n\t/**\n\t * Checks if database connection is up.\n\t *  \n\t * @return <code>true</code> if a connection to the database\n\t * was successfully created, or <code>false</code> if not.\n\t */\n\tpublic boolean isDatabaseUp()\n\t{\n\t\treturn this.isDatabaseUp;\n\t}\n\t\n\t/**\n\t * Inits the implementation. \n\t * Connection pools may use this method to init the connections from the\n\t * database, while non-pooled implementation can provide an empty method\n\t * block if no other initialization is necessary.\n\t * <br>\n\t * Please note that this method will be called just once, at system startup. \n\t * \n\t * @throws Exception\n\t */\n\tpublic abstract void init() throws Exception;\n\t\n\t/**\n\t * Gets a connection.\n\t * Connection pools' normal behaviour will be to once connection\n\t * from the pool, while non-pooled implementations will want to\n\t * go to the database and get the connection in time the method\n\t * is called.\n\t * \n\t * @return Connection\n\t */\n\tpublic abstract Connection getConnection();\n\t\n\t/**\n\t * Releases a connection.\n\t * Connection pools will want to put the connection back to the pool list,\n\t * while non-pooled implementations should call <code>close()</code> directly\n\t * in the connection object.\n\t * \n\t * @param conn The connection to release\n\t */\n\tpublic abstract void releaseConnection(Connection conn);\n\t\n\t/**\n\t * Close all open connections.\n\t * \n\t * @throws Exception\n\t */\n\tpublic abstract void realReleaseAllConnections() throws Exception;\n}",
  "metadata": {
    "fileId": "DBConnection_java_chunk_1",
    "fileName": "DBConnection.java",
    "filePath": "src/net/jforum/DBConnection.java"
  }
}