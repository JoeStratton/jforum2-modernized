{
  "pageContent": "File Path: src/net/jforum/SessionFacade.java\n\n Original Content: public class SessionFacade implements Cacheable\n{\n\tprivate static final Logger logger = Logger.getLogger(SessionFacade.class);\n\t\n\tprivate static final String FQN = \"sessions\";\n\tprivate static final String FQN_LOGGED = FQN + \"/logged\";\n\tprivate static final String FQN_COUNT = FQN + \"/count\";\n\tprivate static final String FQN_USER_ID = FQN + \"/userId\";\n\tprivate static final String ANONYMOUS_COUNT = \"anonymousCount\";\n\tprivate static final String LOGGED_COUNT = \"loggedCount\";\n\t\n\tprivate static CacheEngine cache;\n\n\t/**\n\t * @see net.jforum.cache.Cacheable#setCacheEngine(net.jforum.cache.CacheEngine)\n\t */\n\tpublic void setCacheEngine(CacheEngine engine)\n\t{\n\t\tcache = engine;\n\t}\n\t\n\t/**\n\t * Add a new <code>UserSession</code> entry to the session.\n\t * This method will make a call to <code>JForum.getRequest.getSession().getId()</code>\n\t * to retrieve the session's id\n\t * \n\t * @param us The user session objetc to add\n\t * @see #add(UserSession, String)\n\t */\n\tpublic static void add(UserSession us)\n\t{\n\t\tadd(us, JForumExecutionContext.getRequest().getSessionContext().getId());\n\t}\n\n\t/**\n\t * Registers a new {@link UserSession}.\n\t * <p>\n\t * If a call to {@link UserSession#getUserId()} return a value different \n\t * of <code>SystemGlobals.getIntValue(ConfigKeys.ANONYMOUS_USER_ID)</code>, then \n\t * the user will be registered as \"logged\". Otherwise it will enter as anonymous.\n\t * </p>\n\t * \n\t * <p>\n\t * Please note that, in order to keep the number of guest and logged users correct, \n\t * it's caller's responsability to {@link #remove(String)} the record before adding it\n\t * again if the current session is currently represented as \"guest\". \n\t * </p>\n\t *  \n\t * @param us the UserSession to add\n\t * @param sessionId the user's session id\n\t */\n\tpublic static void add(UserSession us, String sessionId)\n\t{\n\t\tif (us.getSessionId() == null || us.getSessionId().equals(\"\")) {\n\t\t\tus.setSessionId(sessionId);\n\t\t}\n\t\t\n\t\tsynchronized (FQN) {\n\t\t\tcache.add(FQN, us.getSessionId(), us);\n\t\t\t\n\t\t\tif (!JForumExecutionContext.getForumContext().isBot()) {\n\t\t\t\tif (us.getUserId() != SystemGlobals.getIntValue(ConfigKeys.ANONYMOUS_USER_ID)) {\n\t\t\t\t\tchangeUserCount(LOGGED_COUNT, true);\n\t\t\t\t\tcache.add(FQN_LOGGED, us.getSessionId(), us);\n\t\t\t\t\tcache.add(FQN_USER_ID, Integer.toString(us.getUserId()), us.getSessionId());\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t// TODO: check the anonymous IP constraint\n\t\t\t\t\tchangeUserCount(ANONYMOUS_COUNT, true);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate static void changeUserCount(String cacheEntryName, boolean increment)\n\t{\n\t\tInteger count = (Integer)cache.get(FQN_COUNT, cacheEntryName);\n\t\t\n\t\tif (count == null) {\n\t\t\tcount = new Integer(0);\n\t\t}\n\t\t\n\t\tif (increment) {\n\t\t\tcount = new Integer(count.intValue() + 1);\n\t\t}\n\t\telse if (count.intValue() > 0) {\n\t\t\tcount = new Integer(count.intValue() - 1);\n\t\t}\n\t\t\n\t\tcache.add(FQN_COUNT, cacheEntryName, count);\n\t}\n\t\n\t/**\n\t * Add a new entry to the user's session\n\t * \n\t * @param name The attribute name\n\t * @param value The attribute value\n\t */\n\tpublic static void setAttribute(String name, Object value)\n\t{\n\t\tJForumExecutionContext.getRequest().getSessionContext().setAttribute(name, value);\n\t}\n\t\n\t/**\n\t * Removes an attribute from the session\n\t * \n\t * @param name The key associated to the the attribute to remove\n\t */\n\tpublic static void removeAttribute(String name)\n\t{\n\t\tJForumExecutionContext.getRequest().getSessionContext().removeAttribute(name);\n\t}\n\t\n\t/**\n\t * Gets an attribute value given its name\n\t * \n\t * @param name The attribute name to retrieve the value\n\t * @return The value as an Object, or null if no entry was found\n\t */\n\tpublic static Object getAttribute(String name)\n\t{\n\t\treturn JForumExecutionContext.getRequest().getSessionContext().getAttribute(name);\n\t}\n\n\t/**\n\t * Remove an entry fro the session map\n\t * \n\t * @param sessionId The session id to remove\n\t */\n\tpublic static void remove(String sessionId)\n\t{\n\t\tif (cache == null) {\n\t\t\tlogger.warn(\"Got a null cache instance. #\" + sessionId);\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tlogger.debug(\"Removing session \" + sessionId);\n\t\t\n\t\tsynchronized (FQN) {\n\t\t\tUserSession us = getUserSession(sessionId);\n\t\t\t\n\t\t\tif (us != null) {\n\t\t\t\tcache.remove(FQN_LOGGED, sessionId);\n\t\t\t\tcache.remove(FQN_USER_ID, Integer.toString(us.getUserId()));\n\t\t\t\t\n\t\t\t\tif (us.getUserId() != SystemGlobals.getIntValue(ConfigKeys.ANONYMOUS_USER_ID)) {\n\t\t\t\t\tchangeUserCount(LOGGED_COUNT, false);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tchangeUserCount(ANONYMOUS_COUNT, false);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tcache.remove(FQN, sessionId);\n\t\t}\n\t}\n\t\n\t/**\n\t * Get all registered sessions\n\t * \n\t * @return <code>ArrayList</code> with the sessions. Each entry\n\t * is an <code>UserSession</code> object.\n\t */\n\tpublic static List getAllSessions()\n\t{\n\t\tsynchronized (FQN) {\n\t\t\treturn new ArrayList(cache.getValues(FQN));\n\t\t}\n\t}\n\t\n\t/**\n\t * Gets the {@link UserSession} instance of all logged users\n\t * @return A list with the user sessions\n\t */\n\tpublic static List getLoggedSessions()\n\t{\n\t\tsynchronized (FQN) {\n\t\t\treturn new ArrayList(cache.getValues(FQN_LOGGED));\n\t\t}\n\t}\n\t\n\t/**\n\t * Get the number of logged users\n\t * @return the number of logged users\n\t */\n\tpublic static int registeredSize()\n\t{\n\t\tInteger count = (Integer)cache.get(FQN_COUNT, LOGGED_COUNT);\n\n\t\treturn (count == null ? 0 : count.intValue());\n\t}\n\t\n\t/**\n\t * Get the number of anonymous users\n\t * @return the nuber of anonymous users\n\t */\n\tpublic static int anonymousSize()\n\t{\n\t\tInteger count = (Integer)cache.get(FQN_COUNT, ANONYMOUS_COUNT);\n\n\t\treturn (count == null ? 0 : count.intValue());\n\t}\n\t\n\tpublic static void clear()\n\t{\n\t\tsynchronized (FQN) {\n\t\t\tcache.add(FQN, new HashMap());\n\t\t\tcache.add(FQN_COUNT, LOGGED_COUNT, new Integer(0));\n\t\t\tcache.add(FQN_COUNT, ANONYMOUS_COUNT, new Integer(0));\n\t\t\tcache.remove(FQN_LOGGED);\n\t\t\tcache.remove(FQN_USER_ID);\n\t\t}\n\t}\n\t\n\t/**\n\t * Gets the user's <code>UserSession</code> object\n\t * \n\t * @return The <code>UserSession</code> associated to the user's session\n\t */\n\tpublic static UserSession getUserSession()\n\t{\n\t\treturn getUserSession(JForumExecutionContext.getRequest().getSessionContext().getId());\n\t}\n\t\n\t/**\n\t * Gets an {@link UserSession} by the session id.\n\t * \n\t * @param sessionId the session's id\n\t * @return an <b>immutable</b> UserSession, or <code>null</code> if no entry found\n\t */\n\tpublic static UserSession getUserSession(String sessionId)\n\t{\n\t\tif (cache != null) {\n\t\t\tUserSession us = (UserSession)cache.get(FQN, sessionId);\n\t\t\treturn (us != null ? us : null);\n\t\t}\n\n\t\tlogger.warn(\"Got a null cache in getUserSession. #\" + sessionId);\n\t\treturn null;\n\t}\n\n\t/**\n\t * Gets the number of session elements.\n\t * \n\t * @return The number of session elements currently online (without bots)\n\t */\n\tpublic static int size()\n\t{\n\t\treturn (anonymousSize() + registeredSize());\n\t}\n\t\n\t/**\n\t * Verify if the user in already loaded\n\t * \n\t * @param username The username to check\n\t * @return The session id if the user is already registered into the session, \n\t * or <code>null</code> if it is not.\n\t */\n\tpublic static String isUserInSession(String username)\n\t{\n\t\tint aid = SystemGlobals.getIntValue(ConfigKeys.ANONYMOUS_USER_ID);\n\t\t\n\t\tsynchronized (FQN) {\n\t\t\tfor (Iterator iter = cache.getValues(FQN).iterator(); iter.hasNext(); ) {\n\t\t\t\tUserSession us = (UserSession)iter.next();\n\t\t\t\tString thisUsername = us.getUsername();\n\t\t\t\t\n\t\t\t\tif (thisUsername == null) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (us.getUserId() != aid && thisUsername.equals(username)) {\n\t\t\t\t\treturn us.getSessionId();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn null;\n\t}\n\t\n\t/**\n\t * Verify if there is an user in the session with the \n\t * user id passed as parameter.\n\t * \n\t * @param userId The user id to check for existance in the session\n\t * @return The session id if the user is already registered into the session, \n\t * or <code>null</code> if it is not.\n\t */\n\tpublic static String isUserInSession(int userId)\n\t{\n\t\treturn (String)cache.get(FQN_USER_ID, Integer.toString(userId));\n\t}\n\t\n\t/**\n\t * Verify is the user is logged in.\n\t * \n\t * @return <code>true</code> if the user is logged, or <code>false</code> if is \n\t * an anonymous user.\n\t */\n\tpublic static boolean isLogged()\n\t{\n\t\treturn \"1\".equals(SessionFacade.getAttribute(ConfigKeys.LOGGED));\n\t}\n\t\n\t/**\n\t * Marks the current user session as \"logged\" in \n\t */\n\tpublic static void makeLogged()\n\t{\n\t\tSessionFacade.setAttribute(ConfigKeys.LOGGED, \"1\");\n\t}\n\t\n\t/**\n\t * Marks the current user session as \"logged\" out\n\t *\n\t */\n\tpublic static void makeUnlogged()\n\t{\n\t\tSessionFacade.removeAttribute(ConfigKeys.LOGGED);\n\t}\n\t\n\t/**\n\t * Returns a map containing information about read time of a set of topics.\n\t * @return a map where the key is the topicId represented as an Integer, and the\n\t * value is a Long representing the read time of such topic. \n\t */\n\tpublic static Map getTopicsReadTime()\n\t{\n\t\tMap tracking = (Map)getAttribute(ConfigKeys.TOPICS_READ_TIME);\n\t\t\n\t\tif (tracking == null) {\n\t\t\ttracking = new HashMap();\n\t\t\tsetAttribute(ConfigKeys.TOPICS_READ_TIME, tracking);\n\t\t}\n\t\t\n\t\treturn tracking;\n\t}\n\t\n\t/**\n\t * Returns a map with \"all topics read\" flags for some forum \n\t * @return a map where the key is the forum id represented as an Integer, \n\t * and the value is a Long representing the read time to be used in the verifications.\n\t */\n\tpublic static Map getTopicsReadTimeByForum()\n\t{\n\t\treturn (Map)getAttribute(ConfigKeys.TOPICS_READ_TIME_BY_FORUM);\n\t}",
  "metadata": {
    "fileId": "SessionFacade_java_chunk_2",
    "fileName": "SessionFacade.java",
    "filePath": "src/net/jforum/SessionFacade.java"
  }
}