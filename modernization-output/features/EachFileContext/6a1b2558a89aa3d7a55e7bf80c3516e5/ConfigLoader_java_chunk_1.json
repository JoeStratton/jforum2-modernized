{
  "pageContent": "File Path: src/net/jforum/ConfigLoader.java\n\n Original Content: /*\n * Copyright (c) JForum Team\n * All rights reserved.\n * \n * Redistribution and use in source and binary forms, \n * with or without modification, are permitted provided \n * that the following conditions are met:\n * \n * 1) Redistributions of source code must retain the above \n * copyright notice, this list of conditions and the \n * following  disclaimer.\n * 2)  Redistributions in binary form must reproduce the \n * above copyright notice, this list of conditions and \n * the following disclaimer in the documentation and/or \n * other materials provided with the distribution.\n * 3) Neither the name of \"Rafael Steil\" nor \n * the names of its contributors may be used to endorse \n * or promote products derived from this software without \n * specific prior written permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT \n * HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY \n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, \n * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF \n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR \n * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL \n * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE \n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, \n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES \n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF \n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, \n * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER \n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER \n * IN CONTRACT, STRICT LIABILITY, OR TORT \n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN \n * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF \n * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE\n * \n * Created on 02/11/2004 12:45:37\n * The JForum Project\n * http://www.jforum.net\n */\npackage net.jforum;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.Iterator;\nimport java.util.Map;\nimport java.util.Properties;\n\nimport net.jforum.api.integration.mail.pop.POPJobStarter;\nimport net.jforum.cache.CacheEngine;\nimport net.jforum.cache.Cacheable;\nimport net.jforum.dao.DataAccessDriver;\nimport net.jforum.exceptions.CacheEngineStartupException;\nimport net.jforum.exceptions.ForumException;\nimport net.jforum.search.SearchFacade;\nimport net.jforum.sso.LoginAuthenticator;\nimport net.jforum.summary.SummaryScheduler;\nimport net.jforum.util.FileMonitor;\nimport net.jforum.util.preferences.ConfigKeys;\nimport net.jforum.util.preferences.QueriesFileListener;\nimport net.jforum.util.preferences.SystemGlobals;\nimport net.jforum.util.preferences.SystemGlobalsListener;\n\nimport org.apache.log4j.Logger;\nimport org.quartz.SchedulerException;\n\n/**\n * General utilities methods for loading configurations for JForum.\n * \n * @author Rafael Steil\n * @version $Id: ConfigLoader.java,v 1.30 2007/07/27 15:42:56 rafaelsteil Exp $\n */\npublic class ConfigLoader \n{\n\tprivate static final Logger logger = Logger.getLogger(ConfigLoader.class);\n\tprivate static CacheEngine cache;\n\t\n\t/**\n\t * Start ( or restart ) <code>SystemGlobals</code>.\n\t * This method loads all configuration keys set at\n\t * <i>SystemGlobals.properties</i>, <i>&lt;user.name&gt;.properties</i>\n\t * and database specific stuff.\n\t * \n\t * @param appPath The application root's directory\n\t */\n\tpublic static void startSystemglobals(String appPath)\n\t{\n\t\tSystemGlobals.initGlobals(appPath, appPath + \"/WEB-INF/config/SystemGlobals.properties\");\n\t\tSystemGlobals.loadAdditionalDefaults(SystemGlobals.getValue(ConfigKeys.DATABASE_DRIVER_CONFIG));\n\t\t\n\t\tif (new File(SystemGlobals.getValue(ConfigKeys.INSTALLATION_CONFIG)).exists()) {\n\t\t\tSystemGlobals.loadAdditionalDefaults(SystemGlobals.getValue(ConfigKeys.INSTALLATION_CONFIG));\n\t\t}\n\t}\n\n\t/**\n\t * Loads module mappings for the system.\n\t * \n\t * @param baseConfigDir The directory where the file <i>modulesMapping.properties</i> is.\n\t * @return The <code>java.util.Properties</code> instance, with the loaded modules \n\t */\n\tpublic static Properties loadModulesMapping(String baseConfigDir)\n\t{\n\t\tFileInputStream fis = null;\n\t\t\n\t\ttry {\n\t\t\tProperties modulesMapping = new Properties();\n\t\t\tfis = new FileInputStream(baseConfigDir + \"/modulesMapping.properties\");\n\t\t\tmodulesMapping.load(fis);\n\n\t\t\treturn modulesMapping;\n\t\t}\n\t\tcatch (IOException e) {\n\t\t\tthrow new ForumException( e);\n\t\t}\n\t\tfinally {\n\t\t\tif (fis != null) {\n\t\t\t\ttry { fis.close(); } catch (Exception e) {}\n\t\t\t}\n\t\t}\n    }\n\t\n\tpublic static void createLoginAuthenticator()\n\t{\n\t\tString className = SystemGlobals.getValue(ConfigKeys.LOGIN_AUTHENTICATOR);\n\n\t\ttry {\n\t\t\tLoginAuthenticator loginAuthenticator = (LoginAuthenticator) Class.forName(className).newInstance();\n\t\t\tSystemGlobals.setObjectValue(ConfigKeys.LOGIN_AUTHENTICATOR_INSTANCE, loginAuthenticator);\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tthrow new ForumException(\"Error while trying to create a login.authenticator instance (\"\n\t\t\t\t+ className + \"): \" + e, e);\n\t\t}\n\t}\n\t\n\t/**\n\t * Load url patterns.\n\t * The method tries to load url patterns from <i>WEB-INF/config/urlPattern.properties</i>\n\t */\n\tpublic static void loadUrlPatterns()  \n\t{\n\t\tFileInputStream fis = null;\n\t\t\n\t\ttry {\n\t\t\tProperties p = new Properties();\n\t\t\tfis = new FileInputStream(SystemGlobals.getValue(ConfigKeys.CONFIG_DIR) + \"/urlPattern.properties\");\n\t\t\tp.load(fis);\n\n\t\t\tfor (Iterator iter = p.entrySet().iterator(); iter.hasNext(); ) {\n\t\t\t\tMap.Entry entry = (Map.Entry) iter.next();\n\t\t\t\tUrlPatternCollection.addPattern((String)entry.getKey(), (String)entry.getValue());\n\t\t\t}\n\t\t}\n\t\tcatch (IOException e) {\n\t\t\tthrow new ForumException(e);\n\t\t}\n\t\tfinally {\n\t\t\tif (fis != null) {\n\t\t\t\ttry { fis.close(); } catch (Exception e) {}\n\t\t\t}\n\t\t}\n    }\n\t\n\t/**\n\t * Listen for changes in common configuration files.\n\t * The watched files are: <i>generic_queries.sql</i>, \n\t * <i>&lt;database_name&gt;.sql</i>, <i>SystemGlobals.properties</i>\n\t * and <i>&lt;user.name&gt;.properties</i>\n\t */\n\tpublic static void listenForChanges()\n\t{\n\t\tint fileChangesDelay = SystemGlobals.getIntValue(ConfigKeys.FILECHANGES_DELAY);\n\t\t\n\t\tif (fileChangesDelay > 0) {\n\t\t\t// Queries\n\t\t\tFileMonitor.getInstance().addFileChangeListener(new QueriesFileListener(),\n\t\t\t\tSystemGlobals.getValue(ConfigKeys.SQL_QUERIES_GENERIC), fileChangesDelay);\n\n\t\t\tFileMonitor.getInstance().addFileChangeListener(new QueriesFileListener(),\n\t\t\t\tSystemGlobals.getValue(ConfigKeys.SQL_QUERIES_DRIVER), fileChangesDelay);\n\n\t\t\t// System Properties\n\t\t\tFileMonitor.getInstance().addFileChangeListener(new SystemGlobalsListener(),\n\t\t\t\tSystemGlobals.getValue(ConfigKeys.DEFAULT_CONFIG), fileChangesDelay);\n\n\t\t\tConfigLoader.listenInstallationConfig();\n        }\n\t}\n\t\n\tpublic static void listenInstallationConfig()\n\t{\n\t\tint fileChangesDelay = SystemGlobals.getIntValue(ConfigKeys.FILECHANGES_DELAY);\n\t\t\n\t\tif (fileChangesDelay > 0) {\n\t\t\tif (new File(SystemGlobals.getValue(ConfigKeys.INSTALLATION_CONFIG)).exists()) {\n\t\t\t\tFileMonitor.getInstance().addFileChangeListener(new SystemGlobalsListener(),\n\t\t\t\t\t\tSystemGlobals.getValue(ConfigKeys.INSTALLATION_CONFIG), fileChangesDelay);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tpublic static void loadDaoImplementation()\n\t{\n\t\t// Start the dao.driver implementation\n\t\tString driver = SystemGlobals.getValue(ConfigKeys.DAO_DRIVER);\n\n\t\tlogger.info(\"Loading JDBC driver \" + driver);\n\n\t\ttry {\n\t\t\tClass c = Class.forName(driver);\n\t\t\tDataAccessDriver d = (DataAccessDriver)c.newInstance();\n\t\t\tDataAccessDriver.init(d);\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tthrow new ForumException(e);\n\t\t}\n    }\n\t\n\tpublic static void startCacheEngine()\n\t{\n\t\ttry {\n\t\t\tString cacheImplementation = SystemGlobals.getValue(ConfigKeys.CACHE_IMPLEMENTATION);\n\t\t\tlogger.info(\"Using cache engine: \" + cacheImplementation);\n\t\t\t\n\t\t\tcache = (CacheEngine)Class.forName(cacheImplementation).newInstance();\n\t\t\tcache.init();\n\t\t\t\n\t\t\tString s = SystemGlobals.getValue(ConfigKeys.CACHEABLE_OBJECTS);\n\t\t\tif (s == null || s.trim().equals(\"\")) {\n\t\t\t\tlogger.warn(\"Cannot find Cacheable objects to associate the cache engine instance.\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tString[] cacheableObjects = s.split(\",\");\n\t\t\tfor (int i = 0; i < cacheableObjects.length; i++) {\n\t\t\t\tlogger.info(\"Creating an instance of \" + cacheableObjects[i]);\n\t\t\t\tObject o = Class.forName(cacheableObjects[i].trim()).newInstance();\n\t\t\t\t\n\t\t\t\tif (o instanceof Cacheable) {\n\t\t\t\t\t((Cacheable)o).setCacheEngine(cache);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tlogger.error(cacheableObjects[i] + \" is not an instance of net.jforum.cache.Cacheable\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tthrow new CacheEngineStartupException(\"Error while starting the cache engine\", e);\n\t\t}\n\t}\n\t\n\tpublic static void stopCacheEngine()\n\t{\n\t\tif (cache != null) {\n\t\t\tcache.stop();\n\t\t}\n\t}\n\t\n\tpublic static void startSearchIndexer()\n\t{\n\t\tSearchFacade.init();\n\t}\n\n\t/**\n\t * Init a Job who will send e-mails to the all users with a summary of posts...\n\t * @throws SchedulerException\n\t * @throws IOException\n\t */\n\tpublic static void startSummaryJob() throws SchedulerException {\n\t\tSummaryScheduler.startJob();\n\t}\n\t\n\tpublic static void startPop3Integration() throws SchedulerException\n\t{\n\t\tPOPJobStarter.startJob();\n\t}\n}",
  "metadata": {
    "fileId": "ConfigLoader_java_chunk_1",
    "fileName": "ConfigLoader.java",
    "filePath": "src/net/jforum/ConfigLoader.java"
  }
}