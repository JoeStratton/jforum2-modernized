{
  "pageContent": "File Path: src/net/jforum/ControllerUtils.java\n\n Original Content: public class ControllerUtils\n{\n\t/**\n\t * Setup common variables used by almost all templates.\n\t * \n\t * @param context SimpleHash The context to use\n     * @param jforumContext JForumContext\n\t */\n\tpublic void prepareTemplateContext(SimpleHash context, ForumContext jforumContext)\n\t{\n\t\tRequestContext request = JForumExecutionContext.getRequest();\n\t\t\n\t\tcontext.put(\"karmaEnabled\", SecurityRepository.canAccess(SecurityConstants.PERM_KARMA_ENABLED));\n\t\tcontext.put(\"dateTimeFormat\", SystemGlobals.getValue(ConfigKeys.DATE_TIME_FORMAT));\n\t\tcontext.put(\"autoLoginEnabled\", SystemGlobals.getBoolValue(ConfigKeys.AUTO_LOGIN_ENABLED));\n\t\tcontext.put(\"sso\", ConfigKeys.TYPE_SSO.equals(SystemGlobals.getValue(ConfigKeys.AUTHENTICATION_TYPE)));\n\t\tcontext.put(\"contextPath\", request.getContextPath());\n\t\tcontext.put(\"serverName\", request.getServerName());\n\t\tcontext.put(\"templateName\", SystemGlobals.getValue(ConfigKeys.TEMPLATE_DIR));\n\t\tcontext.put(\"extension\", SystemGlobals.getValue(ConfigKeys.SERVLET_EXTENSION));\n\t\tcontext.put(\"serverPort\", Integer.toString(request.getServerPort()));\n\t\tcontext.put(\"I18n\", I18n.getInstance());\n\t\tcontext.put(\"version\", SystemGlobals.getValue(ConfigKeys.VERSION));\n\t\tcontext.put(\"forumTitle\", SystemGlobals.getValue(ConfigKeys.FORUM_PAGE_TITLE));\n\t\tcontext.put(\"pageTitle\", SystemGlobals.getValue(ConfigKeys.FORUM_PAGE_TITLE));\n\t\tcontext.put(\"metaKeywords\", SystemGlobals.getValue(ConfigKeys.FORUM_PAGE_METATAG_KEYWORDS));\n\t\tcontext.put(\"metaDescription\", SystemGlobals.getValue(ConfigKeys.FORUM_PAGE_METATAG_DESCRIPTION));\n\t\tcontext.put(\"forumLink\", SystemGlobals.getValue(ConfigKeys.FORUM_LINK));\n\t\tcontext.put(\"homepageLink\", SystemGlobals.getValue(ConfigKeys.HOMEPAGE_LINK));\n\t\tcontext.put(\"encoding\", SystemGlobals.getValue(ConfigKeys.ENCODING));\n\t\tcontext.put(\"bookmarksEnabled\", SecurityRepository.canAccess(SecurityConstants.PERM_BOOKMARKS_ENABLED));\n\t\tcontext.put(\"canAccessModerationLog\", SecurityRepository.canAccess(SecurityConstants.PERM_MODERATION_LOG));\n\t\tcontext.put(\"JForumContext\", jforumContext);\n\t\tcontext.put(\"timestamp\", new Long(System.currentTimeMillis()));\n\t}\n\n\t/**\n\t * Checks user credentials / automatic login.\n\t * \n\t * @param userSession The UserSession instance associated to the user's session\n\t * @return <code>true</code> if auto login was enabled and the user was sucessfuly \n\t * logged in.\n\t * @throws DatabaseException\n\t */\n\tprotected boolean checkAutoLogin(UserSession userSession)\n\t{\n\t\tString cookieName = SystemGlobals.getValue(ConfigKeys.COOKIE_NAME_DATA);\n\n\t\tCookie cookie = this.getCookieTemplate(cookieName);\n\t\tCookie hashCookie = this.getCookieTemplate(SystemGlobals.getValue(ConfigKeys.COOKIE_USER_HASH));\n\t\tCookie autoLoginCookie = this.getCookieTemplate(SystemGlobals.getValue(ConfigKeys.COOKIE_AUTO_LOGIN));\n\n\t\tif (hashCookie != null && cookie != null\n\t\t\t\t&& !cookie.getValue().equals(SystemGlobals.getValue(ConfigKeys.ANONYMOUS_USER_ID))\n\t\t\t\t&& autoLoginCookie != null \n\t\t\t\t&& \"1\".equals(autoLoginCookie.getValue())) {\n\t\t\tString uid = cookie.getValue();\n\t\t\tString uidHash = hashCookie.getValue();\n\n\t\t\t// Load the user-specific security hash from the database\n\t\t\ttry {\n\t\t\t\tUserDAO userDao = DataAccessDriver.getInstance().newUserDAO();\n\t\t\t\tString userHash = userDao.getUserAuthHash(Integer.parseInt(uid));\n\t\t\t\t\n\t\t\t\tif (userHash == null || userHash.trim().length() == 0) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tString securityHash = MD5.crypt(userHash);\n\t\n\t\t\t\tif (securityHash.equals(uidHash)) {\n\t\t\t\t\tint userId = Integer.parseInt(uid);\n\t\t\t\t\tuserSession.setUserId(userId);\n\t\t\t\t\t\n\t\t\t\t\tUser user = userDao.selectById(userId);\n\t\n\t\t\t\t\tif (user == null || user.getId() != userId || user.isDeleted()) {\n\t\t\t\t\t\tuserSession.makeAnonymous();\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\n\t\t\t\t\tthis.configureUserSession(userSession, user);\n\t\t\t\t\t\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\tthrow new DatabaseException(e);\n\t\t\t}\n\t\t\t\n\t\t\tuserSession.makeAnonymous();\n\t\t}\n\t\t\n\t\treturn false;\n\t}\n\n\t/**\n\t * Setup optios and values for the user's session if authentication was ok.\n\t * \n\t * @param userSession The UserSession instance of the user\n\t * @param user The User instance of the authenticated user\n\t */\n\tprotected void configureUserSession(UserSession userSession, User user)\n\t{\n\t\tuserSession.dataToUser(user);\n\n\t\t// As an user may come back to the forum before its\n\t\t// last visit's session expires, we should check for\n\t\t// existent user information and then, if found, store\n\t\t// it to the database before getting his information back.\n\t\tString sessionId = SessionFacade.isUserInSession(user.getId());\n\n\t\tUserSession tmpUs;\n\t\tif (sessionId != null) {\n\t\t\tSessionFacade.storeSessionData(sessionId, JForumExecutionContext.getConnection());\n\t\t\ttmpUs = SessionFacade.getUserSession(sessionId);\n\t\t\tSessionFacade.remove(sessionId);\n\t\t}\n\t\telse {\n\t\t\tUserSessionDAO sm = DataAccessDriver.getInstance().newUserSessionDAO();\n\t\t\ttmpUs = sm.selectById(userSession, JForumExecutionContext.getConnection());\n\t\t}\n\n\t\tif (tmpUs == null) {\n\t\t\tuserSession.setLastVisit(new Date(System.currentTimeMillis()));\n\t\t}\n\t\telse {\n\t\t\t// Update last visit and session start time\n\t\t\tuserSession.setLastVisit(new Date(tmpUs.getStartTime().getTime() + tmpUs.getSessionTime()));\n\t\t}\n\n\t\t// If the execution point gets here, then the user\n\t\t// has chosen \"autoLogin\"\n\t\tuserSession.setAutoLogin(true);\n\t\tSessionFacade.makeLogged();\n\n\t\tI18n.load(user.getLang());\n\t}\n\n\t/**\n\t * Checks for user authentication using some SSO implementation\n     * @param userSession UserSession\n     */\n\tprotected void checkSSO(UserSession userSession)\n\t{\n\t\ttry {\n\t\t\tSSO sso = (SSO) Class.forName(SystemGlobals.getValue(ConfigKeys.SSO_IMPLEMENTATION)).newInstance();\n\t\t\tString username = sso.authenticateUser(JForumExecutionContext.getRequest());\n\n\t\t\tif (username == null || username.trim().equals(\"\")) {\n\t\t\t\tuserSession.makeAnonymous();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tSSOUtils utils = new SSOUtils();\n\n\t\t\t\tif (!utils.userExists(username)) {\n\t\t\t\t\tSessionContext session = JForumExecutionContext.getRequest().getSessionContext();\n\n\t\t\t\t\tString email = (String) session.getAttribute(SystemGlobals.getValue(ConfigKeys.SSO_EMAIL_ATTRIBUTE));\n\t\t\t\t\tString password = (String) session.getAttribute(SystemGlobals.getValue(ConfigKeys.SSO_PASSWORD_ATTRIBUTE));\n\n\t\t\t\t\tif (email == null) {\n\t\t\t\t\t\temail = SystemGlobals.getValue(ConfigKeys.SSO_DEFAULT_EMAIL);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (password == null) {\n\t\t\t\t\t\tpassword = SystemGlobals.getValue(ConfigKeys.SSO_DEFAULT_PASSWORD);\n\t\t\t\t\t}\n\n\t\t\t\t\tutils.register(password, email);\n\t\t\t\t}\n\n\t\t\t\tthis.configureUserSession(userSession, utils.getUser());\n\t\t\t}\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new ForumException(\"Error while executing SSO actions: \" + e);\n\t\t}\n\t}\n\n\t/**\n\t * Do a refresh in the user's session. This method will update the last visit time for the\n\t * current user, as well checking for authentication if the session is new or the SSO user has\n\t * changed\n\t */\n\tpublic void refreshSession()\n\t{\n\t\tUserSession userSession = SessionFacade.getUserSession();\n\t\tRequestContext request = JForumExecutionContext.getRequest();\n\n\t\tif (userSession == null) {\n\t\t\tuserSession = new UserSession();\n\t\t\tuserSession.registerBasicInfo();\n\t\t\tuserSession.setSessionId(request.getSessionContext().getId());\n\t\t\tuserSession.setIp(request.getRemoteAddr());\n\t\t\tSessionFacade.makeUnlogged();\n\n\t\t\tif (!JForumExecutionContext.getForumContext().isBot()) {\n\t\t\t\t// Non-SSO authentications can use auto login\n\t\t\t\tif (!ConfigKeys.TYPE_SSO.equals(SystemGlobals.getValue(ConfigKeys.AUTHENTICATION_TYPE))) {\n\t\t\t\t\tif (SystemGlobals.getBoolValue(ConfigKeys.AUTO_LOGIN_ENABLED)) {\n\t\t\t\t\t\tthis.checkAutoLogin(userSession);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tuserSession.makeAnonymous();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthis.checkSSO(userSession);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tSessionFacade.add(userSession);\n\t\t}\n\t\telse if (ConfigKeys.TYPE_SSO.equals(SystemGlobals.getValue(ConfigKeys.AUTHENTICATION_TYPE))) {\n\t\t\tSSO sso;\n\t\t\t\n\t\t\ttry {\n\t\t\t\tsso = (SSO) Class.forName(SystemGlobals.getValue(ConfigKeys.SSO_IMPLEMENTATION)).newInstance();\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\tthrow new ForumException(e);\n\t\t\t}\n\n\t\t\t// If SSO, then check if the session is valid\n\t\t\tif (!sso.isSessionValid(userSession, request)) {\n\t\t\t\tSessionFacade.remove(userSession.getSessionId());\n\t\t\t\trefreshSession();\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tSessionFacade.getUserSession().updateSessionTime();\n\t\t}\n\t}\n\n\t/**\n\t * Gets a cookie by its name.\n\t * \n\t * @param name The cookie name to retrieve\n\t * @return The <code>Cookie</code> object if found, or <code>null</code> oterwhise\n\t */\n\tpublic static Cookie getCookie(String name)\n\t{\n\t\tCookie[] cookies = JForumExecutionContext.getRequest().getCookies();\n\n\t\tif (cookies != null) {\n\t\t\tfor (int i = 0; i < cookies.length; i++) {\n\t\t\t\tCookie c = cookies[i];\n\n\t\t\t\tif (c.getName().equals(name)) {\n\t\t\t\t\treturn c;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\t\n\t/**\n\t * Template method to get a cookie.\n\t * Useful to situations when a subclass\n\t * wants to have a different way to \n\t * retrieve a cookie.\n\t * @param name The cookie name to retrieve\n\t * @return The Cookie object if found, or null otherwise\n\t * @see #getCookie(String)\n\t */\n\tprotected Cookie getCookieTemplate(String name)\n\t{\n\t\treturn ControllerUtils.getCookie(name);\n\t}\n\n\t/**\n\t * Add or update a cookie. This method adds a cookie, serializing its value using XML.\n\t * \n\t * @param name The cookie name.\n\t * @param value The cookie value\n\t */\n\tpublic static void addCookie(String name, String value)\n\t{\n\t\tint maxAge = 3600 * 24 * 365;\n\t\t\n\t\tif (value == null) {\n\t\t\tmaxAge = 0;\n\t\t\tvalue = \"\";\n\t\t}\n\t\t\n\t\tCookie cookie = new Cookie(name, value);\n\t\tcookie.setMaxAge(maxAge);\n\t\tcookie.setPath(\"/\");",
  "metadata": {
    "fileId": "ControllerUtils_java_chunk_2",
    "fileName": "ControllerUtils.java",
    "filePath": "src/net/jforum/ControllerUtils.java"
  }
}