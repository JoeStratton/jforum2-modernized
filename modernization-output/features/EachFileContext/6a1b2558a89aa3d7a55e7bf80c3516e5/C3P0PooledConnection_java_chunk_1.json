{
  "pageContent": "File Path: src/net/jforum/C3P0PooledConnection.java\n\n Original Content: /*\n * Copyright (c) JForum Team\n * All rights reserved.\n * \n * Redistribution and use in source and binary forms, \n * with or without modification, are permitted provided \n * that the following conditions are met:\n * \n * 1) Redistributions of source code must retain the above \n * copyright notice, this list of conditions and the \n * following  disclaimer.\n * 2)  Redistributions in binary form must reproduce the \n * above copyright notice, this list of conditions and \n * the following disclaimer in the documentation and/or \n * other materials provided with the distribution.\n * 3) Neither the name of \"Rafael Steil\" nor \n * the names of its contributors may be used to endorse \n * or promote products derived from this software without \n * specific prior written permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT \n * HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY \n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, \n * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF \n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR \n * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL \n * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE \n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, \n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES \n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF \n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, \n * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER \n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER \n * IN CONTRACT, STRICT LIABILITY, OR TORT \n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN \n * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF \n * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE\n * \n * Created on 30/11/2005 17:07:51\n * The JForum Project\n * http://www.jforum.net\n */\npackage net.jforum;\n\nimport java.lang.reflect.Method;\nimport java.sql.Connection;\n\nimport net.jforum.exceptions.DatabaseException;\nimport net.jforum.util.preferences.ConfigKeys;\nimport net.jforum.util.preferences.SystemGlobals;\n\nimport com.mchange.v2.c3p0.ComboPooledDataSource;\nimport com.mchange.v2.c3p0.DataSources;\n\n/**\n * @author Rafael Steil\n * @version $Id: C3P0PooledConnection.java,v 1.7 2007/04/12 02:11:52 rafaelsteil Exp $\n */\npublic class C3P0PooledConnection extends DBConnection\n{\n\tprivate ComboPooledDataSource ds;\n\t\n\t/**\n\t * \n\t * @see net.jforum.DBConnection#init()\n\t */\n\tpublic void init() throws Exception\n\t{\n\t\tthis.ds = new ComboPooledDataSource();\n\t\t\n\t\tthis.ds.setDriverClass(SystemGlobals.getValue(ConfigKeys.DATABASE_CONNECTION_DRIVER));\n\t\tthis.ds.setJdbcUrl(SystemGlobals.getValue(ConfigKeys.DATABASE_CONNECTION_STRING));\n\t\tthis.ds.setMinPoolSize(SystemGlobals.getIntValue(ConfigKeys.DATABASE_POOL_MIN));\n\t\tthis.ds.setMaxPoolSize(SystemGlobals.getIntValue(ConfigKeys.DATABASE_POOL_MAX));\n\t\tthis.ds.setIdleConnectionTestPeriod(SystemGlobals.getIntValue(ConfigKeys.DATABASE_PING_DELAY));\n\t\t\n\t\tthis.extraParams();\n\t}\n\t\n\tprivate void extraParams()\n\t{\n\t\tString extra = SystemGlobals.getValue(ConfigKeys.C3P0_EXTRA_PARAMS);\n\t\t\n\t\tif (extra != null && extra.trim().length() > 0) {\n\t\t\tString[] p = extra.split(\";\");\n\t\t\t\n\t\t\tfor (int i = 0; i < p.length; i++) {\n\t\t\t\tString[] kv = p[i].trim().split(\"=\");\n\t\t\t\t\n\t\t\t\tif (kv.length == 2) {\n\t\t\t\t\tthis.invokeSetter(kv[0], kv[1]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\t/**\n\t * Huge hack to invoke methods without the need of an external configuration file\n\t * and whithout knowing the argument's type\n\t */\n\tprivate void invokeSetter(String propertyName, String value)\n\t{\n\t\ttry {\n\t\t\tString setter = \"set\" + propertyName.substring(0, 1).toUpperCase() + propertyName.substring(1);\n\t\t\t\n\t\t\tMethod[] methods = this.ds.getClass().getMethods();\n\t\t\t\n\t\t\tfor (int i = 0; i < methods.length; i++) {\n\t\t\t\tMethod method = methods[i];\n\t\t\t\t\n\t\t\t\tif (method.getName().equals(setter)) {\n\t\t\t\t\tClass[] paramTypes = method.getParameterTypes();\n\t\t\t\t\t\n\t\t\t\t\tif (paramTypes[0] == String.class) {\n\t\t\t\t\t\tmethod.invoke(this.ds, new Object[] { value });\n\t\t\t\t\t}\n\t\t\t\t\telse if (paramTypes[0] == int.class) {\n\t\t\t\t\t\tmethod.invoke(this.ds, new Object[] { new Integer(value) });\n\t\t\t\t\t}\n\t\t\t\t\telse if (paramTypes[0] == boolean.class) {\n\t\t\t\t\t\tmethod.invoke(this.ds, new Object[] { Boolean.valueOf(value) });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\t\n\t/**\n\t * @see net.jforum.DBConnection#getConnection()\n\t */\n\tpublic Connection getConnection()\n\t{\n\t\ttry {\n\t\t\treturn this.ds.getConnection();\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tthrow new DatabaseException(e);\n\t\t}\n\t}\n\n\t/**\n\t * @see net.jforum.DBConnection#releaseConnection(java.sql.Connection)\n\t */\n\tpublic void releaseConnection(Connection conn)\n\t{\n        if (conn==null) {\n            return;\n        }\n\n        try {\n\t\t\tconn.close();\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\t/**\n\t * @see net.jforum.DBConnection#realReleaseAllConnections()\n\t */\n\tpublic void realReleaseAllConnections() throws Exception\n\t{\n\t\tDataSources.destroy(this.ds);\n\t}\n}",
  "metadata": {
    "fileId": "C3P0PooledConnection_java_chunk_1",
    "fileName": "C3P0PooledConnection.java",
    "filePath": "src/net/jforum/C3P0PooledConnection.java"
  }
}