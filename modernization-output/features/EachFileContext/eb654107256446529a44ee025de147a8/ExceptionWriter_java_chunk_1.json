{
  "pageContent": "File Path: src/net/jforum/exceptions/ExceptionWriter.java\n\n Original Content: /*\n * Copyright (c) JForum Team\n * All rights reserved.\n * \n * Redistribution and use in source and binary forms, \n * with or without modification, are permitted provided \n * that the following conditions are met:\n * \n * 1) Redistributions of source code must retain the above \n * copyright notice, this list of conditions and the \n * following  disclaimer.\n * 2)  Redistributions in binary form must reproduce the \n * above copyright notice, this list of conditions and \n * the following disclaimer in the documentation and/or \n * other materials provided with the distribution.\n * 3) Neither the name of \"Rafael Steil\" nor \n * the names of its contributors may be used to endorse \n * or promote products derived from this software without \n * specific prior written permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT \n * HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY \n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, \n * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF \n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR \n * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL \n * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE \n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, \n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES \n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF \n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, \n * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER \n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER \n * IN CONTRACT, STRICT LIABILITY, OR TORT \n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN \n * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF \n * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE\n * /*\n * Created on Feb 3, 2005 5:15:34 PM\n  * The JForum Project\n * http://www.jforum.net\n */\npackage net.jforum.exceptions;\n\nimport java.io.PrintWriter;\nimport java.io.StringWriter;\nimport java.io.Writer;\n\nimport net.jforum.JForumExecutionContext;\nimport net.jforum.SessionFacade;\nimport net.jforum.context.RequestContext;\nimport net.jforum.util.preferences.ConfigKeys;\nimport net.jforum.util.preferences.SystemGlobals;\n\nimport org.apache.log4j.Logger;\n\nimport freemarker.template.SimpleHash;\nimport freemarker.template.Template;\n\n/**\n * @author Rafael Steil\n * @version $Id: ExceptionWriter.java,v 1.14 2007/10/10 04:54:20 rafaelsteil Exp $\n */\npublic class ExceptionWriter\n{\n\tprivate static Logger logger = Logger.getLogger(ExceptionWriter.class);\n\t\n\tpublic void handleExceptionData(Throwable t, Writer w, RequestContext request)\n\t{\n\t\tStringWriter strWriter = new StringWriter();\n\t\tPrintWriter writer = new PrintWriter(strWriter);\n\t\tt.printStackTrace(writer);\t\n\t\t\n\t\tString currentUrl = this.extractCurrentUrl(request);\n\t\t\n\t\twriter.write(currentUrl);\n\t\twriter.close();\n\t\t\n\t\ttry {\n\t\t\tlogger.error(strWriter);\n\n\t\t\tString message = \"\";\n\t\t\tThrowable cause = t.getCause();\n\t\t\t\n\t\t\twhile (cause != null) {\n\t\t\t\tmessage = cause.toString();\n\t\t\t\tcause = cause.getCause();\n\t\t\t}\n\t\t\t\n\t\t\tif (message == null || message.equals(\"\")) {\n\t\t\t\tmessage = t.getMessage();\n\t\t\t}\n\t\t\t\n\t\t\tif (message == null || message.equals(\"\")) {\n\t\t\t\tmessage = t.toString();\n\t\t\t}\n\n\t\t\tboolean canViewStackTrace = !SystemGlobals.getBoolValue(ConfigKeys.STACKTRACE_MODERATORS_ONLY)\n\t\t\t\t|| (SessionFacade.isLogged() && SessionFacade.getUserSession().isModerator());\n\t\t\t\n\t\t\tString filter = \"[<>]\";\n\t\t\tString stackTrace = canViewStackTrace\n\t\t\t\t? strWriter.toString()\n\t\t\t\t: \"Only moderators can view stack trace.\";\n\t\t\t\n\t\t\tstackTrace = stackTrace.replaceAll(filter, \"\");\n\t\t\tmessage = message.replaceAll(filter, \"\");\n\t\t\t\n\t\t\tSimpleHash templateContext = JForumExecutionContext.getTemplateContext();\n\t\t\t\n\t\t\ttemplateContext.put(\"stackTrace\", stackTrace);\n\t\t\ttemplateContext.put(\"message\", message);\n\n\t\t\tTemplate template = JForumExecutionContext.templateConfig().getTemplate(\"exception.html\");\n\t\t\ttemplate.process(templateContext, w);\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tstrWriter = new StringWriter();\n\t\t\twriter = new PrintWriter(strWriter);\n\t\t\te.printStackTrace(writer);\n\t\t\twriter.close();\n\t\t\tlogger.error(strWriter);\n\t\t}\n\t}\n\t\n\tprivate String extractCurrentUrl(RequestContext request)\n\t{\n\t\treturn request == null \n\t\t\t? \"\"\n\t\t\t: new StringBuffer().append(\"\\nURL is: \")\n\t\t\t.append(request.getRequestURI())\n\t\t\t.append('?')\n\t\t\t.append(request.getQueryString())\n\t\t\t.toString();\n\t}\n}",
  "metadata": {
    "fileId": "ExceptionWriter_java_chunk_1",
    "fileName": "ExceptionWriter.java",
    "filePath": "src/net/jforum/exceptions/ExceptionWriter.java"
  }
}