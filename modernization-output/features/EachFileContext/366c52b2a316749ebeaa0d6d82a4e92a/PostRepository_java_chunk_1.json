{
  "pageContent": "File Path: src/net/jforum/repository/PostRepository.java\n\n Original Content: /*\n * Copyright (c) JForum Team\n * All rights reserved.\n * \n * Redistribution and use in source and binary forms, \n * with or without modification, are permitted provided \n * that the following conditions are met:\n * \n * 1) Redistributions of source code must retain the above \n * copyright notice, this list of conditions and the \n * following  disclaimer.\n * 2)  Redistributions in binary form must reproduce the \n * above copyright notice, this list of conditions and \n * the following disclaimer in the documentation and/or \n * other materials provided with the distribution.\n * 3) Neither the name of \"Rafael Steil\" nor \n * the names of its contributors may be used to endorse \n * or promote products derived from this software without \n * specific prior written permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT \n * HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY \n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, \n * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF \n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR \n * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL \n * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE \n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, \n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES \n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF \n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, \n * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER \n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER \n * IN CONTRACT, STRICT LIABILITY, OR TORT \n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN \n * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF \n * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE\n * \n * This file creation date: 07/02/2005 - 10:29:14\n * The JForum Project\n * http://www.jforum.net\n */\npackage net.jforum.repository;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Iterator;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Map;\n\nimport net.jforum.cache.CacheEngine;\nimport net.jforum.cache.Cacheable;\nimport net.jforum.dao.DataAccessDriver;\nimport net.jforum.dao.PostDAO;\nimport net.jforum.entities.Post;\nimport net.jforum.util.preferences.ConfigKeys;\nimport net.jforum.util.preferences.SystemGlobals;\nimport net.jforum.view.forum.common.PostCommon;\n\n/**\n * Repository for the post in the top n topics for each forum.\n * \n * @author Sean Mitchell\n * @author Rafael Steil\n * @version $Id: PostRepository.java,v 1.13 2006/08/23 02:13:48 rafaelsteil Exp $\n */\npublic class PostRepository implements Cacheable\n{\n\tprivate static final int CACHE_SIZE = SystemGlobals.getIntValue(ConfigKeys.POSTS_CACHE_SIZE);\n\tprivate static final String FQN = \"posts\";\n\tprivate static CacheEngine cache;\n\t\n\t/**\n\t * @see net.jforum.cache.Cacheable#setCacheEngine(net.jforum.cache.CacheEngine)\n\t */\n\tpublic void setCacheEngine(CacheEngine engine)\n\t{\n\t\tcache = engine;\n\t}\n\t\n\tpublic static int size()\n\t{\n\t\tMap m = (Map)cache.get(FQN);\n\t\treturn (m != null ? m.size() : 0);\n\t}\n\t\n\tpublic static int size(int topicId)\n\t{\n\t\tList posts = (List)cache.get(FQN, Integer.toString(topicId));\n\t\treturn (posts == null ? 0 : posts.size());\n\t}\n\t\n\tpublic static Collection cachedTopics()\n\t{\n\t\tMap m = (Map)cache.get(FQN);\n\t\tif (m == null) {\n\t\t\treturn new ArrayList();\n\t\t}\n\t\t\n\t\treturn m.keySet();\n\t}\n\t\t\n\tpublic static List selectAllByTopicByLimit(int topicId, int start, int count)  \n\t{\n\t\tString tid = Integer.toString(topicId);\n\t\t\n\t\tList posts = (List)cache.get(FQN, tid);\n\t\tif (posts == null || posts.size() == 0) {\n\t\t\tPostDAO pm = DataAccessDriver.getInstance().newPostDAO();\n\t\t\tposts = pm.selectAllByTopic(topicId);\n\t\t\t\n\t\t\tfor (Iterator iter = posts.iterator(); iter.hasNext(); ) {\n\t\t\t\tPostCommon.preparePostForDisplay((Post)iter.next());\n\t\t\t}\n\t\n\t\t\tMap topics = (Map)cache.get(FQN);\n\t\t\tif (topics == null || topics.size() == 0 || topics.size() < CACHE_SIZE) {\n\t\t\t\tcache.add(FQN, tid, posts);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (!(topics instanceof LinkedHashMap)) {\n\t\t\t\t\ttopics = new LinkedHashMap(topics) {\n\t\t\t\t\t\tprotected boolean removeEldestEntry(java.util.Map.Entry eldest) {\n\t\t\t\t\t\t\treturn this.size() > CACHE_SIZE;\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\ttopics.put(tid, posts);\n\t\t\t\tcache.add(FQN, topics);\n\t\t\t}\n\t\t}\n\t\t\n\t\tint size = posts.size();\n\t\treturn posts.subList(start, (size < start + count) ? size : start + count);\n   }\n\t\n\tpublic static void remove(int topicId, int postId)\n\t{\n\t\tsynchronized (FQN) {\n\t\t\tString tid = Integer.toString(topicId);\n\t\t\t\n\t\t\tList posts = (List)cache.get(FQN, tid);\n\t\t\t\n\t\t\tif (posts != null) {\n\t\t\t\tPost p = new Post();\n\t\t\t\tp.setId(postId);\n\t\t\t\tposts.remove(p);\n\t\t\t\t\n\t\t\t\tcache.add(FQN, tid, posts);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tpublic static void update(int topicId, Post p)\n\t{\n\t\tString tid = Integer.toString(topicId);\n\t\tList posts = (List)cache.get(FQN, tid);\n\t\tif (posts != null && posts.contains(p)) {\n\t\t\tposts.set(posts.indexOf(p), p);\n\t\t\tcache.add(FQN, tid, posts);\n\t\t}\n\t}\n\t\n\tpublic static void append(int topicId, Post p)\n\t{\n\t\tString tid = Integer.toString(topicId);\n\t\tList posts = (List)cache.get(FQN, tid);\n\t\tif (posts != null && !posts.contains(p)) {\n\t\t\tposts.add(p);\n\t\t\tcache.add(FQN, tid, posts);\n\t\t}\n\t}\n\t\n\tpublic static void clearCache(int topicId)\n\t{\n\t\tcache.remove(FQN, Integer.toString(topicId));\n\t}\n}",
  "metadata": {
    "fileId": "PostRepository_java_chunk_1",
    "fileName": "PostRepository.java",
    "filePath": "src/net/jforum/repository/PostRepository.java"
  }
}