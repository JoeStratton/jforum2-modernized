{
  "pageContent": "File Path: src/net/jforum/repository/BanlistRepository.java\n\n Original Content: /*\n * Copyright (c) JForum Team\n * All rights reserved.\n * \n * Redistribution and use in source and binary forms, \n * with or without modification, are permitted provided \n * that the following conditions are met:\n * \n * 1) Redistributions of source code must retain the above \n * copyright notice, this list of conditions and the \n * following  disclaimer.\n * 2)  Redistributions in binary form must reproduce the \n * above copyright notice, this list of conditions and \n * the following disclaimer in the documentation and/or \n * other materials provided with the distribution.\n * 3) Neither the name of \"Rafael Steil\" nor \n * the names of its contributors may be used to endorse \n * or promote products derived from this software without \n * specific prior written permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT \n * HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY \n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, \n * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF \n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR \n * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL \n * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE \n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, \n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES \n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF \n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, \n * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER \n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER \n * IN CONTRACT, STRICT LIABILITY, OR TORT \n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN \n * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF \n * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE\n * \n * Created on 10/12/2006 19:12:49\n * The JForum Project\n * http://www.jforum.net\n */\npackage net.jforum.repository;\n\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\n\nimport net.jforum.cache.CacheEngine;\nimport net.jforum.cache.Cacheable;\nimport net.jforum.dao.BanlistDAO;\nimport net.jforum.dao.DataAccessDriver;\nimport net.jforum.entities.Banlist;\n\n/**\n * @author Rafael Steil\n * @version $Id: BanlistRepository.java,v 1.2 2006/12/11 00:44:50 rafaelsteil Exp $\n */\npublic class BanlistRepository implements Cacheable\n{\n\tprivate static CacheEngine cache;\n\tprivate static final String FQN = \"banlist\";\n\tprivate static final String BANLIST = \"banlistCollection\";\n\t\n\t/**\n\t * @see net.jforum.cache.Cacheable#setCacheEngine(net.jforum.cache.CacheEngine)\n\t */\n\tpublic void setCacheEngine(CacheEngine engine)\n\t{\n\t\tcache = engine;\n\t}\n\t\n\tpublic static boolean shouldBan(Banlist b) {\n\t\tboolean status = false;\n\t\t\n\t\tfor (Iterator iter = banlist().values().iterator(); iter.hasNext(); ) {\n\t\t\tBanlist current = (Banlist)iter.next();\n\t\t\t\n\t\t\tif (current.matches(b)) {\n\t\t\t\tstatus = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn status;\n\t}\n\n\tpublic static void add(Banlist b)\n\t{\n\t\tMap m = banlist();\n\t\tm.put(new Integer(b.getId()), b);\n\t\t\n\t\tcache.add(FQN, BANLIST, m);\n\t}\n\t\n\tpublic static void remove(int banlistId)\n\t{\n\t\tMap m = banlist();\n\t\t\n\t\tInteger key = new Integer(banlistId);\n\t\t\n\t\tif (m.containsKey(key)) {\n\t\t\tm.remove(key);\n\t\t}\n\t\t\n\t\tcache.add(FQN, BANLIST, m);\n\t}\n\t\n\tprivate static Map banlist()\n\t{\n\t\tMap m = (Map)cache.get(FQN, BANLIST);\n\t\t\n\t\tif (m == null) {\n\t\t\tm = new HashMap();\n\t\t}\n\t\t\n\t\treturn m;\n\t}\n\t\n\tpublic static void loadBanlist() \n\t{\n\t\tBanlistDAO dao = DataAccessDriver.getInstance().newBanlistDAO();\n\t\tList banlist = dao.selectAll();\n\t\t\n\t\tfor (Iterator iter = banlist.iterator(); iter.hasNext(); ) {\n\t\t\tBanlistRepository.add((Banlist)iter.next());\n\t\t}\n\t}\n}",
  "metadata": {
    "fileId": "BanlistRepository_java_chunk_1",
    "fileName": "BanlistRepository.java",
    "filePath": "src/net/jforum/repository/BanlistRepository.java"
  }
}