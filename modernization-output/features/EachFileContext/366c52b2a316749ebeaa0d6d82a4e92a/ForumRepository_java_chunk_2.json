{
  "pageContent": "File Path: src/net/jforum/repository/ForumRepository.java\n\n Original Content: public class ForumRepository implements Cacheable\n{\n\tprivate static CacheEngine cache;\n\tprivate static ForumRepository instance;\n\tprivate static Logger logger = Logger.getLogger(ForumRepository.class);\n\t\n\tprivate static final String FQN = \"forumRepository\";\n\tprivate static final String CATEGORIES_SET = \"categoriesSet\";\n\tprivate static final String RELATION = \"relationForums\";\n\tprivate static final String FQN_MODERATORS = FQN + \"/moderators\";\n\tprivate static final String TOTAL_MESSAGES = \"totalMessages\";\n\tprivate static final String MOST_USERS_ONLINE = \"mostUsersEverOnline\";\n\tprivate static final String LOADED = \"loaded\";\n\tprivate static final String LAST_USER = \"lastUser\";\n\tprivate static final String TOTAL_USERS = \"totalUsers\";\n\t\n\t/**\n\t * @see net.jforum.cache.Cacheable#setCacheEngine(net.jforum.cache.CacheEngine)\n\t */\n\tpublic void setCacheEngine(CacheEngine engine)\n\t{\n\t\tcache = engine;\n\t}\n\t\n\t/**\n\t * Starts the repository.\n\t * \n\t * @param fm The <code>ForumModel</code> instance which will be\n\t * used to retrieve information about the forums.\n\t * @param cm The <code>CategoryModel</code> instance which will\n\t * be used to retrieve information about the categories.\n     * @param  configModel ConfigDAO\n\t */\n\tpublic synchronized static void start(ForumDAO fm, CategoryDAO cm, ConfigDAO configModel)\n\t{\n\t\tinstance = new ForumRepository();\n\t\t\n\t\tif (cache.get(FQN, LOADED) == null) {\n\t\t\tinstance.loadCategories(cm);\n\t\t\tinstance.loadForums(fm);\n\t\t\tinstance.loadMostUsersEverOnline(configModel);\n\t\t\tinstance.loadUsersInfo();\n\t\t\t\n\t\t\tInteger i = (Integer)cache.get(FQN, TOTAL_MESSAGES);\n\t\t\t\n\t\t\tif (i == null) {\n\t\t\t\tcache.add(FQN, TOTAL_MESSAGES, new Integer(0));\n\t\t\t}\n\t\t\t\n\t\t\tcache.add(FQN, LOADED, \"1\");\n\t\t}\n\t}\n\t\n\t/**\n\t * Gets a category by its id.\n\t * A call to @link #getCategory(int, int) is made, using the\n\t * return of <code>SessionFacade.getUserSession().getUserId()</code>\n\t * as argument for the \"userId\" parameter.\n\t * \n\t * @param categoryId The id of the category to check\n\t * @return <code>null</code> if the category is either not\n\t * found or access is denied.\n\t * @see #getCategory(int, int)\n\t */\n\tpublic static Category getCategory(int categoryId)\n\t{\n\t\treturn getCategory(SessionFacade.getUserSession().getUserId(), categoryId);\n\t}\n\n\t/**\n\t * Gets a category by its id.\n\t *  \n\t * @param userId The user id who is requesting the category\n\t * @param categoryId The id of the category to get\n\t * @return <code>null</code> if the category is either not\n\t * found or access is denied.\n\t * @see #getCategory(int)\n\t */\n\tpublic static Category getCategory(int userId, int categoryId)\n\t{\n\t\tif (!isCategoryAccessible(userId, categoryId)) {\n\t\t\treturn null;\n\t\t}\n\t\t\n\t\treturn (Category)cache.get(FQN, Integer.toString(categoryId));\n\t}\n\t\n\tpublic static Category getCategory(PermissionControl pc, int categoryId)\n\t{\n\t\tif (!isCategoryAccessible(pc, categoryId)) {\n\t\t\treturn null;\n\t\t}\n\t\t\n\t\treturn (Category)cache.get(FQN, Integer.toString(categoryId)); \n\t}\n\t\n\tpublic static Category retrieveCategory(int categoryId)\n\t{\n\t\treturn (Category)cache.get(FQN, Integer.toString(categoryId));\n\t}\n\t\n\t/**\n\t * Check is some category is accessible.\n\t * \n\t * @param userId The user's id who is trying to get the category\n\t * @param categoryId The category's id to check for access rights\n\t * @return <code>true</code> if access to the category is allowed.\n\t */\n\tpublic static boolean isCategoryAccessible(int userId, int categoryId)\n\t{\n\t\treturn isCategoryAccessible(SecurityRepository.get(userId), categoryId);\n\t}\n\t\n\t/**\n\t * Check if some category is accessible.\n\t * \n\t * @param categoryId The category id to check for access rights\n\t * @return <code>true</code> if access to the category is allowed.\n\t */\n\tpublic static boolean isCategoryAccessible(int categoryId)\n\t{\n\t\treturn isCategoryAccessible(SessionFacade.getUserSession().getUserId(), categoryId);\n\t}\n\t\n\t/**\n\t * Check is some category is accessible.\n\t * \n\t * @param pc The <code>PermissionControl</code> instance containing\n\t * all security info related to the user.\n\t * @param categoryId the category's id to check for access rights\n\t * @return <code>true</code> if access to the category is allowed.\n\t */\n\tpublic static boolean isCategoryAccessible(PermissionControl pc, int categoryId)\n\t{\n\t\treturn pc.canAccess(SecurityConstants.PERM_CATEGORY, Integer.toString(categoryId));\n\t}\n\t\n\t/**\n\t * Gets all categories from the cache. \n\t *\n     * @param userId int\n\t * @return <code>List</code> with the categories. Each entry is a <code>Category</code> object.\n\t */\n\tpublic static List getAllCategories(int userId)\n\t{\n\t\tPermissionControl pc = SecurityRepository.get(userId);\n\t\tList l = new ArrayList();\n\t\t\n\t\tSet categoriesSet = (Set)cache.get(FQN, CATEGORIES_SET);\n\t\t\n\t\tif (categoriesSet == null) {\n\t\t\tsynchronized (ForumRepository.instance) {\n\t\t\t\tif (categoriesSet == null) {\n\t\t\t\t\tlogger.warn(\"Categories set returned null from the cache. Trying to reload\");\n\t\t\t\t\t\n\t\t\t\t\ttry {\n\t\t\t\t\t\tForumRepository.instance.loadCategories(DataAccessDriver.getInstance().newCategoryDAO());\n\t\t\t\t\t\tForumRepository.instance.loadForums(DataAccessDriver.getInstance().newForumDAO());\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t\tthrow new CategoryNotFoundException(\"Failed to get the category\", e);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tcategoriesSet = (Set)cache.get(FQN, CATEGORIES_SET);\n\t\t\t\t\t\n\t\t\t\t\tif (categoriesSet == null) {\n\t\t\t\t\t\tthrow new CategoryNotFoundException(\"Could not find all categories. There must be a problem with the cache\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor (Iterator iter = categoriesSet.iterator(); iter.hasNext(); ) {\n\t\t\tCategory c = getCategory(pc, ((Category)iter.next()).getId());\n\t\t\t\n\t\t\tif (c != null) {\n\t\t\t\tl.add(c);\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn l;\n\t}\n\n\t/**\n\t * Get all categories.\n\t * A call to @link #getAllCategories(int) is made, passing\n\t * the return of <code>SessionFacade.getUserSession().getUserId()</code> \n\t * as the value for the \"userId\" argument.\n\t * \n\t * @return <code>List</code> with the categories. Each entry is a <code>Category</code> object.\n\t * @see #getAllCategories(int)\n\t */\n\tpublic static List getAllCategories()\n\t{\n\t\treturn getAllCategories(SessionFacade.getUserSession().getUserId());\n\t}\n\t\n\tprivate static Category findCategoryByOrder(int order)\n\t{\n\t\tfor (Iterator iter = ((Set)cache.get(FQN, CATEGORIES_SET)).iterator(); iter.hasNext(); ) {\n\t\t\tCategory c = (Category)iter.next();\n\t\t\tif (c.getOrder() == order) {\n\t\t\t\treturn c;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn null;\n\t}",
  "metadata": {
    "fileId": "ForumRepository_java_chunk_2",
    "fileName": "ForumRepository.java",
    "filePath": "src/net/jforum/repository/ForumRepository.java"
  }
}