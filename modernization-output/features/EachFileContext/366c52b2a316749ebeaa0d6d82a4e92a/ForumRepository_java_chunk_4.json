{
  "pageContent": "File Path: src/net/jforum/repository/ForumRepository.java\n\n Original Content: /**\n\t * Gets the number of messags in the entire board.\n\t * \n\t * @param fromDb If <code>true</code>, a query to the database will\n\t * be made, to retrieve the desired information. If <code>false</code>, the\n\t * data will be fetched from the cache.\n\t * @return The number of messages posted in the board.\n\t * @see #getTotalMessages()\n\t */\n\tpublic static int getTotalMessages(boolean fromDb) \n\t{\n\t\tInteger i = (Integer)cache.get(FQN, TOTAL_MESSAGES);\n\t\t\n\t\tint total = i != null ? i.intValue() : 0;\n\t\t\n\t\tif (fromDb || total == 0) {\n\t\t\ttotal = DataAccessDriver.getInstance().newForumDAO().getTotalMessages();\n\t\t\tcache.add(FQN, TOTAL_MESSAGES, new Integer(total));\n\t\t}\n\t\t\n\t\treturn total;\n\t}\n\t\n\tpublic static synchronized void incrementTotalMessages()\n\t{\n\t\tint total = ((Integer)cache.get(FQN, TOTAL_MESSAGES)).intValue();\n\t\tcache.add(FQN, TOTAL_MESSAGES, new Integer(total + 1));\n\t}\n\t\n\t/**\n\t * Gets the number of most online users ever\n\t * @return MostUsersEverOnline\n\t */\n\tpublic static MostUsersEverOnline getMostUsersEverOnline()\n\t{\n\t\tMostUsersEverOnline online = (MostUsersEverOnline)cache.get(FQN, MOST_USERS_ONLINE);\n\t\t\n\t\tif (online == null) {\n\t\t\tsynchronized (MOST_USERS_ONLINE) {\n\t\t\t\tonline = (MostUsersEverOnline)cache.get(FQN, MOST_USERS_ONLINE);\n\t\t\t\t\n\t\t\t\tif (online == null) {\n\t\t\t\t\tonline = instance.loadMostUsersEverOnline(\n\t\t\t\t\t\tDataAccessDriver.getInstance().newConfigDAO());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn online;\n\t}\n\t\n\t/**\n\t * Update the value of most online users ever.\n\t * \n\t * @param m MostUsersEverOnline The new value to store. Generally it\n\t * will be a bigger one.\n\t */\n\tpublic static void updateMostUsersEverOnline(MostUsersEverOnline m)\n\t{\n\t\tConfigDAO cm = DataAccessDriver.getInstance().newConfigDAO();\n\t\tConfig config = cm.selectByName(ConfigKeys.MOST_USERS_EVER_ONLINE);\n\t\t\n\t\tif (config == null) {\n\t\t\t// Total\n\t\t\tconfig = new Config();\n\t\t\tconfig.setName(ConfigKeys.MOST_USERS_EVER_ONLINE);\n\t\t\tconfig.setValue(Integer.toString(m.getTotal()));\n\t\t\t\n\t\t\tcm.insert(config);\n\t\t\t\n\t\t\t// Date\n\t\t\tconfig.setName(ConfigKeys.MOST_USER_EVER_ONLINE_DATE);\n\t\t\tconfig.setValue(Long.toString(m.getTimeInMillis()));\n\t\t\t\n\t\t\tcm.insert(config);\n\t\t}\n\t\telse {\n\t\t\t// Total\n\t\t\tconfig.setValue(Integer.toString(m.getTotal()));\n\t\t\tcm.update(config);\n\n\t\t\t// Date\n\t\t\tconfig.setName(ConfigKeys.MOST_USER_EVER_ONLINE_DATE);\n\t\t\tconfig.setValue(Long.toString(m.getTimeInMillis()));\n\t\t\tcm.update(config);\n\t\t}\n\t\t\n\t\tcache.add(FQN, MOST_USERS_ONLINE, m);\n\t}\n\t\n\t/**\n\t * Loads all forums.\n     * @param fm ForumDAO\n     */\n\tprivate void loadForums(ForumDAO fm)\n\t{\n\t\tList l = fm.selectAll();\n\t\t\n\t\tMap m = (Map)cache.get(FQN, RELATION);\n\t\tif (m == null) {\n\t\t\tm = new HashMap();\n\t\t}\n\t\t\n\t\tint lastId = 0;\n\t\tCategory c = null;\n\t\tString catId = null;\n\n\t\tfor (Iterator iter = l.iterator(); iter.hasNext(); ) {\n\t\t\tForum f = (Forum)iter.next();\n\t\t\t\n\t\t\tif (f.getCategoryId() != lastId) {\n\t\t\t\tif (c != null) {\n\t\t\t\t\tcache.add(FQN, catId, c);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tlastId = f.getCategoryId();\n\t\t\t\tcatId = Integer.toString(f.getCategoryId());\n\t\t\t\tc = (Category)cache.get(FQN, catId);\n\t\t\t}\n\t\t\t\n\t\t\tif (c == null) {\n\t\t\t\tthrow new CategoryNotFoundException(\"Category for forum #\" + f.getId() + \" not found\");\n\t\t\t}\n\t\t\t\n\t\t\tString forumId = Integer.toString(f.getId());\n\t\t\tc.addForum(f);\n\t\t\tm.put(forumId, catId);\n\t\t}\n\t\t\n\t\tif (c != null) {\n\t\t\tcache.add(FQN, catId, c);\n\t\t}\n\t\t\n\t\tcache.add(FQN, RELATION, m);\n\t}\n\t\n\tprivate void loadUsersInfo()\n\t{\n\t\tUserDAO udao = DataAccessDriver.getInstance().newUserDAO();\n\t\tcache.add(FQN, LAST_USER, udao.getLastUserInfo());\n\t\tcache.add(FQN, TOTAL_USERS, new Integer(udao.getTotalUsers()));\n\t}\n\n\t/**\n\t * Loads all categories.\n     * @param cm CategoryDAO\n     */\n\tprivate void loadCategories(CategoryDAO cm)\n\t{\n\t\tList categories = cm.selectAll();\n\t\tSet categoriesSet = new TreeSet(new CategoryOrderComparator());\n\t\t\n\t\tfor (Iterator iter = categories.iterator(); iter.hasNext(); ) {\n\t\t\tCategory c = (Category)iter.next();\n\t\t\t\n\t\t\tcache.add(FQN, Integer.toString(c.getId()), c);\n\t\t\tcategoriesSet.add(c);\n\t\t}\n\t\t\n\t\tcache.add(FQN, CATEGORIES_SET, categoriesSet);\n\t}\n\t\n\tprivate MostUsersEverOnline loadMostUsersEverOnline(ConfigDAO cm) \n\t{\n\t\tConfig config = cm.selectByName(ConfigKeys.MOST_USERS_EVER_ONLINE);\n\t\tMostUsersEverOnline mostUsersEverOnline = new MostUsersEverOnline();\n\t\t\n\t\tif (config != null) {\n\t\t\tmostUsersEverOnline.setTotal(Integer.parseInt(config.getValue()));\n\t\t\t\n\t\t\t// We're assuming that, if we have one key, the another one\n\t\t\t// will always exist\n\t\t\tconfig = cm.selectByName(ConfigKeys.MOST_USER_EVER_ONLINE_DATE);\n\t\t\tmostUsersEverOnline.setTimeInMillis(Long.parseLong(config.getValue()));\n\t\t}\n\t\t\n\t\tcache.add(FQN, MOST_USERS_ONLINE, mostUsersEverOnline);\n\t\t\n\t\treturn mostUsersEverOnline;\n\t}\n\n\n\tpublic static String getListAllowedForums() \n\t{\n\t\tint n = 0;\n\t\tStringBuffer buf = new StringBuffer();\n\t\t\n\t\tList allCategories = ForumRepository.getAllCategories();\n\t\t\n\t\tfor (Iterator iter = allCategories.iterator(); iter.hasNext(); ) {\n\t\t\tCollection forums = ((Category)iter.next()).getForums();\n\t\t\t\n\t\t\tfor (Iterator tmpIterator = forums.iterator(); tmpIterator.hasNext(); ) {\n\t\t\t\tForum f = (Forum)tmpIterator.next();\n\t\t\t\t\n\t\t\t\tif (ForumRepository.isForumAccessible(f.getId())) {\n\t\t\t\t\tif(n++ > 0) {\n\t\t\t\t\t\tbuf.append(',');\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tbuf.append(f.getId());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (n <= 0) {\n\t\t\treturn \"-1\";\n\t\t}\n\t\t\n\t\treturn buf.toString();\n\t}\n}",
  "metadata": {
    "fileId": "ForumRepository_java_chunk_4",
    "fileName": "ForumRepository.java",
    "filePath": "src/net/jforum/repository/ForumRepository.java"
  }
}