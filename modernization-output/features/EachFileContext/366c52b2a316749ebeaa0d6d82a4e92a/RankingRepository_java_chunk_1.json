{
  "pageContent": "File Path: src/net/jforum/repository/RankingRepository.java\n\n Original Content: /*\n * Copyright (c) JForum Team\n * All rights reserved.\n\n * Redistribution and use in source and binary forms, \n * with or without modification, are permitted provided \n * that the following conditions are met:\n\n * 1) Redistributions of source code must retain the above \n * copyright notice, this list of conditions and the \n * following  disclaimer.\n * 2)  Redistributions in binary form must reproduce the \n * above copyright notice, this list of conditions and \n * the following disclaimer in the documentation and/or \n * other materials provided with the distribution.\n * 3) Neither the name of \"Rafael Steil\" nor \n * the names of its contributors may be used to endorse \n * or promote products derived from this software without \n * specific prior written permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT \n * HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY \n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, \n * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF \n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR \n * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL \n * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE \n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, \n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES \n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF \n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, \n * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER \n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER \n * IN CONTRACT, STRICT LIABILITY, OR TORT \n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN \n * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF \n * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE\n * \n * This file creation date: 03/09/2003 / 23:42:55\n * The JForum Project\n * http://www.jforum.net\n */\npackage net.jforum.repository;\n\nimport java.util.Iterator;\nimport java.util.List;\n\nimport net.jforum.cache.CacheEngine;\nimport net.jforum.cache.Cacheable;\nimport net.jforum.dao.DataAccessDriver;\nimport net.jforum.dao.RankingDAO;\nimport net.jforum.entities.Ranking;\nimport net.jforum.exceptions.RankingLoadException;\n\n/**\n * @author Rafael Steil\n * @version $Id: RankingRepository.java,v 1.15 2007/09/19 02:51:11 rafaelsteil Exp $\n */\npublic class RankingRepository implements Cacheable\n{\n\tprivate static CacheEngine cache;\n\tprivate static final String FQN = \"ranking\";\n\tprivate static final String ENTRIES = \"entries\";\n\n\t/**\n\t * @see net.jforum.cache.Cacheable#setCacheEngine(net.jforum.cache.CacheEngine)\n\t */\n\tpublic void setCacheEngine(CacheEngine engine)\n\t{\n\t\tcache = engine;\n\t}\n\t\n\tpublic static void loadRanks()\n\t{\n\t\ttry {\n\t\t\tRankingDAO rm = DataAccessDriver.getInstance().newRankingDAO();\n\t\t\tcache.add(FQN, ENTRIES, rm.selectAll());\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tthrow new RankingLoadException(\"Error while loading the rankings: \" + e);\n\t\t}\n\t}\n\t\n\tpublic static int size()\n\t{\n\t\treturn ((List)cache.get(FQN, ENTRIES)).size();\n\t}\n\t\n\t/**\n\t * Gets the title associated to total of messages the user have\n\t * @param total Number of messages the user have. The ranking will be\n\t * returned according to the range to which this total belongs to. \n\t * @return String with the ranking title. \n\t */\t\n\tpublic static String getRankTitle(int rankId, int total) \n\t{\n\t\tString title = null;\n\t\t\n\t\tif (rankId > 0) {\n\t\t\ttitle = getRankTitleById(rankId);\n\t\t}\n\t\t\n\t\tif (title == null) {\n\t\t\ttitle = getRankTitleByPosts(total);\n\t\t}\n\t\t\n\t\treturn title;\n\t}\n\t\n\tprivate static String getRankTitleByPosts(int total)\n\t{\n\t\tRanking lastRank = new Ranking();\n\t\t\n\t\tList entries = (List)cache.get(FQN, ENTRIES);\n\t\t\n\t\tfor (Iterator iter = entries.iterator(); iter.hasNext(); ) {\n\t\t\tRanking r = (Ranking)iter.next();\n\t\t\t\n\t\t\tif (total == r.getMin() && !r.isSpecial()) {\n\t\t\t\treturn r.getTitle();\n\t\t\t}\n\t\t\telse if (total > lastRank.getMin() && total < r.getMin()) {\n\t\t\t\treturn lastRank.getTitle();\n\t\t\t}\n\t\t\t\n\t\t\tlastRank = r;\n\t\t}\n\t\t\n\t\treturn lastRank.getTitle();\n\t}\n\n\tprivate static String getRankTitleById(int rankId)\n\t{\n\t\tRanking r = new Ranking();\n\t\tr.setId(rankId);\n\t\t\n\t\tList l = (List)cache.get(FQN, ENTRIES);\n\t\tint index = l.indexOf(r);\n\t\t\n\t\treturn index > -1\n\t\t\t? ((Ranking)l.get(index)).getTitle()\n\t\t\t: null;\n\t}\n}",
  "metadata": {
    "fileId": "RankingRepository_java_chunk_1",
    "fileName": "RankingRepository.java",
    "filePath": "src/net/jforum/repository/RankingRepository.java"
  }
}