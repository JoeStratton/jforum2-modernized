{
  "pageContent": "File Path: src/net/jforum/repository/ModulesRepository.java\n\n Original Content: /*\n * Copyright (c) JForum Team\n * All rights reserved.\n * \n * Redistribution and use in source and binary forms, \n * with or without modification, are permitted provided \n * that the following conditions are met:\n * \n * 1) Redistributions of source code must retain the above \n * copyright notice, this list of conditions and the \n * following  disclaimer.\n * 2)  Redistributions in binary form must reproduce the \n * above copyright notice, this list of conditions and \n * the following disclaimer in the documentation and/or \n * other materials provided with the distribution.\n * 3) Neither the name of \"Rafael Steil\" nor \n * the names of its contributors may be used to endorse \n * or promote products derived from this software without \n * specific prior written permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT \n * HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY \n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, \n * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF \n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR \n * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL \n * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE \n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, \n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES \n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF \n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, \n * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER \n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER \n * IN CONTRACT, STRICT LIABILITY, OR TORT \n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN \n * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF \n * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE\n * \n * Created on 29/11/2004 22:53:28\n * The JForum Project\n * http://www.jforum.net\n */\npackage net.jforum.repository;\n\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Properties;\n\nimport net.jforum.ConfigLoader;\nimport net.jforum.JForumExecutionContext;\n\nimport org.apache.log4j.Logger;\n\n/**\n * @author Rafael Steil\n * @version $Id: ModulesRepository.java,v 1.11 2006/08/20 22:47:38 rafaelsteil Exp $\n */\npublic class ModulesRepository\n{\n\tprivate static final Logger logger = Logger.getLogger(ModulesRepository.class);\n\t\n\tprivate static Map cache = new HashMap();\n\tprivate static final String ENTRIES = \"entries\";\n\n\t/**\n\t * Loads all modules mapping.\n\t * \n\t * @param baseDir The directory where the file \"modulesMapping.properties\"\n\t * is placed.\n\t * @throws IOException\n\t */\n\tpublic static void init(String baseDir)\n\t{\n\t\tcache.put(ENTRIES, ConfigLoader.loadModulesMapping(baseDir));\n\t}\n\t\n\tpublic static int size()\n\t{\n\t\treturn cache.size();\n\t}\n\t\n\t/**\n\t * Gets the fully qualified name of some given module name.\n\t * \n\t * @param moduleName The module's name to get its class name\n\t * @return The class name associated to the module name passed\n\t * as argument, or <code>null</code> if not found.\n\t */\n\tpublic static String getModuleClass(String moduleName) {\n\t\tProperties p = (Properties)cache.get(ENTRIES);\n\t\t\n\t\tif (p == null) {\n\t\t\tlogger.error(\"Null modules. Askes moduleName: \" + moduleName\n\t\t\t\t\t+ \", url=\" + JForumExecutionContext.getRequest().getQueryString());\n\t\t\treturn null;\n\t\t}\n\t\t\n\t\treturn p.getProperty(moduleName);\n\t}\n}",
  "metadata": {
    "fileId": "ModulesRepository_java_chunk_1",
    "fileName": "ModulesRepository.java",
    "filePath": "src/net/jforum/repository/ModulesRepository.java"
  }
}