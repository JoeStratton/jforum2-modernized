{
  "pageContent": "File Path: src/net/jforum/repository/ForumRepository.java\n\n Original Content: /**\n\t * Get all categories.\n\t * A call to @link #getAllCategories(int) is made, passing\n\t * the return of <code>SessionFacade.getUserSession().getUserId()</code> \n\t * as the value for the \"userId\" argument.\n\t * \n\t * @return <code>List</code> with the categories. Each entry is a <code>Category</code> object.\n\t * @see #getAllCategories(int)\n\t */\n\tpublic static List getAllCategories()\n\t{\n\t\treturn getAllCategories(SessionFacade.getUserSession().getUserId());\n\t}\n\t\n\tprivate static Category findCategoryByOrder(int order)\n\t{\n\t\tfor (Iterator iter = ((Set)cache.get(FQN, CATEGORIES_SET)).iterator(); iter.hasNext(); ) {\n\t\t\tCategory c = (Category)iter.next();\n\t\t\tif (c.getOrder() == order) {\n\t\t\t\treturn c;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn null;\n\t}\n\n\t/**\n\t * Updates some category.\n\t * This method only updated the \"name\" and \"order\" fields. \n\t *  \n\t * @param c The category to update. The method will search for a category\n\t * with the same id and update its data.\n\t */\n\tpublic synchronized static void reloadCategory(Category c)\n\t{\n\t\tCategory current = (Category)cache.get(FQN, Integer.toString(c.getId()));\n\t\tCategory currentAtOrder = findCategoryByOrder(c.getOrder());\n\t\t\n\t\tSet tmpSet = new TreeSet(new CategoryOrderComparator());\n\t\ttmpSet.addAll((Set)cache.get(FQN, CATEGORIES_SET));\n\t\t\n\t\tif (currentAtOrder != null) {\n\t\t\ttmpSet.remove(currentAtOrder);\n\t\t\tcache.remove(FQN, Integer.toString(currentAtOrder.getId()));\n\t\t}\n\t\t\n\t\ttmpSet.add(c);\n\t\tcache.add(FQN, Integer.toString(c.getId()), c);\n\t\t\n\t\tif (currentAtOrder != null && c.getId() != currentAtOrder.getId()) {\n\t\t\ttmpSet.remove(current);\n\t\t\tcurrentAtOrder.setOrder(current.getOrder());\n\t\t\ttmpSet.add(currentAtOrder);\n\t\t\t\n\t\t\tcache.add(FQN, Integer.toString(currentAtOrder.getId()), currentAtOrder);\n\t\t}\n\t\t\n\t\tcache.add(FQN, CATEGORIES_SET, tmpSet);\n\t}\n\t\n\t/**\n\t * Refreshes a category entry in the cache.\n\t * \n\t * @param c The category to refresh\n\t */\n\tpublic synchronized static void refreshCategory(Category c)\n\t{\n\t\tcache.add(FQN, Integer.toString(c.getId()), c);\n\t\tSet s = (Set)cache.get(FQN, CATEGORIES_SET);\n\t\ts.remove(c);\n\t\ts.add(c);\n\t\tcache.add(FQN, CATEGORIES_SET, s);\n\t}\n\t\n\tpublic synchronized static void refreshForum(Forum forum)\n\t{\n\t\tCategory c = retrieveCategory(forum.getCategoryId());\n\t\tc.addForum(forum);\n\t\trefreshCategory(c);\n\t}\n\t\n\t/**\n\t * Remove a category from the cache\n\t * @param c The category to remove. The instance should have the \n\t * category id at least\n\t */\n\tpublic synchronized static void removeCategory(Category c)\n\t{\n\t\tcache.remove(FQN, Integer.toString(c.getId()));\n\t\t\n\t\tSet s = (Set)cache.get(FQN, CATEGORIES_SET);\n\t\ts.remove(c);\n\t\tcache.add(FQN, CATEGORIES_SET, s);\n\t\t\n\t\tMap m = (Map)cache.get(FQN, RELATION);\n\t\tfor (Iterator iter = m.values().iterator(); iter.hasNext(); ) {\n\t\t\tif (Integer.parseInt((String)iter.next()) == c.getId()) {\n\t\t\t\titer.remove();\n\t\t\t}\n\t\t}\n\t\t\n\t\tcache.add(FQN, RELATION, m);\n\t}\n\t\n\t/**\n\t * Adds a new category to the cache.\n\t * @param c The category instance to insert in the cache.\n\t */\n\tpublic synchronized static void addCategory(Category c)\n\t{\n\t\tString categoryId = Integer.toString(c.getId());\n\t\tcache.add(FQN, categoryId, c);\n\t\t\n\t\tSet s = (Set)cache.get(FQN, CATEGORIES_SET);\n\t\t\n\t\tif (s == null) {\n\t\t\ts = new TreeSet(new CategoryOrderComparator());\n\t\t}\n\t\t\n\t\ts.add(c);\n\t\tcache.add(FQN, CATEGORIES_SET, s);\n\t\t\n\t\tMap relation = (Map)cache.get(FQN, RELATION);\n\t\tif (relation == null) {\n\t\t\trelation = new HashMap();\n\t\t}\n\t\t\n\t\tfor (Iterator iter = c.getForums().iterator(); iter.hasNext(); ) {\n\t\t\tForum f = (Forum)iter.next();\n\t\t\trelation.put(Integer.toString(f.getId()), categoryId);\n\t\t}\n\t\t\n\t\tcache.add(FQN, RELATION, relation);\n\t}\n\t\n\t/**\n\t * Gets a specific forum from the cache.\t \n\t * \n\t * @param forumId The forum's ID to get\n\t * @return <code>net.jforum.Forum</code> object instance or <code>null</code>\n\t * if the forum was not found or is not accessible to the user.\n\t */\n\tpublic static Forum getForum(int forumId)\n\t{\n\t\tString categoryId = (String)((Map)cache.get(FQN, RELATION)).get(Integer.toString(forumId));\n\t\t\n\t\tif (categoryId != null) {\n\t\t\tCategory category = (Category)cache.get(FQN, categoryId);\n\t\t\t\n\t\t\tif (isCategoryAccessible(category.getId())) {\n\t\t\t\treturn category.getForum(forumId);\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn null;\n\t}\n\t\n\tpublic static boolean isForumAccessible(int forumId)\n\t{\n\t\treturn isForumAccessible(SessionFacade.getUserSession().getUserId(), forumId);\n\t}\n\t\n\tpublic static boolean isForumAccessible(int userId, int forumId)\n\t{\n\t\tint categoryId = Integer.parseInt((String)((Map)cache.get(FQN, RELATION)).get(Integer.toString(forumId)));\n\t\treturn isForumAccessible(userId, categoryId, forumId);\n\t}\n\t\n\tpublic static boolean isForumAccessible(int userId, int categoryId, int forumId)\n\t{\n\t\treturn ((Category)cache.get(FQN, Integer.toString(categoryId))).getForum(userId, forumId) != null;\n\t}\n\t\n\t/**\n\t * Adds a new forum to the cache repository.\t \n\t * \n\t * @param forum The forum to add\n\t */\n\tpublic synchronized static void addForum(Forum forum)\n\t{\n\t\tString categoryId = Integer.toString(forum.getCategoryId());\n\n\t\tCategory c = (Category)cache.get(FQN, categoryId);\n\t\tc.addForum(forum);\n\t\tcache.add(FQN, categoryId, c);\n\t\t\n\t\tMap m = (Map)cache.get(FQN, RELATION);\n\t\tm.put(Integer.toString(forum.getId()), categoryId);\n\t\tcache.add(FQN, RELATION, m);\n\t\t\n\t\tSet s = (Set)cache.get(FQN, CATEGORIES_SET);\n\t\tcache.add(FQN, CATEGORIES_SET, s);\n\t}\n\t\n\t/**\n\t * Removes a forum from the cache.\n\t * \n\t * @param forum The forum instance to remove.\n\t */\n\tpublic synchronized static void removeForum(Forum forum)\n\t{\n\t\tString id = Integer.toString(forum.getId());\n\t\tMap m = (Map)cache.get(FQN, RELATION);\n\t\tm.remove(id);\n\t\tcache.add(FQN, RELATION, m);\n\n\t\tid = Integer.toString(forum.getCategoryId());\n\t\t\n\t\tCategory c = (Category)cache.get(FQN, id);\n\t\tc.removeForum(forum.getId());\n\t\tcache.add(FQN, id, c);\n\t\t\n\t\tSet s = (Set)cache.get(FQN, CATEGORIES_SET);\n\t\tcache.add(FQN, CATEGORIES_SET, s);\n\t}\n\t\n\t/**\n\t * Reloads a forum.\n\t * The forum should already be in the cache and <b>SHOULD NOT</b>\n\t * have its order changed. If the forum's order was changed, \n\t * then you <b>MUST CALL</b> @link Category#changeForumOrder(Forum) <b>BEFORE</b>\n\t * calling this method.\n\t * \n\t * @param forumId int The forum to reload its information\n\t */\n\tpublic static synchronized void reloadForum(int forumId)\n\t{\n\t\tForum f = DataAccessDriver.getInstance().newForumDAO().selectById(forumId);\n\t\t\n\t\tif (((Map)cache.get(FQN, RELATION)).containsKey(Integer.toString(forumId))) {\n\t\t\tString id = Integer.toString(f.getCategoryId());\n\t\t\tCategory c = (Category)cache.get(FQN, id);\n\t\t\t\n\t\t\tf.setLastPostInfo(null);\n\t\t\tf.setLastPostInfo(ForumRepository.getLastPostInfo(f));\n\t\t\tc.reloadForum(f);\n\t\t\t\n\t\t\tcache.add(FQN, id, c);\n\t\t\tSet s = (Set)cache.get(FQN, CATEGORIES_SET);\n\t\t\tcache.add(FQN, CATEGORIES_SET, s);\n\t\t}\n\t\t\n\t\tgetTotalMessages(true);\n\t}\n\t\n\tpublic static synchronized void updateForumStats(Topic t, User u, Post p)\n\t{\n\t\tString f = Integer.toString(t.getForumId());\n\t\t\n\t\tif (((Map)cache.get(FQN, RELATION)).containsKey(f)) {\n\t\t\tForum forum = getForum(t.getForumId());\n\n\t\t\tSimpleDateFormat df = new SimpleDateFormat(SystemGlobals.getValue(ConfigKeys.DATE_TIME_FORMAT));\n\t\t\n\t\t\tLastPostInfo lpi = forum.getLastPostInfo();\n\t\t\t\n\t\t\tif (lpi == null) {\n\t\t\t\tlpi = new LastPostInfo();\n\t\t\t}\n\t\t\t\n\t\t\tlpi.setPostId(p.getId());\n\t\t\tlpi.setPostDate(df.format(p.getTime()));\n\t\t\tlpi.setPostTimeMillis(p.getTime().getTime());\n\t\t\tlpi.setTopicId(t.getId());\n\t\t\tlpi.setTopicReplies(t.getTotalReplies());\n\t\t\tlpi.setUserId(u.getId());\n\t\t\tlpi.setUsername(u.getUsername());\n\t\t\t\n\t\t\tforum.setLastPostInfo(lpi);\n\t\t\t\n\t\t\tif (t.getTotalReplies() == 0) {\n\t\t\t\tforum.setTotalTopics(forum.getTotalTopics() + 1);\n\t\t\t}\n\n\t\t\tforum.setTotalPosts(forum.getTotalPosts() + 1);\n\t\t\t\n\t\t\tCategory c = retrieveCategory(forum.getCategoryId());\n\t\t\tc.reloadForum(forum);\n\t\t\t\n\t\t\trefreshCategory(c);\n\t\t}\n\t}\n\t\n\t/**\n\t * Gets information about the last message posted in some forum.\n\t * @param forum The forum to retrieve information\n\t * @return LastPostInfo\n\t */\n\tpublic static LastPostInfo getLastPostInfo(Forum forum)\n\t{\n\t\tLastPostInfo lpi = forum.getLastPostInfo();\n\t\t\n\t\tif (lpi == null || !forum.getLastPostInfo().hasInfo()) {\n\t\t\tlpi = DataAccessDriver.getInstance().newForumDAO().getLastPostInfo(forum.getId());\n\t\t\tforum.setLastPostInfo(lpi);\n\t\t}\n\t\t\n\t\treturn lpi;\n\t}\n\t\n\t/**\n\t * Gets information about the last message posted in some forum.\n\t * \n\t * @param forumId The forum's id to retrieve information\n\t * @return LastPostInfo\n\t */\n\tpublic static LastPostInfo getLastPostInfo(int forumId)\n\t{\n\t\treturn getLastPostInfo(getForum(forumId));\n\t}\n\n\t/**\n\t * Gets information about the moderators of some forum.\n\t * @param forumId The forum to retrieve information\n\t * @return List\n\t */\n\tpublic static List getModeratorList(int forumId)\n\t{\n\t\tList l = (List)cache.get(FQN_MODERATORS, Integer.toString(forumId));\n\t\t\n\t\tif (l == null) {\n\t\t\tsynchronized (FQN_MODERATORS) {\n\t\t\t\ttry {\n\t\t\t\t\tl = DataAccessDriver.getInstance().newForumDAO().getModeratorList(forumId);\n\t\t\t\t\tcache.add(FQN_MODERATORS, Integer.toString(forumId), l);\n\t\t\t\t}\n\t\t\t\tcatch (Exception e) {\n\t\t\t\t\tthrow new DatabaseException(e);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn l;\n\t}\n\t\n\tpublic static void clearModeratorList()\n\t{\n\t\tcache.remove(FQN_MODERATORS);\n\t}\n\t\n\tpublic static User lastRegisteredUser()\n\t{\n\t\treturn (User)cache.get(FQN, LAST_USER);\n\t}\n\t\n\tpublic static void setLastRegisteredUser(User user)\n\t{\n\t\tcache.add(FQN, LAST_USER, user);\n\t}\n\t\n\tpublic static Integer totalUsers()\n\t{\n\t\treturn (Integer)cache.get(FQN, TOTAL_USERS);\n\t}\n\t\n\tpublic static void incrementTotalUsers()\n\t{\n\t\tInteger i = (Integer)cache.get(FQN, TOTAL_USERS);\n\t\t\n\t\tif (i == null) {\n\t\t\ti = new Integer(0);\n\t\t}\n\t\t\n\t\tcache.add(FQN,TOTAL_USERS, new Integer(i.intValue() + 1));\n\t}\n\t\n\t/**\n\t * Gets the number of messages in the entire board.\n\t * @return int\n\t * @see #getTotalMessages(boolean)\n\t */\n\tpublic static int getTotalMessages()\n\t{\n\t\treturn getTotalMessages(false);\n\t}",
  "metadata": {
    "fileId": "ForumRepository_java_chunk_3",
    "fileName": "ForumRepository.java",
    "filePath": "src/net/jforum/repository/ForumRepository.java"
  }
}