{
  "pageContent": "File Path: src/net/jforum/cache/JBossCacheEngine.java\n\n Original Content: /*\n * Copyright (c) 2003, 2004 Rafael Steil\n * All rights reserved.\n * \n * Redistribution and use in source and binary forms, \n * with or without modification, are permitted provided \n * that the following conditions are met:\n * \n * 1) Redistributions of source code must retain the above \n * copyright notice, this list of conditions and the \n * following  disclaimer.\n * 2)  Redistributions in binary form must reproduce the \n * above copyright notice, this list of conditions and \n * the following disclaimer in the documentation and/or \n * other materials provided with the distribution.\n * 3) Neither the name of \"Rafael Steil\" nor \n * the names of its contributors may be used to endorse \n * or promote products derived from this software without \n * specific prior written permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT \n * HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY \n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, \n * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF \n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR \n * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL \n * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE \n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, \n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES \n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF \n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, \n * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER \n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER \n * IN CONTRACT, STRICT LIABILITY, OR TORT \n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN \n * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF \n * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE\n * \n * Created on Jan 13, 2005 11:42:54 PM\n * The JForum Project\n * http://www.jforum.net\n */\npackage net.jforum.cache;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\n\nimport net.jforum.exceptions.CacheException;\nimport net.jforum.util.preferences.ConfigKeys;\nimport net.jforum.util.preferences.SystemGlobals;\n\nimport org.apache.log4j.Logger;\nimport org.jboss.cache.Fqn;\nimport org.jboss.cache.Node;\nimport org.jboss.cache.PropertyConfigurator;\nimport org.jboss.cache.TreeCache;\n\n/**\n * @author Rafael Steil\n * @version $Id: JBossCacheEngine.java,v 1.7 2005/09/25 02:40:28 rafaelsteil Exp $\n */\npublic class JBossCacheEngine implements CacheEngine\n{\n\tprivate Logger logger = Logger.getLogger(JBossCacheEngine.class);\n\tprivate TreeCache cache;\n\n\t/**\n\t * @see net.jforum.cache.CacheEngine#init()\n\t */\n\tpublic void init()\n\t{\n\t\ttry {\n\t\t\tthis.cache = new TreeCache();\n\t\t\tPropertyConfigurator config = new PropertyConfigurator();\n\t\t\tconfig.configure(this.cache, SystemGlobals.getValue(ConfigKeys.JBOSS_CACHE_PROPERTIES));\n\t\t\t\n\t\t\tthis.cache.startService();\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tthrow new CacheException(\"Error while trying to configure jboss-cache: \" + e);\n\t\t}\n\t}\n\t\n\t/**\n\t * @see net.jforum.cache.CacheEngine#stop()\n\t */\n\tpublic void stop()\n\t{\n\t\tthis.cache.stopService();\n\t}\n\n\t/**\n\t * @see net.jforum.cache.CacheEngine#add(java.lang.String, java.lang.Object)\n\t */\n\tpublic void add(String key, Object value)\n\t{\n\t\tthis.add(CacheEngine.DUMMY_FQN, key, value);\n\t}\n\n\t/**\n\t * @see net.jforum.cache.CacheEngine#add(java.lang.String, java.lang.String, java.lang.Object)\n\t */\n\tpublic void add(String fqn, String key, Object value)\n\t{\n\t\ttry {\n\t\t\tthis.cache.put(Fqn.fromString(fqn), key, value);\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tthrow new CacheException(\"Error adding a new entry to the cache: \" + e);\n\t\t}\n\t}\n\n\t/**\n\t * @see net.jforum.cache.CacheEngine#get(java.lang.String, java.lang.String)\n\t */\n\tpublic Object get(String fqn, String key)\n\t{\n\t\ttry {\n\t\t\treturn this.cache.get(Fqn.fromString(fqn), key);\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tthrow new CacheException(\"Error while trying to get an entry from the cache: \" + e);\n\t\t}\n\t}\n\n\t/**\n\t * @see net.jforum.cache.CacheEngine#get(java.lang.String)\n\t */\n\tpublic Object get(String fqn)\n\t{\n\t\ttry {\n\t\t\treturn this.cache.get(Fqn.fromString(fqn));\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tthrow new CacheException(\"Error while trying to get an entry from the cache: \" + e);\n\t\t}\n\t}\n\t\n\t/**\n\t * @see net.jforum.cache.CacheEngine#getValues(java.lang.String)\n\t */\n\tpublic Collection getValues(String fqn)\n\t{\n\t\tNode node = (Node)this.get(fqn);\n\t\tif (node == null) {\n\t\t\treturn new ArrayList();\n\t\t}\n\t\t\n\t\treturn node.getData().values();\n\t}\n\n\t/**\n\t * @see net.jforum.cache.CacheEngine#remove(java.lang.String, java.lang.String)\n\t */\n\tpublic void remove(String fqn, String key)\n\t{\n\t\ttry {\n\t\t\tif (key == null) {\n\t\t\t\tthis.cache.remove(Fqn.fromString(fqn));\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.cache.remove(Fqn.fromString(fqn), key);\n\t\t\t}\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tlogger.warn(\"Error while removing a FQN from the cache: \" + e);\n\t\t}\n\t}\n\n\t/**\n\t * @see net.jforum.cache.CacheEngine#remove(java.lang.String)\n\t */\n\tpublic void remove(String fqn)\n\t{\n\t\ttry {\n\t\t\tthis.cache.remove(Fqn.fromString(fqn));\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tlogger.warn(\"Error while removing a FQN from the cache: \" + e);\n\t\t}\n\t}\n\n}",
  "metadata": {
    "fileId": "JBossCacheEngine_java_chunk_1",
    "fileName": "JBossCacheEngine.java",
    "filePath": "src/net/jforum/cache/JBossCacheEngine.java"
  }
}