{
  "pageContent": "File Path: src/net/jforum/cache/CacheEngine.java\n\n Original Content: /*\n * Copyright (c) JForum Team\n * All rights reserved.\n * \n * Redistribution and use in source and binary forms, \n * with or without modification, are permitted provided \n * that the following conditions are met:\n * \n * 1) Redistributions of source code must retain the above \n * copyright notice, this list of conditions and the \n * following  disclaimer.\n * 2)  Redistributions in binary form must reproduce the \n * above copyright notice, this list of conditions and \n * the following disclaimer in the documentation and/or \n * other materials provided with the distribution.\n * 3) Neither the name of \"Rafael Steil\" nor \n * the names of its contributors may be used to endorse \n * or promote products derived from this software without \n * specific prior written permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT \n * HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY \n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, \n * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF \n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR \n * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL \n * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE \n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, \n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES \n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF \n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, \n * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER \n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER \n * IN CONTRACT, STRICT LIABILITY, OR TORT \n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN \n * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF \n * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE\n * \n * Created on Jan 13, 2005 5:58:36 PM\n * The JForum Project\n * http://www.jforum.net\n */\npackage net.jforum.cache;\n\nimport java.util.Collection;\n\n/**\n * @author Rafael Steil\n * @version $Id: CacheEngine.java,v 1.11 2006/08/20 22:47:56 rafaelsteil Exp $\n */\npublic interface CacheEngine\n{\n\tpublic static final String DUMMY_FQN = \"\";\n\tpublic static final String NOTIFICATION = \"notification\";\n\t\n\t/**\n\t * Inits the cache engine. \n\t */\n\tpublic void init();\n\t\n\t/**\n\t * Stops the cache engine\n\t */\n\tpublic void stop();\n\t\n\t/**\n\t * Adds a new object to the cache. \n\t * The fqn will be set as the value of {@link #DUMMY_FQN}\n\t * \n\t * @param key The key to associate with the object. \n\t * @param value The object to cache\n\t */\n\tpublic void add(String key, Object value);\n\t\n\t/**\n\t * \n\t * Adds a new object to the cache.\n\t * \n\t * @param fqn The fully qualified name of the cache. \n\t * @param key The key to associate with the object\n\t * @param value The object to cache\n\t */\n\tpublic void add(String fqn, String key, Object value);\n\t\n\t/**\n\t * Gets some object from the cache.\n\t * \n\t * @param fqn The fully qualified name associated with the key\n\t * @param key The key to get\n\t * @return The cached object, or <code>null</code> if no entry was found\n\t */\n\tpublic Object get(String fqn, String key);\n\t\n\t/**\n\t * Gets some object from the cache.\n\t * \n\t * @param fqn The fqn tree to get\n\t * @return The cached object, or <code>null</code> if no entry was found\n\t */\n\tpublic Object get(String fqn);\n\t\n\t/**\n\t * Gets all values from some given FQN.\n\t * \n\t * @param fqn String\n\t * @return Collection\n\t */\n\tpublic Collection getValues(String fqn);\n\t\n\t/**\n\t * Removes an entry from the cache.\n\t * \n\t * @param fqn The fully qualified name associated with the key\n\t * @param key The key to remove\n\t */\n\tpublic void remove(String fqn, String key);\n\t\n\t/**\n\t * Removes a complete note from the cache\n\t * @param fqn The fqn to remove\n\t */\n\tpublic void remove(String fqn);\n}",
  "metadata": {
    "fileId": "CacheEngine_java_chunk_1",
    "fileName": "CacheEngine.java",
    "filePath": "src/net/jforum/cache/CacheEngine.java"
  }
}