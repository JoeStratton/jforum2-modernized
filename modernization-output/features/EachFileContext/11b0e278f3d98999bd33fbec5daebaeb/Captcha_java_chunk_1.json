{
  "pageContent": "File Path: src/net/jforum/util/Captcha.java\n\n Original Content: /*\n * Copyright (c) JForum Team\n * All rights reserved.\n * \n * Redistribution and use in source and binary forms, \n * with or without modification, are permitted provided \n * that the following conditions are met:\n * \n * 1) Redistributions of source code must retain the above \n * copyright notice, this list of conditions and the \n * following  disclaimer.\n * 2)  Redistributions in binary form must reproduce the \n * above copyright notice, this list of conditions and \n * the following disclaimer in the documentation and/or \n * other materials provided with the distribution.\n * 3) Neither the name of \"Rafael Steil\" nor \n * the names of its contributors may be used to endorse \n * or promote products derived from this software without \n * specific prior written permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT \n * HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY \n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, \n * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF \n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR \n * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL \n * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE \n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, \n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES \n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF \n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, \n * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER \n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER \n * IN CONTRACT, STRICT LIABILITY, OR TORT \n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN \n * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF \n * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE\n * \n * This file creation date: Nov 13, 2004 / 17:17:09\n * The JForum Project\n * http://www.jforum.net\n */\n\npackage net.jforum.util;\n\nimport java.awt.Color;\nimport java.awt.image.BufferedImage;\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.util.ArrayList;\nimport java.util.Iterator;\nimport java.util.List;\n\nimport javax.imageio.ImageIO;\n\nimport net.jforum.JForumExecutionContext;\nimport net.jforum.SessionFacade;\nimport net.jforum.util.preferences.ConfigKeys;\nimport net.jforum.util.preferences.SystemGlobals;\n\nimport org.apache.log4j.Logger;\n\nimport com.octo.captcha.component.image.backgroundgenerator.BackgroundGenerator;\nimport com.octo.captcha.component.image.backgroundgenerator.GradientBackgroundGenerator;\nimport com.octo.captcha.component.image.fontgenerator.FontGenerator;\nimport com.octo.captcha.component.image.fontgenerator.TwistedAndShearedRandomFontGenerator;\nimport com.octo.captcha.component.image.textpaster.RandomTextPaster;\nimport com.octo.captcha.component.image.textpaster.TextPaster;\nimport com.octo.captcha.component.image.wordtoimage.ComposedWordToImage;\nimport com.octo.captcha.component.image.wordtoimage.WordToImage;\nimport com.octo.captcha.component.wordgenerator.RandomWordGenerator;\nimport com.octo.captcha.component.wordgenerator.WordGenerator;\nimport com.octo.captcha.engine.image.ListImageCaptchaEngine;\nimport com.octo.captcha.image.ImageCaptchaFactory;\nimport com.octo.captcha.image.gimpy.GimpyFactory;\n\n/**\n * @author James Yong\n * @version $Id: Captcha.java,v 1.13 2007/08/06 15:38:01 rafaelsteil Exp $\n */\npublic class Captcha extends ListImageCaptchaEngine\n{\n\tprivate static final Logger logger = Logger.getLogger(Captcha.class);\n\t\n\tprivate static Captcha classInstance = new Captcha();\n\tprivate List backgroundGeneratorList;\n\tprivate List textPasterList;\n\tprivate List fontGeneratorList;\n\n\tprivate static String charsInUse;\n\t\n\tprivate void initializeChars()\n\t{\n\t\tif (SystemGlobals.getBoolValue(ConfigKeys.CAPTCHA_IGNORE_CASE)) {\n\t\t\tcharsInUse = \"123456789abcdefghijlmnopkrstuvxzyk@#%^\";\n\t\t}\n\t\telse {\n\t\t\tcharsInUse = \"123456789ABCDEFGHJLKMNPRSTWXYZabcdefghijlmnopkrstuvxzyk@#%^\";\n\t\t}\n\t}\n\t\n\t/**\n\t * Gets the singleton\n\t * \n\t * @return Instance of Captcha class\n\t */\n\tpublic static Captcha getInstance()\n\t{\n\t\treturn classInstance;\n\t}\n\n\tprotected void buildInitialFactories()\n\t{\n\t\tthis.initializeChars();\n\t\t\n\t\tthis.backgroundGeneratorList = new ArrayList();\n\t\tthis.textPasterList = new ArrayList();\n\t\tthis.fontGeneratorList = new ArrayList();\n\t\t\n\t\tint width = SystemGlobals.getIntValue(ConfigKeys.CAPTCHA_WIDTH);\n\t\tint height = SystemGlobals.getIntValue(ConfigKeys.CAPTCHA_HEIGHT);\n\t\tint minWords = SystemGlobals.getIntValue(ConfigKeys.CAPTCHA_MIN_WORDS);\n\t\tint maxWords = SystemGlobals.getIntValue(ConfigKeys.CAPTCHA_MAX_WORDS);\n\t\tint minFontSize = SystemGlobals.getIntValue(ConfigKeys.CAPTCHA_MIN_FONT_SIZE);\n\t\tint maxFontSize = SystemGlobals.getIntValue(ConfigKeys.CAPTCHA_MAX_FONT_SIZE);\n\n\t\tthis.backgroundGeneratorList.add(new GradientBackgroundGenerator(new Integer(width), \n\t\t\t\tnew Integer(height), Color.PINK, Color.LIGHT_GRAY));\n\t\tthis.backgroundGeneratorList.add(new GradientBackgroundGenerator(new Integer(width), \n\t\t\t\tnew Integer(height), Color.WHITE, Color.RED));\n\t\tthis.backgroundGeneratorList.add(new GradientBackgroundGenerator(new Integer(width), \n\t\t\t\tnew Integer(height), Color.ORANGE, Color.LIGHT_GRAY));\n\t\tthis.backgroundGeneratorList.add(new GradientBackgroundGenerator(new Integer(width), \n\t\t\t\tnew Integer(height), Color.CYAN, Color.LIGHT_GRAY));\n\t\t//this.backgroundGeneratorList.add(new FunkyBackgroundGenerator(new Integer(250), new Integer(50)));\n\t\t\n\t\tthis.textPasterList.add(new RandomTextPaster(new Integer(minWords), new Integer(maxWords), Color.DARK_GRAY));\n\t\tthis.textPasterList.add(new RandomTextPaster(new Integer(minWords), new Integer(maxWords), Color.BLUE));\n\t\tthis.textPasterList.add(new RandomTextPaster(new Integer(minWords), new Integer(maxWords), Color.GREEN));\n\t\tthis.textPasterList.add(new RandomTextPaster(new Integer(minWords), new Integer(maxWords), Color.MAGENTA));\n\t\tthis.textPasterList.add(new RandomTextPaster(new Integer(minWords), new Integer(maxWords), Color.BLACK));\n\t\tthis.textPasterList.add(new RandomTextPaster(new Integer(minWords), new Integer(maxWords), Color.WHITE));\n\n\t\tthis.fontGeneratorList.add(new TwistedAndShearedRandomFontGenerator(new Integer(minFontSize), new Integer(maxFontSize)));\n\n\t\t// Create a random word generator\n\t\tWordGenerator words = new RandomWordGenerator(charsInUse);\n\n\t\tfor (Iterator fontIter = this.fontGeneratorList.iterator(); fontIter.hasNext();) {\n\t\t\tFontGenerator fontGeny = (FontGenerator) fontIter.next();\n\n\t\t\tfor (Iterator backIter = this.backgroundGeneratorList.iterator(); backIter.hasNext();) {\n\t\t\t\tBackgroundGenerator bkgdGeny = (BackgroundGenerator) backIter.next();\n\n\t\t\t\tfor (Iterator textIter = this.textPasterList.iterator(); textIter.hasNext();) {\n\t\t\t\t\tTextPaster textPaster = (TextPaster) textIter.next();\n\n\t\t\t\t\tWordToImage word2image = new ComposedWordToImage(fontGeny, bkgdGeny, textPaster);\n\t\t\t\t\t\n\t\t\t\t\t// Creates a ImageCaptcha Factory\n\t\t\t\t\tImageCaptchaFactory factory = new GimpyFactory(words, word2image);\n\t\t\t\t\t\n\t\t\t\t\t// Add a factory to the gimpy list (A Gimpy is a ImagCaptcha)\n\t\t\t\t\taddFactory(factory);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic void writeCaptchaImage()\n\t{\n\t\tBufferedImage image = SessionFacade.getUserSession().getCaptchaImage();\n\t\t\n\t\tif (image == null) {\n\t\t\treturn;\n\t\t}\n\n\t\tOutputStream outputStream = null;\n\t\t\n\t\ttry {\n\t\t\toutputStream = JForumExecutionContext.getResponse().getOutputStream();\n\t\t\tImageIO.write(image, \"jpg\", outputStream);\n\t\t}\n\t\tcatch (IOException ex) {\n\t\t\tlogger.error(ex);\n\t\t}\n\t\tfinally {\n\t\t\tif (outputStream != null) {\n\t\t\t\ttry {\n\t\t\t\t\toutputStream.close();\n\t\t\t\t}\n\t\t\t\tcatch (IOException ex) {}\n\t\t\t}\n\t\t}\n\t}\n}",
  "metadata": {
    "fileId": "Captcha_java_chunk_1",
    "fileName": "Captcha.java",
    "filePath": "src/net/jforum/util/Captcha.java"
  }
}