{
  "pageContent": "File Path: src/net/jforum/util/I18n.java\n\n Original Content: public class I18n\n{\n\tprivate static final Logger logger = Logger.getLogger(I18n.class);\n\n\tprivate static I18n classInstance = new I18n();\n\n\tprivate static Map messagesMap = new HashMap();\n\n\tprivate static Properties localeNames = new Properties();\n\n\tprivate static String defaultName;\n\n\tprivate static String baseDir;\n\n\tprivate static List watching = new ArrayList();\n\n\tpublic static final String CANNOT_DELETE_GROUP = \"CannotDeleteGroup\";\n\n\tpublic static final String CANNOT_DELETE_CATEGORY = \"CannotDeleteCategory\";\n\n\tpublic static final String CANNOT_DELETE_BANNER = \"CannotDeleteBanner\";\n\n\tprivate I18n()\n\t{\n\t}\n\n\t/**\n\t * Gets the singleton\n\t * \n\t * @return Instance of I18n class\n\t */\n\tpublic static I18n getInstance()\n\t{\n\t\treturn classInstance;\n\t}\n\n\t/**\n\t * Load the default I18n file\n\t * \n\t */\n\tpublic static synchronized void load()\n\t{\n\t\tbaseDir = SystemGlobals.getApplicationResourceDir() + \"/\" + SystemGlobals.getValue(ConfigKeys.LOCALES_DIR);\n\n\t\tloadLocales();\n\n\t\tdefaultName = SystemGlobals.getValue(ConfigKeys.I18N_DEFAULT_ADMIN);\n\t\tload(defaultName, null);\n\n\t\tString custom = SystemGlobals.getValue(ConfigKeys.I18N_DEFAULT);\n\t\tif (!custom.equals(defaultName)) {\n\t\t\tload(custom, defaultName);\n\t\t\tdefaultName = custom;\n\t\t}\n\t}\n\n\tpublic static void changeBoardDefault(String newDefaultLanguage)\n\t{\n\t\tload(newDefaultLanguage, SystemGlobals.getValue(ConfigKeys.I18N_DEFAULT_ADMIN));\n\t\tdefaultName = newDefaultLanguage;\n\t}\n\n\tprivate static void loadLocales()\n\t{\n\t\tFileInputStream fis = null;\n\t\t\n\t\ttry {\n\t\t\tfis = new FileInputStream(baseDir + SystemGlobals.getValue(ConfigKeys.LOCALES_NAMES));\n\t\t\tlocaleNames.load(fis);\n\t\t}\n\t\tcatch (IOException e) {\n\t\t\tthrow new ForumException(e);\n\t\t}\n\t\tfinally {\n\t\t\tif (fis != null) {\n\t\t\t\ttry { fis.close(); } catch (Exception e) {}\n\t\t\t}\n\t\t}\n\t}\n\n\tstatic void load(String localeName, String mergeWith)\n\t{\n\t\tload(localeName, mergeWith, false);\n\t}\n\n\tstatic void load(String localeName, String mergeWith, boolean force)\n\t{\n\t\tif (!force && (localeName == null || localeName.trim().equals(\"\") || I18n.contains(localeName))) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (localeNames.size() == 0) {\n\t\t\tloadLocales();\n\t\t}\n\n\t\tProperties p = new Properties();\n\n\t\tif (mergeWith != null) {\n\t\t\tif (!I18n.contains(mergeWith)) {\n\t\t\t\tload(mergeWith, null);\n\t\t\t}\n\n\t\t\tp.putAll((Properties) messagesMap.get(mergeWith));\n\t\t}\n\t\t\n\t\tFileInputStream fis = null;\n\n\t\ttry {\n\t\t\tString filename = baseDir + localeNames.getProperty(localeName);\n\t\t\t\n\t\t\t// If the requested locale does not exist, use the default\n\t\t\tif (!new File(filename).exists()) {\n\t\t\t\tfilename = baseDir + localeNames.getProperty(SystemGlobals.getValue(ConfigKeys.I18N_DEFAULT_ADMIN));\n\t\t\t}\n\t\t\t\n\t\t\tfis = new FileInputStream(filename);\n\t\t\tp.load(fis);\n\t\t}\n\t\tcatch (IOException e) {\n\t\t\tthrow new ForumException(e);\n\t\t}\n\t\tfinally {\n\t\t\tif (fis != null) {\n\t\t\t\ttry { fis.close(); } catch (Exception e) {}\n\t\t\t}\n\t\t}\n\t\t\n\t\tmessagesMap.put(localeName, p);\n\n\t\twatchForChanges(localeName);\n\t}\n\n\t/**\n\t * Loads a new locale. If <code>localeName</code> is either null or empty, or if the locale is\n\t * already loaded, the method will return without executing any code.\n\t * \n\t * @param localeName\n\t *            The locale name to load\n\t */\n\tpublic static void load(String localeName)\n\t{\n\t\tload(localeName, SystemGlobals.getValue(ConfigKeys.I18N_DEFAULT));\n\t}\n\n\tpublic static void reset()\n\t{\n\t\tmessagesMap = new HashMap();\n\t\tlocaleNames = new Properties();\n\t\tdefaultName = null;\n\t}\n\n\tprivate static void watchForChanges(final String localeName)\n\t{\n\t\tif (!watching.contains(localeName)) {\n\t\t\twatching.add(localeName);\n\n\t\t\tint fileChangesDelay = SystemGlobals.getIntValue(ConfigKeys.FILECHANGES_DELAY);\n\n\t\t\tif (fileChangesDelay > 0) {\n\t\t\t\tFileMonitor.getInstance().addFileChangeListener(new FileChangeListener() {\n\t\t\t\t\t/**\n\t\t\t\t\t * @see net.jforum.util.FileChangeListener#fileChanged(java.lang.String)\n\t\t\t\t\t */\n\t\t\t\t\tpublic void fileChanged(String filename)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\t\t\t\tlogger.info(\"Reloading i18n for \" + localeName);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tI18n.load(localeName, SystemGlobals.getValue(ConfigKeys.I18N_DEFAULT), true);\n\t\t\t\t\t}\n\t\t\t\t}, baseDir + localeNames.getProperty(localeName), fileChangesDelay);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Gets a I18N (internationalized) message.\n\t * \n\t * @param localeName\n\t *            The locale name to retrieve the messages from\n\t * @param messageName\n\t *            The message name to retrieve. Must be a valid entry into the file specified by\n\t *            <code>i18n.file</code> property.\n\t * @param params\n\t *            Parameters needed by some messages. The messages with extra parameters are\n\t *            formated according to {@link java.text.MessageFormat}specification\n\t * @return String With the message\n\t */\n\tpublic static String getMessage(String localeName, String messageName, Object params[])\n\t{\n\t\treturn MessageFormat.format(((Properties) messagesMap.get(localeName)).getProperty(messageName), params);\n\t}\n\n\t/**\n\t * @see #getMessage(String, String, Object[])\n\t * @param messageName String\n\t * @param params Object\n\t * @return String\n\t */\n\tpublic static String getMessage(String messageName, Object params[])\n\t{\n\t\tString lang = \"\";\n\t\tUserSession us = SessionFacade.getUserSession();\n\n\t\tif (us != null && us.getLang() != null) {\n\t\t\tlang = us.getLang();\n\t\t}\n\n\t\tif (\"\".equals(lang)) {\n\t\t\treturn getMessage(defaultName, messageName, params);\n\t\t}\n\n\t\treturn getMessage(lang, messageName, params);\n\t}\n\t\n\tpublic static String getMessage(String messageName, SimpleSequence params)\n\t{\n\t\ttry {\n\t\t\treturn getMessage(messageName, params.toList().toArray());\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tthrow new ForumException(e);\n\t\t}\n\t}\n\n\t/**\n\t * Gets an I18N (internationalization) message.\n\t * \n\t * @param m\n\t *            The message name to retrieve. Must be a valid entry into the file specified by\n\t *            <code>i18n.file</code> property.\n\t * @return String With the message\n\t * @param localeName\n\t *            String\n\t */\n\tpublic static String getMessage(String localeName, String m)\n\t{\n\t\tif (!messagesMap.containsKey(localeName)) {\n\t\t\tload(localeName);\n\t\t}\n\n\t\treturn (((Properties) messagesMap.get(localeName)).getProperty(m));\n\t}\n\n\tpublic static String getMessage(String m)\n\t{\n\t\treturn getMessage(getUserLanguage(), m);\n\t}\n\n\tpublic static String getMessage(String m, UserSession us)\n\t{\n\t\tif (us == null || us.getLang() == null || us.getLang().equals(\"\")) {\n\t\t\treturn getMessage(defaultName, m);\n\t\t}\n\n\t\treturn getMessage(us.getLang(), m);\n\t}\n\n\t/**\n\t * Gets the language name for the current request. The method will first look at\n\t * {@link UserSession#getLang()} and use it if any value is found. Otherwise, the default board\n\t * language will be used\n\t * \n\t * @return String\n\t */\n\tpublic static String getUserLanguage()\n\t{\n\t\tUserSession us = SessionFacade.getUserSession();\n\n\t\tif (us == null || us.getLang() == null || us.getLang().trim().equals(\"\")) {\n\t\t\treturn defaultName;\n\t\t}\n\n\t\treturn us.getLang();\n\t}\n\n\t/**\n\t * Check whether the language is loaded in i18n.\n\t * \n\t * @param language\n\t *            String\n\t * @return boolean\n\t */\n\tpublic static boolean contains(String language)\n\t{\n\t\treturn messagesMap.containsKey(language);\n\t}\n\n\t/**\n\t * Check if the given language exist.\n\t * \n\t * @param language\n\t *            The language to check\n\t * @return <code>true</code> if the language is a valid and registered translation.\n\t */\n\tpublic static boolean languageExists(String language)\n\t{\n\t\treturn (localeNames.getProperty(language) != null);\n\t}\n}",
  "metadata": {
    "fileId": "I18n_java_chunk_2",
    "fileName": "I18n.java",
    "filePath": "src/net/jforum/util/I18n.java"
  }
}