{
  "pageContent": "File Path: src/net/jforum/util/URLNormalizer.java\n\n Original Content: /*\n * Copyright (c) JForum Team\n * All rights reserved.\n * \n * Redistribution and use in source and binary forms, \n * with or without modification, are permitted provided \n * that the following conditions are met:\n * \n * 1) Redistributions of source code must retain the above \n * copyright notice, this list of conditions and the \n * following  disclaimer.\n * 2)  Redistributions in binary form must reproduce the \n * above copyright notice, this list of conditions and \n * the following disclaimer in the documentation and/or \n * other materials provided with the distribution.\n * 3) Neither the name of \"Rafael Steil\" nor \n * the names of its contributors may be used to endorse \n * or promote products derived from this software without \n * specific prior written permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT \n * HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY \n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, \n * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF \n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR \n * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL \n * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE \n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, \n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES \n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF \n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, \n * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER \n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER \n * IN CONTRACT, STRICT LIABILITY, OR TORT \n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN \n * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF \n * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE\n * \n * Created on 11/07/2005 00:32:01\n * The JForum Project\n * http://www.jforum.net\n */\npackage net.jforum.util;\n\n/**\n * Normalizes an URL. \n * Normalization means replacing blank spaces by underlines, \n * changing special chars by its regular form and etc.\n * @author Rafael Steil\n * @version $Id: URLNormalizer.java,v 1.4 2006/08/20 22:47:42 rafaelsteil Exp $\n */\npublic class URLNormalizer\n{\n\tpublic static final int LIMIT = 30;\n\t\n\t/**\n\t * Normalizes an URL.\n\t * The url will be truncated at {@link #LIMIT} chars\n\t * @param url the url to normalize\n\t * @return the normalized url\n\t * @see #normalize(String, int, boolean)\n\t */\n\tpublic static String normalize(String url)\n\t{\n\t\treturn normalize(url, LIMIT, true);\n\t}\n\t\n\t/**\n\t * \n\t * @param url the url to normalize\n\t * @param limit do not process more than <code>limit + 1</code> chars\n\t * @param friendlyTruncate If <code>true</code>, will try to not cut a word if\n\t * more than <code>limit</code> chars were processed. It will stop in the next\n\t * special char\n\t * @return the normalized url\n\t */\n\tpublic static String normalize(String url, int limit, boolean friendlyTruncate)\n\t{\n\t\tchar[] chars = url.toCharArray();\n\t\t\n\t\tStringBuffer sb = new StringBuffer(url.length());\n\t\t\n\t\tfor (int i = 0; i < chars.length; i++) {\n\t\t\tif (i <= limit || (friendlyTruncate && i > limit && sb.charAt(sb.length() - 1) != '_')) {\n\t\t\t\t\n\t\t\t\tif (Character.isSpaceChar(chars[i]) || chars[i] == '-') {\n\t\t\t\t\tif (friendlyTruncate && i > limit) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (i > 0 && sb.charAt(sb.length() - 1) != '_') {\n\t\t\t\t\t\tsb.append('_');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (Character.isLetterOrDigit(chars[i])) {\n\t\t\t\t\tsb.append(chars[i]);\n\t\t\t\t}\n\t\t\t\telse if (friendlyTruncate && i > limit) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn sb.toString().toLowerCase();\n\t}\n}",
  "metadata": {
    "fileId": "URLNormalizer_java_chunk_1",
    "fileName": "URLNormalizer.java",
    "filePath": "src/net/jforum/util/URLNormalizer.java"
  }
}