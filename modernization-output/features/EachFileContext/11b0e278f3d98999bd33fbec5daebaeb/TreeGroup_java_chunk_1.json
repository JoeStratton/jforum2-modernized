{
  "pageContent": "File Path: src/net/jforum/util/TreeGroup.java\n\n Original Content: /*\n * Copyright (c) JForum Team\n * All rights reserved.\n\n * Redistribution and use in source and binary forms, \n * with or without modification, are permitted provided \n * that the following conditions are met:\n\n * 1) Redistributions of source code must retain the above \n * copyright notice, this list of conditions and the \n * following  disclaimer.\n * 2)  Redistributions in binary form must reproduce the \n * above copyright notice, this list of conditions and \n * the following disclaimer in the documentation and/or \n * other materials provided with the distribution.\n * 3) Neither the name of \"Rafael Steil\" nor \n * the names of its contributors may be used to endorse \n * or promote products derived from this software without \n * specific prior written permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT \n * HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY \n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, \n * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF \n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR \n * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL \n * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE \n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, \n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES \n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF \n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, \n * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER \n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER \n * IN CONTRACT, STRICT LIABILITY, OR TORT \n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN \n * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF \n * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE\n * \n * This file creation date: Mar 3, 2003 / 11:28:25 AM\n * The JForum Project\n * http://www.jforum.net\n */\npackage net.jforum.util;\n\nimport java.util.ArrayList;\nimport java.util.Iterator;\nimport java.util.List;\n\nimport net.jforum.dao.DataAccessDriver;\nimport net.jforum.dao.TreeGroupDAO;\n\n/** \n * Implements a tree hierarchy of groups.\n * This class process all group hierarchy, and each group may have unlimited sub groups.\n * Each group is called <code>node</code> ( <code>net.jforum.model.GroupNode</code> object ), and\n * each node may have sub-nodes. For example, given a table like the folowing:  \n * \n * <pre>\n * <code>\n* +----+----------------+--------+\n * | id | name          | parent |\n * +----+---------------+--------+\n * |  6 | Parent 1      |      0 |\n * |  7 | Sub 1.1       |      6 |\n * |  8 | Sub 1.2       |      6 |\n * |  9 | SubSub 1.2.1  |      8 |\n * | 10 | SubSub 1.2.2  |      8 |\n * | 11 | Parent 2      |      0 |\n * | 12 | Parent 3      |      0 |\n * | 13 | Sub 3.1       |     12 |\n * | 14 | SubSub 3.1.1  |     13 |\n * | 15 | Sub 3.2       |     12 |\n * | 16 | Parent 4      |      0 |\n * +----+---------------+--------+\n * </code>\n * </pre>\n * \n * results on the folowing hierarchy \n * <pre>\n * <code>\n * Parent 1\n * ------\n * \t|\n *     Sub 1.1\n * \t----------\n * \t|\n * \tSub 1.2\n * \t----------\n * \t\t|\n * \t\tSubSub 1.2.1\n * \t\t------------\n * \t\t|\n * \t\tSubSub 1.2.2\n * Parent 2\n * -----\n * Parent 3\n * -----\n * \t|\n * \tSub 3.1\n * \t---------\n * \t\t|\n * \t\tSubSub 3.1.1\n * \t\t------------\n * \t|\n * \tSub 3.2\n * \t---------\n * Parent 4\n * ------\n * </code>\n * </pre>\n *  \n * As is possible to see, we have 4 parent groups, called <code>Parent 1</code>, <code>Parent 2</code>, \n * <code>Parent 3</code> and <code>Parent 4</code>. <code>Parent 1</code> has 2 sub groups: <code>Sub 1.1</code>\n * and <code>Sub 1.2</code>. <code>Sub 1.2</code> contains 2 subgroups, <code>SubSub 1.2.1</code> and \n * <code>SubSub 1.2.2</code>. As every group is a node, ( <code>GroupNode</code> object ), and as each node\n * may have sub-nodes, the processing would be as:\n * <p>\n * <li> When the method <code>size()</code> of the <code>Parent 1</code> object is called,  the number 2 will\n * be retorned, because <code>Parent 1</code> has 2 sub groups;\n * <li> when the <code>size()</code> method is called on the object of <code>Sub 1.1</code>, will be returned 0, because\n * <code>Sub 1.1</code> does not have any sub groups;\n * <li> On the other hand, then we call the <code>size()</code> method of the object represented by <code>Sub 1.2</code> object,\n * we wil have a return value of 2, because <code>Sub 1.2</code> has 2 sub groups.\n * <br>\n * The same operation is done to all other groups and its sub groups. \n * \n * @author Rafael Steil\n * @version $Id: TreeGroup.java,v 1.10 2006/08/20 22:47:42 rafaelsteil Exp $\n */\npublic class TreeGroup \n{\n\t/**\n\t * Default Constructor\n\t */\n\tpublic TreeGroup() { }\n\n\t\n\t/**\n\t * Process the group hierarchy.\n\t * \n\t * @return <code>List</code> containing the complete group hierarchy. Each element\n\t * from the list represents a single <code>GroupNode<code> object.\t \n\t * */\n\tpublic List getNodes()\n\t{\n\t\tList nodes = new ArrayList();\n\t\t\n\t\tTreeGroupDAO tgm = DataAccessDriver.getInstance().newTreeGroupDAO();\n\n\t\tList rootGroups = tgm.selectGroups(0);\t\n\t\t\t\t\n\t\tfor (Iterator iter = rootGroups.iterator(); iter.hasNext();) {\n\t\t\tGroupNode n = (GroupNode)iter.next();\n\t\t\t\t\t\t\n\t\t\tthis.checkExtraNodes(n);\n\t\t\t\n\t\t\tnodes.add(n);\n\t\t}\n\t\t\n\t\treturn nodes;\n\t}\n\t\n\t/**\n\t * Searchs for subgroups of a determined group\n\t *\n     * @param n  GroupNode\n     */\n\tprivate void checkExtraNodes(GroupNode n)\n\t{\n\t\tTreeGroupDAO tgm = DataAccessDriver.getInstance().newTreeGroupDAO();\n\n\t\tList childGroups = tgm.selectGroups(n.getId());\t\n\t\t\t\t\n\t\tfor (Iterator iter = childGroups.iterator(); iter.hasNext();) {\n\t\t\tGroupNode f = (GroupNode)iter.next();\n\t\t\t\n\t\t\tthis.checkExtraNodes(f);\n\t\t\t\n\t\t\tn.addNode(f);\n\t\t}\n\t}\n}",
  "metadata": {
    "fileId": "TreeGroup_java_chunk_1",
    "fileName": "TreeGroup.java",
    "filePath": "src/net/jforum/util/TreeGroup.java"
  }
}