{
  "pageContent": "File Path: src/net/jforum/util/FileMonitor.java\n\n Original Content: /*\n * Copyright (c) 2003, 2004 Rafael Steil\n * All rights reserved.\n * \n * Redistribution and use in source and binary forms, \n * with or without modification, are permitted provided \n * that the following conditions are met:\n * \n * 1) Redistributions of source code must retain the above \n * copyright notice, this list of conditions and the \n * following  disclaimer.\n * 2)  Redistributions in binary form must reproduce the \n * above copyright notice, this list of conditions and \n * the following disclaimer in the documentation and/or \n * other materials provided with the distribution.\n * 3) Neither the name of \"Rafael Steil\" nor \n * the names of its contributors may be used to endorse \n * or promote products derived from this software without \n * specific prior written permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT \n * HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY \n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, \n * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF \n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR \n * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL \n * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE \n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, \n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES \n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF \n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, \n * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER \n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER \n * IN CONTRACT, STRICT LIABILITY, OR TORT \n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN \n * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF \n * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE\n * \n * Created on 02/06/2004 23:29:51\n * The JForum Project\n * http://www.jforum.net\n */\npackage net.jforum.util;\n\nimport java.io.File;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Timer;\nimport java.util.TimerTask;\n\nimport org.apache.log4j.Logger;\n\n/**\n * Monitor class for file changes.\n * \n * @author Rafael Steil\n * @version $Id: FileMonitor.java,v 1.9 2007/04/12 02:11:53 rafaelsteil Exp $\n */\npublic class FileMonitor\n{\n\tprivate static Logger logger = Logger.getLogger(FileMonitor.class);\n\tprivate static final FileMonitor instance = new FileMonitor();\n\tprivate Timer timer;\n\tprivate Map timerEntries;\n\t\n\tprivate FileMonitor() {\n\t\tthis.timerEntries = new HashMap();\n\t\tthis.timer = new Timer(true);\n\t}\n\t\n\tpublic static FileMonitor getInstance() {\n\t\treturn instance;\n\t}\n\t\n\t/**\n\t * Add a file to the monitor\n\t * \n\t * @param listener The file listener\n\t * @param filename The filename to watch\n\t * @param period The watch interval.\n\t */\n\tpublic void addFileChangeListener(FileChangeListener listener, \n\t\tString filename, long period) {\n\t\tthis.removeFileChangeListener(filename);\n\t\t\n\t\tlogger.info(\"Watching \" + filename);\n\t\t\n\t\tFileMonitorTask task = new FileMonitorTask(listener, filename);\n\t\t\n\t\tthis.timerEntries.put(filename, task);\n\t\tthis.timer.schedule(task, period, period);\n\t}\n\t\n\t/**\n\t * Stop watching a file\n\t * \n\t * @param listener The file listener\n\t * @param filename The filename to keep watch\n\t */\n\tpublic void removeFileChangeListener(String filename) {\n\t\tFileMonitorTask task = (FileMonitorTask)this.timerEntries.remove(filename);\n\t\t\n\t\tif (task != null) {\n\t\t\ttask.cancel();\n\t\t}\n\t}\n\t\n\tprivate static class FileMonitorTask extends TimerTask {\n\t\tprivate FileChangeListener listener;\n\t\tprivate String filename;\n\t\tprivate File monitoredFile;\n\t\tprivate long lastModified;\n\t\t\n\t\tpublic FileMonitorTask(FileChangeListener listener, String filename) {\n\t\t\tthis.listener = listener;\n\t\t\tthis.filename = filename;\n\t\t\t\n\t\t\tthis.monitoredFile = new File(filename);\n\t\t\tif (!this.monitoredFile.exists()) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tthis.lastModified = this.monitoredFile.lastModified();\n\t\t}\n\t\t\n\t\tpublic void run() {\n\t\t\tlong latestChange = this.monitoredFile.lastModified();\n\t\t\tif (this.lastModified != latestChange) {\n\t\t\t\tthis.lastModified = latestChange;\n\t\t\t\t\n\t\t\t\tthis.listener.fileChanged(this.filename);\n\t\t\t}\n\t\t}\n\t}\n}",
  "metadata": {
    "fileId": "FileMonitor_java_chunk_1",
    "fileName": "FileMonitor.java",
    "filePath": "src/net/jforum/util/FileMonitor.java"
  }
}