{
  "pageContent": "File Path: src/net/jforum/util/SafeHtml.java\n\n Original Content: /*\n * Copyright (c) JForum Team\n * All rights reserved.\n * \n * Redistribution and use in source and binary forms, \n * with or without modification, are permitted provided \n * that the following conditions are met:\n * \n * 1) Redistributions of source code must retain the above \n * copyright notice, this list of conditions and the \n * following  disclaimer.\n * 2)  Redistributions in binary form must reproduce the \n * above copyright notice, this list of conditions and \n * the following disclaimer in the documentation and/or \n * other materials provided with the distribution.\n * 3) Neither the name of \"Rafael Steil\" nor \n * the names of its contributors may be used to endorse \n * or promote products derived from this software without \n * specific prior written permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT \n * HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY \n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, \n * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF \n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR \n * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL \n * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE \n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, \n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES \n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF \n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, \n * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER \n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER \n * IN CONTRACT, STRICT LIABILITY, OR TORT \n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN \n * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF \n * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE\n * \n * This file creation date: 27/09/2004 23:59:10\n * The JForum Project\n * http://www.jforum.net\n */\npackage net.jforum.util;\n\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.Set;\nimport java.util.Vector;\n\nimport net.jforum.exceptions.ForumException;\nimport net.jforum.util.preferences.ConfigKeys;\nimport net.jforum.util.preferences.SystemGlobals;\nimport net.jforum.view.forum.common.ViewCommon;\n\nimport org.htmlparser.Attribute;\nimport org.htmlparser.Node;\nimport org.htmlparser.Tag;\nimport org.htmlparser.lexer.Lexer;\nimport org.htmlparser.nodes.TextNode;\n\n/**\n * Process text with html and remove possible malicious tags and attributes.\n * Work based on tips from Amit Klein and the following documents:\n * <br>\n * <li>http://ha.ckers.org/xss.html\n * <li>http://quickwired.com/kallahar/smallprojects/php_xss_filter_function.php\n * <br>\n * @author Rafael Steil\n * @version $Id: SafeHtml.java,v 1.25 2007/09/19 14:08:57 rafaelsteil Exp $\n */\npublic class SafeHtml \n{\n\tprivate static Set welcomeTags;\n\tprivate static Set welcomeAttributes;\n\tprivate static Set allowedProtocols;\n\t\n\tstatic {\n\t\twelcomeTags = new HashSet();\n\t\twelcomeAttributes = new HashSet();\n\t\tallowedProtocols = new HashSet();\n\t\t\n\t\tsplitAndTrim(ConfigKeys.HTML_TAGS_WELCOME, welcomeTags);\n\t\tsplitAndTrim(ConfigKeys.HTML_ATTRIBUTES_WELCOME, welcomeAttributes);\n\t\tsplitAndTrim(ConfigKeys.HTML_LINKS_ALLOW_PROTOCOLS, allowedProtocols);\n\t}\n\t\n\tprivate static void splitAndTrim(String s, Set data)\n\t{\n\t\tString s1 = SystemGlobals.getValue(s);\n\t\t\n\t\tif (s1 == null) {\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tString[] tags = s1.toUpperCase().split(\",\");\n\n\t\tfor (int i = 0; i < tags.length; i++) {\n\t\t\tdata.add(tags[i].trim());\n\t\t}\n\t}\n\t\n\t/**\n\t * Given an input, analyze each HTML tag and remove unsecure attributes from them. \n\t * @param contents The content to verify\n\t * @return the content, secure. \n\t */\n\tpublic String ensureAllAttributesAreSafe(String contents) \n\t{\n\t\tStringBuffer sb = new StringBuffer(contents.length());\n\t\t\n\t\ttry {\n\t\t\tLexer lexer = new Lexer(contents);\n\t\t\tNode node;\n\t\t\t\n\t\t\twhile ((node = lexer.nextNode()) != null) {\n\t\t\t\tif (node instanceof Tag) {\n\t\t\t\t\tTag tag = (Tag)node;\n\t\t\t\t\t\n\t\t\t\t\tthis.checkAndValidateAttributes(tag, false);\n\t\t\t\t\t\n\t\t\t\t\tsb.append(tag.toHtml());\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tsb.append(node.toHtml());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tthrow new ForumException(\"Problems while parsing HTML: \" + e, e);\n\t\t}\n\t\t\n\t\treturn sb.toString();\n\t}\n\t\n\t/**\n\t * Given an input, makes it safe for HTML displaying. \n\t * Removes any not allowed HTML tag or attribute, as well\n\t * unwanted Javascript statements inside the tags. \n\t * @param contents the input to analyze\n\t * @return the modified and safe string\n\t */\n\tpublic String makeSafe(String contents)\n\t{\n\t\tif (contents == null || contents.length() == 0) {\n\t\t\treturn contents;\n\t\t}\n\t\t\n\t\tStringBuffer sb = new StringBuffer(contents.length());\n\t\t\n\t\ttry {\n\t\t\tLexer lexer = new Lexer(contents);\n\t\t\tNode node;\n\t\t\t\n\t\t\twhile ((node = lexer.nextNode()) != null) {\n\t\t\t\tboolean isTextNode = node instanceof TextNode;\n\t\t\t\t\n\t\t\t\tif (isTextNode) {\n\t\t\t\t\t// Text nodes are raw data, so we just\n\t\t\t\t\t// strip off all possible html content\n\t\t\t\t\tString text = node.toHtml();\n\t\t\t\t\t\n\t\t\t\t\tif (text.indexOf('>') > -1 || text.indexOf('<') > -1) {\n\t\t\t\t\t\tStringBuffer tmp = new StringBuffer(text);\n\t\t\t\t\t\t\n\t\t\t\t\t\tViewCommon.replaceAll(tmp, \"<\", \"&lt;\");\n\t\t\t\t\t\tViewCommon.replaceAll(tmp, \">\", \"&gt;\");\n\t\t\t\t\t\tViewCommon.replaceAll(tmp, \"\\\"\", \"&quot;\");\n\t\t\t\t\t\t\n\t\t\t\t\t\tnode.setText(tmp.toString());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (isTextNode || (node instanceof Tag && this.isTagWelcome(node))) {\n\t\t\t\t\tsb.append(node.toHtml());\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tStringBuffer tmp = new StringBuffer(node.toHtml());\n\t\t\t\t\t\n\t\t\t\t\tViewCommon.replaceAll(tmp, \"<\", \"&lt;\");\n\t\t\t\t\tViewCommon.replaceAll(tmp, \">\", \"&gt;\");\n\t\t\t\t\t\n\t\t\t\t\tsb.append(tmp.toString());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tthrow new ForumException(\"Error while parsing HTML: \" + e, e);\n\t\t}\n\t\t\n\t\treturn sb.toString();\n\t}\n\t\n\t/**\n\t * Returns true if a given tag is allowed. \n\t * Also, it checks and removes any unwanted attribute the tag may contain. \n\t * @param node The tag node to analyze\n\t * @return true if it is a valid tag. \n\t */\n\tprivate boolean isTagWelcome(Node node)\n\t{\n\t\tTag tag = (Tag)node;\n\n\t\tif (!welcomeTags.contains(tag.getTagName())) {\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\tthis.checkAndValidateAttributes(tag, true);\n\t\t\n\t\treturn true;\n\t}\n\t\n\t/**\n\t * Given a tag, check its attributes, removing those unwanted or not secure \n\t * @param tag The tag to analyze\n\t * @param checkIfAttributeIsWelcome true if the attribute name should be matched\n\t * against the list of welcome attributes, set in the main configuration file. \n\t */\n\tprivate void checkAndValidateAttributes(Tag tag, boolean checkIfAttributeIsWelcome)\n\t{\n\t\tVector newAttributes = new Vector();\n\t\t\n\t\tfor (Iterator iter = tag.getAttributesEx().iterator(); iter.hasNext(); ) {\n\t\t\tAttribute a = (Attribute)iter.next();\n\n\t\t\tString name = a.getName();\n\t\t\t\n\t\t\tif (name == null) {\n\t\t\t\tnewAttributes.add(a);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tname = name.toUpperCase();\n\t\t\t\t\n\t\t\t\tif (a.getValue() == null) {\n\t\t\t\t\tnewAttributes.add(a);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tString value = a.getValue().toLowerCase();\n\t\t\t\t\n\t\t\t\tif (checkIfAttributeIsWelcome && !this.isAttributeWelcome(name)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (!this.isAttributeSafe(name, value)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\tif (a.getValue().indexOf(\"&#\") > -1) {\n\t\t\t\t\ta.setValue(a.getValue().replaceAll(\"&#\", \"&amp;#\"));\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tnewAttributes.add(a);\n\t\t\t}\n\t\t}\n\t\t\n\t\ttag.setAttributesEx(newAttributes);\n\t}\n\t\n\t/**\n\t * Check if the given attribute name is in the list of allowed attributes\n\t * @param name the attribute name\n\t * @return true if it is an allowed attribute name\n\t */\n\tprivate boolean isAttributeWelcome(String name)\n\t{\n\t\treturn welcomeAttributes.contains(name);\n\t}\n\n\t/**\n\t * Check if the attribute is safe, checking either its name and value. \n\t * @param name the attribute name\n\t * @param value the attribute value\n\t * @return true if it is a safe attribute\n\t */\n\tprivate boolean isAttributeSafe(String name, String value)\n\t{\n\t\tif (name.length() >= 2 && name.charAt(0) == 'O' && name.charAt(1) == 'N') {\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\tif (value.indexOf('\\n') > -1 || value.indexOf('\\r') > -1 || value.indexOf('\\0') > -1) {\n\t\t\treturn false;\n\t\t}\n\t\t\t\n\t\tif ((\"HREF\".equals(name) || \"SRC\".equals(name))) {\n\t\t\tif (!this.isHrefValid(value)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse if (\"STYLE\".equals(name)) {\n\t\t\t// It is much more a try to not allow constructions\n\t\t\t// like style=\"background-color: url(javascript:xxxx)\" than anything else\n\t\t\tif (value.indexOf('(') > -1) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn true;\n\t}\n\t\n\t/**\n\t * Checks if a given address is valid\n\t * @param href The address to check\n\t * @return true if it is valid\n\t */\n\tprivate boolean isHrefValid(String href) \n\t{\n\t\tif (SystemGlobals.getBoolValue(ConfigKeys.HTML_LINKS_ALLOW_RELATIVE)\n\t\t\t&& href.length() > 0 \n\t\t\t&& href.charAt(0) == '/') {\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\tfor (Iterator iter = allowedProtocols.iterator(); iter.hasNext(); ) {\n\t\t\tString protocol = iter.next().toString().toLowerCase();\n\t\t\t\n\t\t\tif (href.startsWith(protocol)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn false;\n\t}\n}",
  "metadata": {
    "fileId": "SafeHtml_java_chunk_1",
    "fileName": "SafeHtml.java",
    "filePath": "src/net/jforum/util/SafeHtml.java"
  }
}