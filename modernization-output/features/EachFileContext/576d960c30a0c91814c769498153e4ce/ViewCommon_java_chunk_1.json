{
  "pageContent": "File Path: src/net/jforum/view/forum/common/ViewCommon.java\n\n Original Content: /*\n * Copyright (c) JForum Team\n * All rights reserved.\n * \n * Redistribution and use in source and binary forms, \n * with or without modification, are permitted provided \n * that the following conditions are met:\n * \n * 1) Redistributions of source code must retain the above \n * copyright notice, this list of conditions and the \n * following  disclaimer.\n * 2)  Redistributions in binary form must reproduce the \n * above copyright notice, this list of conditions and \n * the following disclaimer in the documentation and/or \n * other materials provided with the distribution.\n * 3) Neither the name of \"Rafael Steil\" nor \n * the names of its contributors may be used to endorse \n * or promote products derived from this software without \n * specific prior written permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT \n * HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY \n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, \n * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF \n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR \n * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL \n * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE \n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, \n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES \n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF \n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, \n * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER \n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER \n * IN CONTRACT, STRICT LIABILITY, OR TORT \n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN \n * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF \n * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE\n * \n * This file creation date: 02/04/2004 - 20:31:35\n * The JForum Project\n * http://www.jforum.net\n */\npackage net.jforum.view.forum.common;\n\nimport java.io.UnsupportedEncodingException;\nimport java.net.URI;\nimport java.net.URLEncoder;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\n\nimport org.apache.commons.lang.StringUtils;\n\nimport net.jforum.JForumExecutionContext;\nimport net.jforum.context.RequestContext;\nimport net.jforum.entities.User;\nimport net.jforum.exceptions.ForumException;\nimport net.jforum.util.preferences.ConfigKeys;\nimport net.jforum.util.preferences.SystemGlobals;\nimport net.jforum.util.preferences.TemplateKeys;\nimport freemarker.template.SimpleHash;\n\n/**\n * @author Rafael Steil\n * @version $Id: ViewCommon.java,v 1.32 2007/09/20 16:07:08 rafaelsteil Exp $\n */\npublic final class ViewCommon\n{\n\t/**\n\t * Prepared the user context to use data pagination. \n\t * The following variables are set to the context:\n\t * <p>\n\t * \t<ul>\n\t * \t\t<li> <i>totalPages</i> - total number of pages\n\t * \t\t<li> <i>recordsPerPage</i> - how many records will be shown on each page\n\t * \t\t<li> <i>totalRecords</i> - number of records fount\n\t * \t\t<li> <i>thisPage</i> - the current page being shown\n\t * \t\t<li> <i>start</i> - \n\t * \t</ul>\n\t * </p>\n\t * @param start int\n\t * @param totalRecords  int\n\t * @param recordsPerPage int\n\t */\n\tpublic static void contextToPagination(int start, int totalRecords, int recordsPerPage)\n\t{\n\t\tSimpleHash context = JForumExecutionContext.getTemplateContext();\n\t\t\n\t\tcontext.put(\"totalPages\", new Double(Math.ceil((double) totalRecords / (double) recordsPerPage)));\n\t\tcontext.put(\"recordsPerPage\", new Integer(recordsPerPage));\n\t\tcontext.put(\"totalRecords\", new Integer(totalRecords));\n\t\tcontext.put(\"thisPage\", new Double(Math.ceil((double) (start + 1) / (double) recordsPerPage)));\n\t\tcontext.put(\"start\", new Integer(start));\n\t}\n\t\n\t/**\n\t * Prepares the template context to show the login page, using the current URI as return path.\n\t * @return TemplateKeys.USER_LOGIN\n\t */\n\tpublic static String contextToLogin() \n\t{\n\t\tRequestContext request = JForumExecutionContext.getRequest();\n\t\t\n\t\tString uri = request.getRequestURI();\n\t\tString query = request.getQueryString();\n\t\tString returnPath = query == null ? uri : uri + \"?\" + query;\n\t\t\n\t\treturn contextToLogin(returnPath);\n\t}\n\t\n\t/**\n\t * Prepares the template context to show the login page, using \"returnPath\" as return path\n\t * @param returnPath the URI to use as return path\n\t * @return TemplateKeys.USER_LOGIN\n\t */\n\tpublic static String contextToLogin(String returnPath)\n\t{\n\t\tJForumExecutionContext.getTemplateContext().put(\"returnPath\", returnPath);\n\t\t\n\t\tif (ConfigKeys.TYPE_SSO.equals(SystemGlobals.getValue(ConfigKeys.AUTHENTICATION_TYPE))) {\n\t\t\tString redirect = SystemGlobals.getValue(ConfigKeys.SSO_REDIRECT);\n\t\t\t\n\t\t\tif (!StringUtils.isEmpty(redirect)) {\n\t\t\t\tURI redirectUri = URI.create(redirect);\n\t\t\t\t\n\t\t\t\tif (!redirectUri.isAbsolute()) {\n\t\t\t\t\tthrow new ForumException(\"SSO redirect URL should start with a scheme\");\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\ttry {\n\t\t\t\t\treturnPath = URLEncoder.encode( ViewCommon.getForumLink() + returnPath, \"UTF-8\");\n\t\t\t\t}\n\t\t\t\tcatch (UnsupportedEncodingException e) {}\n\t\t\t\t\n\t\t\t\tif (redirect.indexOf('?') == -1) {\n\t\t\t\t\tredirect += \"?\";\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tredirect += \"&\";\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tredirect += \"returnUrl=\" + returnPath;\n\t\t\t\t\n\t\t\t\tJForumExecutionContext.setRedirect(redirect);\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn TemplateKeys.USER_LOGIN;\n\t}\n\t\n\t/**\n\t * Returns the initial page to start fetching records from.\n\t *   \n\t * @return The initial page number\n\t */\n\tpublic static int getStartPage()\n\t{\n\t\tString s = JForumExecutionContext.getRequest().getParameter(\"start\");\n\t\tint start;\n\t\t\n\t\tif (StringUtils.isEmpty(s)) {\n\t\t\tstart = 0;\n\t\t}\n\t\telse {\n\t\t\tstart = Integer.parseInt(s);\n\t\t\t\n\t\t\tif (start < 0) {\n\t\t\t\tstart = 0;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn start;\n\t}\n\t\n\t/**\n\t * Gets the forum base link.\n\t * The returned link has a trailing slash\n\t * @return The forum link, with the trailing slash\n\t */\n\tpublic static String getForumLink()\n\t{\n\t\tString forumLink = SystemGlobals.getValue(ConfigKeys.FORUM_LINK);\n\t\t\n\t\tif (forumLink.charAt(forumLink.length() - 1) != '/') {\n\t\t\tforumLink += \"/\";\n\t\t}\n\t\t\n\t\treturn forumLink;\n\t}\n\t\n\tpublic static String toUtf8String(String s)\n\t{\n\t\tStringBuffer sb = new StringBuffer();\n\t\n\t\tfor (int i = 0; i < s.length(); i++) {\n\t\t\tchar c = s.charAt(i);\n\t\n\t\t\tif ((c >= 0) && (c <= 255)) {\n\t\t\t\tsb.append(c);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tbyte[] b;\n\t\n\t\t\t\ttry {\n\t\t\t\t\tb = Character.toString(c).getBytes(\"utf-8\");\n\t\t\t\t}\n\t\t\t\tcatch (Exception ex) {\n\t\t\t\t\tSystem.out.println(ex);\n\t\t\t\t\tb = new byte[0];\n\t\t\t\t}\n\t\n\t\t\t\tfor (int j = 0; j < b.length; j++) {\n\t\t\t\t\tint k = b[j];\n\t\n\t\t\t\t\tif (k < 0) {\n\t\t\t\t\t\tk += 256;\n\t\t\t\t\t}\n\t\n\t\t\t\t\tsb.append('%').append(Integer.toHexString(k).toUpperCase());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\n\t\treturn sb.toString();\n\t}\n\t\n\t/**\n\t * Formats a date using the pattern defined in the configuration file.\n\t * The key is the value of {@link net.jforum.util.preferences.ConfigKeys.DATE_TIME_FORMAT}\n\t * @param date the date to format\n\t * @return the string with the formated date\n\t */\n\tpublic static String formatDate(Date date) \n\t{\n\t\tSimpleDateFormat df = new SimpleDateFormat(SystemGlobals.getValue(ConfigKeys.DATE_TIME_FORMAT));\n\t\treturn df.format(date);\n\t}\n\t\n\t/**\n\t * Escapes &lt; by &amp;lt; and &gt; by &amp;gt;\n\t * @param contents the string to parse\n\t * @return the new string\n\t */\n\tpublic static String espaceHtml(String contents)\n\t{\n\t\tStringBuffer sb = new StringBuffer(contents);\n\t\t\n\t\treplaceAll(sb, \"<\", \"&lt\");\n\t\treplaceAll(sb, \">\", \"&gt;\");\n\t\t\n\t\treturn sb.toString();\n\t}\n\t\n\t/**\n\t * Replaces some string with another value\n\t * @param sb the StrinbBuilder with the contents to work on\n\t * @param what the string to be replaced\n\t * @param with the new value\n\t * @return the new string\n\t */\n\tpublic static String replaceAll(StringBuffer sb, String what, String with)\n\t{\n\t\tint pos = sb.indexOf(what);\n\t\t\n\t\twhile (pos > -1) {\n\t\t\tsb.replace(pos, pos + what.length(), with);\n\t\t\tpos = sb.indexOf(what);\n\t\t}\n\t\t\n\t\treturn sb.toString();\n\t}\n\t\n\t/**\n\t * @see #replaceAll(StringBuffer, String, String)\n     * @param contents String\n     * @param what String\n     * @param with String\n     * @return String\n\t */\n\tpublic static String replaceAll(String contents, String what, String with)\n\t{\n\t\treturn replaceAll(new StringBuffer(contents), what, with);\n\t}\n\n\t/**\n\t * Parse the user's signature, to make it proper to visualization\n\t * @param u the user instance\n\t */\n\tpublic static void prepareUserSignature(User u)\n\t{\n\t\tif (u.getSignature() != null) {\n\t\t\tStringBuffer sb = new StringBuffer(u.getSignature());\n\t\t\t\n\t\t\treplaceAll(sb, \"\\n\", \"<br />\");\n\t\t\t\n\t\t\tu.setSignature(sb.toString());\n\t\t\tu.setSignature(PostCommon.prepareTextForDisplayExceptCodeTag(u.getSignature(), true, true));\n\t\t}\n\t}\n}",
  "metadata": {
    "fileId": "ViewCommon_java_chunk_1",
    "fileName": "ViewCommon.java",
    "filePath": "src/net/jforum/view/forum/common/ViewCommon.java"
  }
}