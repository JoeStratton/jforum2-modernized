{
  "pageContent": "File Path: src/net/jforum/view/forum/common/UserCommon.java\n\n Original Content: /*\n * Copyright (c) JForum Team\n * All rights reserved.\n * \n * Redistribution and use in source and binary forms, \n * with or without modification, are permitted provided \n * that the following conditions are met:\n * \n * 1) Redistributions of source code must retain the above \n * copyright notice, this list of conditions and the \n * following  disclaimer.\n * 2)  Redistributions in binary form must reproduce the \n * above copyright notice, this list of conditions and \n * the following disclaimer in the documentation and/or \n * other materials provided with the distribution.\n * 3) Neither the name of \"Rafael Steil\" nor \n * the names of its contributors may be used to endorse \n * or promote products derived from this software without \n * specific prior written permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT \n * HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY \n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, \n * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF \n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR \n * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL \n * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE \n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, \n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES \n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF \n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, \n * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER \n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER \n * IN CONTRACT, STRICT LIABILITY, OR TORT \n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN \n * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF \n * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE\n * \n * Created on 29/11/2004 23:07:10\n * The JForum Project\n * http://www.jforum.net\n */\npackage net.jforum.view.forum.common;\n\nimport java.awt.Image;\nimport java.awt.image.BufferedImage;\nimport java.io.File;\nimport java.net.URL;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport javax.imageio.ImageIO;\n\nimport net.jforum.JForumExecutionContext;\nimport net.jforum.SessionFacade;\nimport net.jforum.context.RequestContext;\nimport net.jforum.dao.DataAccessDriver;\nimport net.jforum.dao.UserDAO;\nimport net.jforum.entities.User;\nimport net.jforum.util.I18n;\nimport net.jforum.util.MD5;\nimport net.jforum.util.SafeHtml;\nimport net.jforum.util.image.ImageUtils;\nimport net.jforum.util.legacy.commons.fileupload.FileItem;\nimport net.jforum.util.preferences.ConfigKeys;\nimport net.jforum.util.preferences.SystemGlobals;\n\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.log4j.Logger;\n\n/**\n * @author Rafael Steil\n * @version $Id: UserCommon.java,v 1.30 2008/01/23 01:27:16 rafaelsteil Exp $\n */\npublic class UserCommon \n{\n\tprivate static final Logger logger = Logger.getLogger(UserCommon.class);\n\n\t/**\n\t * Updates the user information\n\t * \n\t * @param userId int The user id we are saving\n     * @return List\n\t */\n\tpublic static List saveUser(int userId)\n\t{\n\t\tList errors = new ArrayList();\n\t\t\n\t\tUserDAO um = DataAccessDriver.getInstance().newUserDAO();\n\t\tUser u = um.selectById(userId);\n\t\t\n\t\tRequestContext request = JForumExecutionContext.getRequest();\n\t\tboolean isAdmin = SessionFacade.getUserSession().isAdmin();\n\n\t\tif (isAdmin) {\n\t\t\tString username = request.getParameter(\"username\");\n\t\t\n\t\t\tif (username != null) {\n\t\t\t\tu.setUsername(username.trim());\n\t\t\t}\n\t\t\t\n\t\t\tif (request.getParameter(\"rank_special\") != null) {\n\t\t\t\tu.setRankId(request.getIntParameter(\"rank_special\"));\n\t\t\t}\n\t\t}\n\t\t\n\t\tSafeHtml safeHtml = new SafeHtml();\n\t\t\n\t\tu.setId(userId);\n\t\tu.setIcq(safeHtml.makeSafe(request.getParameter(\"icq\")));\n\t\tu.setAim(safeHtml.makeSafe(request.getParameter(\"aim\")));\n\t\tu.setMsnm(safeHtml.makeSafe(request.getParameter(\"msn\")));\n\t\tu.setYim(safeHtml.makeSafe(request.getParameter(\"yim\")));\n\t\tu.setFrom(safeHtml.makeSafe(request.getParameter(\"location\")));\n\t\tu.setOccupation(safeHtml.makeSafe(request.getParameter(\"occupation\")));\n\t\tu.setInterests(safeHtml.makeSafe(request.getParameter(\"interests\")));\n\t\tu.setBiography(safeHtml.makeSafe(request.getParameter(\"biography\")));\n\t\tu.setSignature(safeHtml.makeSafe(request.getParameter(\"signature\")));\n\t\tu.setViewEmailEnabled(request.getParameter(\"viewemail\").equals(\"1\"));\n\t\tu.setViewOnlineEnabled(request.getParameter(\"hideonline\").equals(\"0\"));\n\t\tu.setNotifyPrivateMessagesEnabled(request.getParameter(\"notifypm\").equals(\"1\"));\n\t\tu.setNotifyOnMessagesEnabled(request.getParameter(\"notifyreply\").equals(\"1\"));\n\t\tu.setAttachSignatureEnabled(request.getParameter(\"attachsig\").equals(\"1\"));\n\t\tu.setHtmlEnabled(request.getParameter(\"allowhtml\").equals(\"1\"));\n\t\tu.setLang(request.getParameter(\"language\"));\n\t\tu.setBbCodeEnabled(\"1\".equals(request.getParameter(\"allowbbcode\")));\n\t\tu.setSmiliesEnabled(\"1\".equals(request.getParameter(\"allowsmilies\")));\n\t\tu.setNotifyAlways(\"1\".equals(request.getParameter(\"notify_always\")));\n\t\tu.setNotifyText(\"1\".equals(request.getParameter(\"notify_text\")));\n\t\t\n\t\tString website = safeHtml.makeSafe(request.getParameter(\"website\"));\n\t\t\n\t\tif (!StringUtils.isEmpty(website) && !website.toLowerCase().startsWith(\"http://\")) {\n\t\t\twebsite = \"http://\" + website;\n\t\t}\n\t\n\t\tu.setWebSite(website);\n\t\t\n\t\tString currentPassword = request.getParameter(\"current_password\");\n\t\tboolean isCurrentPasswordEmpty = currentPassword == null || \"\".equals(currentPassword.trim());\n\t\t\n\t\tif (isAdmin || !isCurrentPasswordEmpty) {\n\t\t\tif (!isCurrentPasswordEmpty) {\n\t\t\t\tcurrentPassword = MD5.crypt(currentPassword);\n\t\t\t}\n\t\t\t\n\t\t\tif (isAdmin || u.getPassword().equals(currentPassword)) {\n\t\t\t\tu.setEmail(safeHtml.makeSafe(request.getParameter(\"email\")));\n\t\t\t\t\n\t\t\t\tString newPassword = request.getParameter(\"new_password\");\n\n\t\t\t\tif (newPassword != null && newPassword.length() > 0) {\n\t\t\t\t\tu.setPassword(MD5.crypt(newPassword));\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\terrors.add(I18n.getMessage(\"User.currentPasswordInvalid\"));\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (request.getParameter(\"avatardel\") != null) {\n\t\t\tFile avatarFile = new File(u.getAvatar());\n\t\t\t\n\t\t\tFile fileToDelete = new File(SystemGlobals.getApplicationPath() \n\t\t\t\t+ \"/images/avatar/\"\n\t\t\t\t+ avatarFile.getName());\n\t\t\t\n\t\t\tif (fileToDelete.exists()) {\n\t\t\t\tfileToDelete.delete();\n\t\t\t}\n\t\t\t\n\t\t\tu.setAvatar(null);\n\t\t}\n\t\t\n\t\tif (request.getObjectParameter(\"avatar\") != null) {\n\t\t\ttry {\n\t\t\t\tUserCommon.handleAvatar(u);\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\tUserCommon.logger.warn(\"Problems while uploading the avatar: \" + e);\n\t\t\t\terrors.add(I18n.getMessage(\"User.avatarUploadError\"));\n\t\t\t}\n\t\t} else if (SystemGlobals.getBoolValue(ConfigKeys.AVATAR_ALLOW_EXTERNAL_URL)) {\n\t\t\tString avatarUrl = request.getParameter(\"avatarUrl\");\n\t\t\t\n\t\t\tif (!StringUtils.isEmpty(avatarUrl)) {\n\t\t\t\tif (avatarUrl.toLowerCase().startsWith(\"http://\")) {\n\t\t\t\t\t\n\t\t\t\t\ttry {\n\t\t\t\t\t\tImage image = ImageIO.read(new URL(avatarUrl));\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (image != null) {\n\t\t\t\t\t\t\tif (image.getWidth(null) > SystemGlobals.getIntValue(ConfigKeys.AVATAR_MAX_WIDTH)\n\t\t\t\t\t\t\t\t|| image.getHeight(null) > SystemGlobals.getIntValue(ConfigKeys.AVATAR_MAX_HEIGHT)) {\n\t\t\t\t\t\t\t\terrors.add(I18n.getMessage(\"User.avatarTooBig\"));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tu.setAvatar(avatarUrl);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t\terrors.add(I18n.getMessage(\"User.avatarUploadError\"));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\terrors.add(I18n.getMessage(\"User.avatarUrlShouldHaveHttp\"));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (errors.size() == 0) {\n\t\t\tum.update(u);\n\t\t\t\n\t\t\tif (SessionFacade.getUserSession().getUserId() == userId) {\n\t\t\t    SessionFacade.getUserSession().setLang(u.getLang());\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn errors;\n\t}\n\n\t/**\n\t * @param u User\n\t */\n\tprivate static void handleAvatar(User u)\n\t{\n\t\tString fileName = MD5.crypt(Integer.toString(u.getId()));\n\t\tFileItem item = (FileItem)JForumExecutionContext.getRequest().getObjectParameter(\"avatar\");\n\t\tUploadUtils uploadUtils = new UploadUtils(item);\n\t\t\n\t\t// Gets file extension\n\t\tString extension = uploadUtils.getExtension().toLowerCase();\n\t\tint type = ImageUtils.IMAGE_UNKNOWN;\n\t\t\n\t\tif (extension.equals(\"jpg\") || extension.equals(\"jpeg\")) {\n\t\t\ttype = ImageUtils.IMAGE_JPEG;\n\t\t}\n\t\telse if (extension.equals(\"gif\") || extension.equals(\"png\")) {\n\t\t\ttype = ImageUtils.IMAGE_PNG;\n\t\t}\n\t\t\n\t\tif (type != ImageUtils.IMAGE_UNKNOWN) {\n\t\t\tString avatarTmpFileName = SystemGlobals.getApplicationPath() \n\t\t\t\t+ \"/images/avatar/\" \n\t\t\t\t+ fileName \n\t\t\t\t+ \"_tmp.\" \n\t\t\t\t+ extension;\n\t\t\t\n\t\t\t// We cannot handle gifs\n\t\t\tif (extension.toLowerCase().equals(\"gif\")) {\n\t\t\t\textension = \"png\";\n\t\t\t}\n\t\n\t\t\tString avatarFinalFileName = SystemGlobals.getApplicationPath() \n\t\t\t\t+ \"/images/avatar/\" \n\t\t\t\t+ fileName \n\t\t\t\t+ \".\" \n\t\t\t\t+ extension;\n\t\n\t\t\tuploadUtils.saveUploadedFile(avatarTmpFileName);\n\t\t\t\n\t\t\t// OK, time to check and process the avatar size\n\t\t\tint maxWidth = SystemGlobals.getIntValue(ConfigKeys.AVATAR_MAX_WIDTH);\n\t\t\tint maxHeight = SystemGlobals.getIntValue(ConfigKeys.AVATAR_MAX_HEIGHT);\n\t\n\t\t\tBufferedImage image = ImageUtils.resizeImage(avatarTmpFileName, type, maxWidth, maxHeight);\n\t\t\tImageUtils.saveImage(image, avatarFinalFileName, type);\n\t\n\t\t\tu.setAvatar(fileName + \".\" + extension);\n\t\t\t\n\t\t\t// Delete the temporary file\n\t\t\tnew File(avatarTmpFileName).delete();\n\t\t}\n\t}\n}",
  "metadata": {
    "fileId": "UserCommon_java_chunk_1",
    "fileName": "UserCommon.java",
    "filePath": "src/net/jforum/view/forum/common/UserCommon.java"
  }
}