{
  "pageContent": "File Path: src/net/jforum/view/forum/common/PostCommon.java\n\n Original Content: public class PostCommon\n{\n\tpublic static Post preparePostForDisplay(Post post)\n\t{\n\t\tif (post.getText() == null) {\n\t\t\treturn post;\n\t\t}\n\t\t\n\t\tStringBuffer text = new StringBuffer(post.getText());\n\t\t\n\t\tif (!post.isHtmlEnabled()) {\n\t\t\tViewCommon.replaceAll(text, \"<\", \"&lt;\");\n\t\t\tViewCommon.replaceAll(text, \">\", \"&gt;\");\n\t\t}\n\t\t\n\t\t// Do not remove the trailing blank space, as it would\n\t\t// cause some regular expressions to fail\n\t\tViewCommon.replaceAll(text, \"\\n\", \"<br /> \");\n\t\t\n\t\tSafeHtml safeHtml = new SafeHtml();\n\t\t\n\t\tpost.setText(text.toString());\n\t\tpost.setText(safeHtml.makeSafe(post.getText()));\n\t\t\n\t\tprocessText(post);\n\t\t\n\t\tpost.setText(safeHtml.ensureAllAttributesAreSafe(post.getText()));\n\t\t\n\t\treturn post;\n\t}\n\t\n\tprivate static void processText(Post post)\n\t{\n\t\tint codeIndex = post.getText().indexOf(\"[code\");\n\t\tint codeEndIndex = codeIndex > -1 ? post.getText().indexOf(\"[/code]\") : -1;\n\t\t\n\t\tboolean hasCodeBlock = false;\n\t\t\n\t\tif (codeIndex == -1 || codeEndIndex == -1 || codeEndIndex < codeIndex) {\n\t\t\tpost.setText(prepareTextForDisplayExceptCodeTag(post.getText().toString(),\n\t\t\t\tpost.isBbCodeEnabled(), post.isSmiliesEnabled()));\n\t\t}\n\t\telse if (post.isBbCodeEnabled()) {\n\t\t\thasCodeBlock = true;\n\t\t\t\n\t\t\tint nextStartPos = 0;\n\t\t\tStringBuffer result = new StringBuffer(post.getText().length());\n\t\t\t\n\t\t\twhile (codeIndex > -1 && codeEndIndex > -1 && codeEndIndex > codeIndex) {\n\t\t\t\tcodeEndIndex += \"[/code]\".length();\n\t\t\t\t\n\t\t\t\tString nonCodeResult = prepareTextForDisplayExceptCodeTag(post.getText().substring(nextStartPos, codeIndex), \n\t\t\t\t\tpost.isBbCodeEnabled(), post.isSmiliesEnabled());\n\t\t\t\t\n\t\t\t\tString codeResult = parseCode(post.getText().substring(codeIndex, codeEndIndex));\n\t\t\t\t\n\t\t\t\tresult.append(nonCodeResult).append(codeResult);\n\t\t\t\t\n\t\t\t\tnextStartPos = codeEndIndex;\n\t\t\t\tcodeIndex = post.getText().indexOf(\"[code\", codeEndIndex);\n\t\t\t\tcodeEndIndex = codeIndex > -1 ? post.getText().indexOf(\"[/code]\", codeIndex) : -1;\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\tif (nextStartPos > -1) {\n\t\t\t\tString nonCodeResult = prepareTextForDisplayExceptCodeTag(post.getText().substring(nextStartPos), \n\t\t\t\t\tpost.isBbCodeEnabled(), post.isSmiliesEnabled());\n\t\t\t\t\n\t\t\t\tresult.append(nonCodeResult);\n\t\t\t}\n\t\t\t\n\t\t\tpost.setText(result.toString());\n\t\t}\n\t\t\n\t\tif (hasCodeBlock) {\n\t\t\tJForumExecutionContext.getTemplateContext().put(\"hasCodeBlock\", hasCodeBlock);\n\t\t}\n\t}\n\t\n\tprivate static String parseCode(String text)\n\t{\n\t\tfor (Iterator iter = BBCodeRepository.getBBCollection().getBbList().iterator(); iter.hasNext();) {\n\t\t\tBBCode bb = (BBCode)iter.next();\n\t\t\t\n\t\t\tif (bb.getTagName().startsWith(\"code\")) {\n\t\t\t\tMatcher matcher = Pattern.compile(bb.getRegex()).matcher(text);\n\t\t\t\tStringBuffer sb = new StringBuffer(text);\n\n\t\t\t\twhile (matcher.find()) {\n\t\t\t\t\tStringBuffer lang = null;\n\t\t\t\t\tStringBuffer contents = null;\n\t\t\t\t\t\n\t\t\t\t\tif (\"code\".equals(bb.getTagName())) {\n\t\t\t\t\t    contents = new StringBuffer(matcher.group(1));\n\t\t\t\t\t} \n\t\t\t\t\telse {\n\t\t\t\t\t\tlang = new StringBuffer(matcher.group(1));\n\t\t\t\t\t\tcontents = new StringBuffer(matcher.group(2));\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tViewCommon.replaceAll(contents, \"<br /> \", \"\\n\");\n\n\t\t\t\t\t// XML-like tags\n\t\t\t\t\tViewCommon.replaceAll(contents, \"<\", \"&lt;\");\n\t\t\t\t\tViewCommon.replaceAll(contents, \">\", \"&gt;\");\n\t\t\t\t\t\n\t\t\t\t\t// Note: there is no replacing for spaces and tabs as\n\t\t\t\t\t// we are relying on the Javascript SyntaxHighlighter library\n\t\t\t\t\t// to do it for us\n\t\t\t\t\t\n\t\t\t\t\tStringBuffer replace = new StringBuffer(bb.getReplace());\n\t\t\t\t\tint index = replace.indexOf(\"$1\");\n\t\t\t\t\t\n\t\t\t\t\tif (\"code\".equals(bb.getTagName())) {\n\t\t\t\t\t\tif (index > -1) {\n\t\t\t\t\t\t\treplace.replace(index, index + 2, contents.toString());\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tindex = sb.indexOf(\"[code]\");\t\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tif (index > -1) {\n\t\t\t\t\t\t\treplace.replace(index, index + 2, lang.toString());\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tindex = replace.indexOf(\"$2\");\n\n\t\t\t\t\t\tif (index > -1) {\n\t\t\t\t\t\t\treplace.replace(index, index + 2, contents.toString());\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tindex = sb.indexOf(\"[code=\");\n\t\t\t\t\t} \n\t\t\t\t\tint lastIndex = sb.indexOf(\"[/code]\", index) + \"[/code]\".length();\n\n\t\t\t\t\tif (lastIndex > index) {\n\t\t\t\t\t\tsb.replace(index, lastIndex, replace.toString());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\ttext = sb.toString();\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn text;\n\t}\n\t\n\tpublic static String prepareTextForDisplayExceptCodeTag(String text, boolean isBBCodeEnabled, boolean isSmilesEnabled)\n\t{\n\t\tif (text == null) {\n\t\t\treturn text;\n\t\t}\n\t\t\n\t\tif (isSmilesEnabled) {\n\t\t\ttext = processSmilies(new StringBuffer(text));\n\t\t}\n\t\t\n\t\tif (isBBCodeEnabled && text.indexOf('[') > -1 && text.indexOf(']') > -1) {\n\t\t\tfor (Iterator iter = BBCodeRepository.getBBCollection().getBbList().iterator(); iter.hasNext();) {\n\t\t\t\tBBCode bb = (BBCode)iter.next();\n\t\t\t\t\n\t\t\t\tif (!bb.getTagName().startsWith(\"code\")) {\n\t\t\t\t\ttext = text.replaceAll(bb.getRegex(), bb.getReplace());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\ttext = parseDefaultRequiredBBCode(text);\n\t\t\n\t\treturn text;\n\t}\n\t\n\tpublic static String parseDefaultRequiredBBCode(String text)\n\t{\n\t\tCollection list = BBCodeRepository.getBBCollection().getAlwaysProcessList();\n\t\t\n\t\tfor (Iterator iter = list.iterator(); iter.hasNext(); ) {\n\t\t\tBBCode bb = (BBCode)iter.next();\n\t\t\ttext = text.replaceAll(bb.getRegex(), bb.getReplace());\n\t\t}\n\t\t\n\t\treturn text;\n\t}\n\n\t/**\n\t * Replace the smlies code by the respective URL.\n\t * @param text The text to process\n\t * @return the parsed text. Note that the StringBuffer you pass as parameter\n\t * will already have the right contents, as the replaces are done on the instance\n\t */\n\tpublic static String processSmilies(StringBuffer text)\n\t{\n\t\tList smilies = SmiliesRepository.getSmilies();\n\t\t\n\t\tfor (Iterator iter = smilies.iterator(); iter.hasNext(); ) {\n\t\t\tSmilie s = (Smilie) iter.next();\n\t\t\tint pos = text.indexOf(s.getCode());\n\t\t\t\n\t\t\t// The counter is used as prevention, in case\n\t\t\t// the while loop turns into an always true \n\t\t\t// expression, for any reason\n\t\t\tint counter = 0;\n\t\t\t\n\t\t\twhile (pos > -1 && counter++ < 300) {\n\t\t\t\ttext.replace(pos, pos + s.getCode().length(), s.getUrl());\n\t\t\t\tpos = text.indexOf(s.getCode());\n\t\t\t}\n\t\t}\n\n\t\treturn text.toString();\n\t}\n\n\tpublic static Post fillPostFromRequest()\n\t{\n\t\tPost p = new Post();\n\t\tp.setTime(new Date());\n\n\t\treturn fillPostFromRequest(p, false);\n\t}\n\n\tpublic static Post fillPostFromRequest(Post p, boolean isEdit) \n\t{\n\t\tRequestContext request = JForumExecutionContext.getRequest();\n\t\t\n\t\tp.setSubject(request.getParameter(\"subject\"));\n\t\tp.setBbCodeEnabled(request.getParameter(\"disable_bbcode\") == null);\n\t\tp.setSmiliesEnabled(request.getParameter(\"disable_smilies\") == null);\n\t\tp.setSignatureEnabled(request.getParameter(\"attach_sig\") != null);\n\t\t\n\t\tif (!isEdit) {\n\t\t\tp.setUserIp(request.getRemoteAddr());\n\t\t\tp.setUserId(SessionFacade.getUserSession().getUserId());\n\t\t}\n\t\t\n\t\tboolean htmlEnabled = SecurityRepository.canAccess(SecurityConstants.PERM_HTML_DISABLED, \n\t\t\trequest.getParameter(\"forum_id\"));\n\t\tp.setHtmlEnabled(htmlEnabled && request.getParameter(\"disable_html\") == null);\n\n\t\tif (p.isHtmlEnabled()) {\n\t\t\tp.setText(new SafeHtml().makeSafe(request.getParameter(\"message\")));\n\t\t}\n\t\telse {\n\t\t\tp.setText(request.getParameter(\"message\"));\n\t\t}\n\n\t\treturn p;\n\t}\n\t\n\tpublic static boolean canEditPost(Post post)\n\t{\n\t\treturn SessionFacade.isLogged()\n\t\t\t&& (post.getUserId() == SessionFacade.getUserSession().getUserId()\n\t\t\t|| SecurityRepository.canAccess(SecurityConstants.PERM_MODERATION_POST_EDIT));\n\t}\n\n\tpublic static List topicPosts(PostDAO dao, boolean canEdit, int userId, int topicId, int start, int count)\n\t{\n\t\tboolean needPrepare = true;\n\t\tList posts;\n\t\t\n \t\tif (SystemGlobals.getBoolValue(ConfigKeys.POSTS_CACHE_ENABLED)) {\n \t\t\tposts = PostRepository.selectAllByTopicByLimit(topicId, start, count);\n \t\t\tneedPrepare = false;\n \t\t}\n \t\telse {\n \t\t\tposts = dao.selectAllByTopicByLimit(topicId, start, count);\n \t\t}\n \t\t\n\t\tList helperList = new ArrayList();\n\n\t\tint anonymousUser = SystemGlobals.getIntValue(ConfigKeys.ANONYMOUS_USER_ID);\n\n\t\tfor (Iterator iter = posts.iterator(); iter.hasNext(); ) {\n\t\t\tPost p;\n\t\t\t\n\t\t\tif (needPrepare) {\n\t\t\t\tp = (Post)iter.next();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tp = new Post((Post)iter.next());\n\t\t\t}\n\t\t\t\n\t\t\tif (canEdit || (p.getUserId() != anonymousUser && p.getUserId() == userId)) {\n\t\t\t\tp.setCanEdit(true);\n\t\t\t}\n\n\t\t\thelperList.add(needPrepare ? PostCommon.preparePostForDisplay(p) : p);\n\t\t}\n\n\t\treturn helperList;\n\t}\n}",
  "metadata": {
    "fileId": "PostCommon_java_chunk_2",
    "fileName": "PostCommon.java",
    "filePath": "src/net/jforum/view/forum/common/PostCommon.java"
  }
}