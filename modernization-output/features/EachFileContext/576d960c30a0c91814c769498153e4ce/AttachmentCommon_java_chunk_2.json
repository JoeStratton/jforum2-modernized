{
  "pageContent": "File Path: src/net/jforum/view/forum/common/AttachmentCommon.java\n\n Original Content: public class AttachmentCommon\n{\n\tprivate static Logger logger = Logger.getLogger(AttachmentCommon.class);\n\tprivate static final String DENY_ALL = \"*\";\n\t\n\tprivate RequestContext request;\n\tprivate AttachmentDAO am;\n\tprivate boolean canProceed;\n\tprivate Map filesToSave = new HashMap();\n\t\n\tpublic AttachmentCommon(RequestContext request, int forumId)\n\t{\n\t\tthis.request = request;\n\t\tthis.am = DataAccessDriver.getInstance().newAttachmentDAO();\n\t\t\n\t\tthis.canProceed = SecurityRepository.canAccess(SecurityConstants.PERM_ATTACHMENTS_ENABLED, \n\t\t\tInteger.toString(forumId));\n\t}\n\t\n\tpublic void preProcess()\n\t{\n\t\tif (!this.canProceed) {\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tString t = this.request.getParameter(\"total_files\");\n\t\t\n\t\tif (t == null || \"\".equals(t)) {\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tint total = Integer.parseInt(t);\n\t\t\n\t\tif (total < 1) {\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tif (total > SystemGlobals.getIntValue(ConfigKeys.ATTACHMENTS_MAX_POST)) {\n\t\t\ttotal = SystemGlobals.getIntValue(ConfigKeys.ATTACHMENTS_MAX_POST);\n\t\t}\n\n\t\tlong totalSize = 0;\n\t\tint userId = SessionFacade.getUserSession().getUserId();\n\t\tMap extensions = this.am.extensionsForSecurity();\n\t\t\n\t\tfor (int i = 0; i < total; i++) {\n\t\t\tFileItem item = (FileItem)this.request.getObjectParameter(\"file_\" + i);\n\t\t\t\n\t\t\tif (item == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (item.getName().indexOf('\\000') > -1) {\n\t\t\t\tlogger.warn(\"Possible bad attachment (null char): \" + item.getName()\n\t\t\t\t\t+ \" - user_id: \" + SessionFacade.getUserSession().getUserId());\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t\n\t\t\tUploadUtils uploadUtils = new UploadUtils(item);\n\n\t\t\t// Check if the extension is allowed\n\t\t\tboolean containsExtension = extensions.containsKey(uploadUtils.getExtension());\n\t\t\tboolean denyAll = extensions.containsKey(DENY_ALL);\n\n\t\t\tboolean isAllowed = (!denyAll && !containsExtension)\n\t\t\t\t|| (containsExtension && extensions.get(uploadUtils.getExtension()).equals(Boolean.TRUE));\n\n\t\t\tif (!isAllowed) { \n\t\t\t\tthrow new BadExtensionException(I18n.getMessage(\"Attachments.badExtension\", \n\t\t\t\t\tnew String[] { uploadUtils.getExtension() }));\n\t\t\t}\n\n\t\t\t// Check comment length:\n\t\t\tString comment = this.request.getParameter(\"comment_\" + i);\n\t\t\tif (comment.length() > 254) {\n\t\t\t\tthrow new AttachmentException(\"Comment too long.\");\n\t\t\t}\n\t\t\t\n\t\t\tAttachment a = new Attachment();\n\t\t\ta.setUserId(userId);\n\t\t\t\n\t\t\tAttachmentInfo info = new AttachmentInfo();\n\t\t\tinfo.setFilesize(item.getSize());\n\t\t\tinfo.setComment(comment);\n\t\t\tinfo.setMimetype(item.getContentType());\n\t\t\t\n\t\t\t// Get only the filename, without the path (IE does that)\n\t\t\tString realName = this.stripPath(item.getName());\n\t\t\t\n\t\t\tinfo.setRealFilename(realName);\n\t\t\tinfo.setUploadTimeInMillis(System.currentTimeMillis());\n\t\t\t\n\t\t\tAttachmentExtension ext = this.am.selectExtension(uploadUtils.getExtension().toLowerCase());\n\t\t\tif (ext.isUnknown()) {\n\t\t\t\text.setExtension(uploadUtils.getExtension());\n\t\t\t}\n\t\t\t\n\t\t\tinfo.setExtension(ext);\n\t\t\tString savePath = this.makeStoreFilename(info);\n\t\t\tinfo.setPhysicalFilename(savePath);\n\t\t\t\n\t\t\ta.setInfo(info);\n\t\t\tfilesToSave.put(uploadUtils, a);\n\t\t\t\n\t\t\ttotalSize += item.getSize();\n\t\t}\n\t\t\n\t\t// Check upload limits\n\t\tQuotaLimit ql = this.getQuotaLimit(userId);\n\t\tif (ql != null) {\n\t\t\tif (ql.exceedsQuota(totalSize)) {\n\t\t\t\tthrow new AttachmentSizeTooBigException(I18n.getMessage(\"Attachments.tooBig\", \n\t\t\t\t\tnew Integer[] { new Integer(ql.getSizeInBytes() / 1024), \n\t\t\t\t\t\tnew Integer((int)totalSize / 1024) }));\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @param realName String\n\t * @return String\n\t */\n\tpublic String stripPath(String realName)\n\t{\n\t\tString separator = \"/\";\n\t\tint index = realName.lastIndexOf(separator);\n\t\t\n\t\tif (index == -1) {\n\t\t\tseparator = \"\\\\\";\n\t\t\tindex = realName.lastIndexOf(separator);\n\t\t}\n\t\t\n\t\tif (index > -1) {\n\t\t\trealName = realName.substring(index + 1);\n\t\t}\n\t\t\n\t\treturn realName;\n\t}\n\t\n\tpublic void insertAttachments(Post post)\n\t{\n\t\tif (!this.canProceed) {\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tpost.hasAttachments(this.filesToSave.size() > 0);\n\t\t\n\t\tfor (Iterator iter = this.filesToSave.entrySet().iterator(); iter.hasNext(); ) {\n\t\t\tMap.Entry entry = (Map.Entry)iter.next();\n\t\t\tAttachment a = (Attachment)entry.getValue();\n\t\t\ta.setPostId(post.getId());\n\t\t\t\n\t\t\tString path = SystemGlobals.getValue(ConfigKeys.ATTACHMENTS_STORE_DIR) \n\t\t\t\t+ \"/\" \n\t\t\t\t+ a.getInfo().getPhysicalFilename();\n\t\t\t\n\t\t\tthis.am.addAttachment(a);\n\t\t\t((UploadUtils)entry.getKey()).saveUploadedFile(path);\n\t\t\t\n\t\t\tif (this.shouldCreateThumb(a)) {\n\t\t\t\tthis.createSaveThumb(path);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate boolean shouldCreateThumb(Attachment a) {\n\t\tString extension = a.getInfo().getExtension().getExtension().toLowerCase();\n\t\t\n\t\treturn SystemGlobals.getBoolValue(ConfigKeys.ATTACHMENTS_IMAGES_CREATE_THUMB)\n\t\t\t&& (\"jpg\".equals(extension) || \"jpeg\".equals(extension) \n\t\t\t\t|| \"gif\".equals(extension) || \"png\".equals(extension));\n\t}\n\t\n\tprivate void createSaveThumb(String path) {\n\t\ttry {\n\t\t\tBufferedImage image = ImageUtils.resizeImage(path, ImageUtils.IMAGE_JPEG, \n\t\t\t\tSystemGlobals.getIntValue(ConfigKeys.ATTACHMENTS_IMAGES_MAX_THUMB_W),\n\t\t\t\tSystemGlobals.getIntValue(ConfigKeys.ATTACHMENTS_IMAGES_MAX_THUMB_H));\n\t\t\tImageUtils.saveImage(image, path + \"_thumb\", ImageUtils.IMAGE_JPEG);\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tlogger.error(e.toString(), e);\n\t\t}\n\t}\n\t\n\tpublic QuotaLimit getQuotaLimit(int userId)\n\t{\n\t\tQuotaLimit ql = new QuotaLimit();\n\t\tUser u = DataAccessDriver.getInstance().newUserDAO().selectById(userId);\n\t\t\n\t\tfor (Iterator iter = u.getGroupsList().iterator(); iter.hasNext();) {\n\t\t\tQuotaLimit l = this.am.selectQuotaLimitByGroup(((Group)iter.next()).getId());\n\t\t\tif (l == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t\n\t\t\tif (l.getSizeInBytes() > ql.getSizeInBytes()) {\n\t\t\t\tql = l;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (ql.getSize() == 0) {\n\t\t\treturn null;\n\t\t}\n\t\t\n\t\treturn ql;\n\t}\n\t\n\tpublic void editAttachments(int postId, int forumId)\n\t{\n\t\t// Allow removing the attachments at least\n\t\tAttachmentDAO am = DataAccessDriver.getInstance().newAttachmentDAO();\n\t\t\n\t\t// Check for attachments to remove\n\t\tList deleteList = new ArrayList();\n\t\tString[] delete = null;\n\t\tString s = this.request.getParameter(\"delete_attach\");\n\t\t\n\t\tif (s != null) {\n\t\t\tdelete = s.split(\",\");\n\t\t}\n\t\t\n\t\tif (delete != null) {\n\t\t\tfor (int i = 0; i < delete.length; i++) {\n\t\t\t\tif (delete[i] != null && !delete[i].equals(\"\")) {\n\t\t\t\t\tint id = Integer.parseInt(delete[i]);\n\t\t\t\t\tAttachment a = am.selectAttachmentById(id);\n\t\t\t\t\t\n\t\t\t\t\tam.removeAttachment(id, postId);\n\t\t\t\t\t\n\t\t\t\t\tString filename = SystemGlobals.getValue(ConfigKeys.ATTACHMENTS_STORE_DIR)\n\t\t\t\t\t\t+ \"/\" + a.getInfo().getPhysicalFilename();\n\t\t\t\t\t\n\t\t\t\t\tFile f = new File(filename);\n\t\t\t\t\t\n\t\t\t\t\tif (f.exists()) {\n\t\t\t\t\t\tf.delete();\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Check if we have a thumb to delete\n\t\t\t\t\tf = new File(filename + \"_thumb\");\n\t\t\t\t\t\n\t\t\t\t\tif (f.exists()) {\n\t\t\t\t\t\tf.delete();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tdeleteList = Arrays.asList(delete);\n\t\t}\n\t\t\n\t\tif (!SecurityRepository.canAccess(SecurityConstants.PERM_ATTACHMENTS_ENABLED, \n\t\t\t\tInteger.toString(forumId))\n\t\t\t\t&& !SecurityRepository.canAccess(SecurityConstants.PERM_ATTACHMENTS_DOWNLOAD)) {\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t// Update\n\t\tString[] attachIds = null;\n\t\ts = this.request.getParameter(\"edit_attach_ids\");\n\t\tif (s != null) {\n\t\t\tattachIds = s.split(\",\");\n\t\t}\n\t\t\n\t\tif (attachIds != null) {\n\t\t\tfor (int i = 0; i < attachIds.length; i++) {\n\t\t\t\tif (deleteList.contains(attachIds[i]) \n\t\t\t\t\t\t|| attachIds[i] == null || attachIds[i].equals(\"\")) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tint id = Integer.parseInt(attachIds[i]);\n\t\t\t\tAttachment a = am.selectAttachmentById(id);\n\t\t\t\ta.getInfo().setComment(this.request.getParameter(\"edit_comment_\" + id));\n\n\t\t\t\tam.updateAttachment(a);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate String makeStoreFilename(AttachmentInfo a)\n\t{\n\t\tCalendar c = new GregorianCalendar();\n\t\tc.setTimeInMillis(System.currentTimeMillis());\n\t\tc.get(Calendar.YEAR);\n\t\t\n\t\tint year = Calendar.getInstance().get(Calendar.YEAR);\n\t\tint month = Calendar.getInstance().get(Calendar.MONTH) + 1;\n\t\tint day = Calendar.getInstance().get(Calendar.DAY_OF_MONTH);\n\t\t\n\t\tStringBuffer dir = new StringBuffer(256);\n\t\tdir.append(year).append('/').append(month).append('/').append(day).append('/');\n\t\t\n\t\tnew File(SystemGlobals.getValue(ConfigKeys.ATTACHMENTS_STORE_DIR) + \"/\" + dir).mkdirs();\n\t\t\n\t\treturn dir\n\t\t\t.append(MD5.crypt(a.getRealFilename() + System.currentTimeMillis()))\n\t\t\t.append('_')\n\t\t\t.append(SessionFacade.getUserSession().getUserId())\n\t\t\t.append('.')\n\t\t\t.append(a.getExtension().getExtension())\n\t\t\t.append('_')\n\t\t\t.toString();\n\t}\n\t\n\tpublic List getAttachments(int postId, int forumId)\n\t{\n\t\tif (!SecurityRepository.canAccess(SecurityConstants.PERM_ATTACHMENTS_DOWNLOAD)\n\t\t\t\t&& !SecurityRepository.canAccess(SecurityConstants.PERM_ATTACHMENTS_ENABLED, \n\t\t\t\t\t\tInteger.toString(forumId))) {\n\t\t\treturn new ArrayList();\n\t\t}\n\t\t\n\t\treturn this.am.selectAttachments(postId);\n\t}\n\t\n\tpublic boolean isPhysicalDownloadMode(int extensionGroupId) \n\t{\n\t\treturn this.am.isPhysicalDownloadMode(extensionGroupId);\n\t}\n\n\tpublic void deleteAttachments(int postId, int forumId) \n\t{\n\t\t// Attachments\n\t\tList attachments = DataAccessDriver.getInstance().newAttachmentDAO().selectAttachments(postId);\n\t\tStringBuffer attachIds = new StringBuffer();\n\t\t\n\t\tfor (Iterator iter = attachments.iterator(); iter.hasNext(); ) {\n\t\t\tAttachment a = (Attachment)iter.next();\n\t\t\tattachIds.append(a.getId()).append(',');\n\t\t}\n\t\t\n\t\tthis.request.addOrReplaceParameter(\"delete_attach\", attachIds.toString());\n\t\tthis.editAttachments(postId, forumId);\n\t}\n}",
  "metadata": {
    "fileId": "AttachmentCommon_java_chunk_2",
    "fileName": "AttachmentCommon.java",
    "filePath": "src/net/jforum/view/forum/common/AttachmentCommon.java"
  }
}