{
  "pageContent": "File Path: src/net/jforum/view/forum/common/ForumCommon.java\n\n Original Content: /*\n * Copyright (c) JForum Team\n * All rights reserved.\n * \n * Redistribution and use in source and binary forms, \n * with or without modification, are permitted provided \n * that the following conditions are met:\n * \n * 1) Redistributions of source code must retain the above \n * copyright notice, this list of conditions and the \n * following  disclaimer.\n * 2)  Redistributions in binary form must reproduce the \n * above copyright notice, this list of conditions and \n * the following disclaimer in the documentation and/or \n * other materials provided with the distribution.\n * 3) Neither the name of \"Rafael Steil\" nor \n * the names of its contributors may be used to endorse \n * or promote products derived from this software without \n * specific prior written permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT \n * HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY \n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, \n * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF \n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR \n * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL \n * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE \n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, \n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES \n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF \n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, \n * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER \n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER \n * IN CONTRACT, STRICT LIABILITY, OR TORT \n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN \n * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF \n * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE\n * \n * Created on 12/11/2004 18:04:12\n * The JForum Project\n * http://www.jforum.net\n */\npackage net.jforum.view.forum.common;\n\nimport java.util.ArrayList;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\n\nimport net.jforum.SessionFacade;\nimport net.jforum.dao.DataAccessDriver;\nimport net.jforum.dao.ForumDAO;\nimport net.jforum.entities.Category;\nimport net.jforum.entities.Forum;\nimport net.jforum.entities.LastPostInfo;\nimport net.jforum.entities.Post;\nimport net.jforum.entities.Topic;\nimport net.jforum.entities.UserSession;\nimport net.jforum.repository.ForumRepository;\nimport net.jforum.util.concurrent.Executor;\nimport net.jforum.util.mail.EmailSenderTask;\nimport net.jforum.util.mail.ForumNewTopicSpammer;\nimport net.jforum.util.preferences.ConfigKeys;\nimport net.jforum.util.preferences.SystemGlobals;\n\nimport org.apache.log4j.Logger;\n\n/**\n * @author Rafael Steil\n * @version $Id: ForumCommon.java,v 1.24 2007/08/01 22:30:05 rafaelsteil Exp $\n */\npublic class ForumCommon \n{\n\tprivate static Logger logger = Logger.getLogger(ForumCommon.class);\n\t/**\n\t * Check if some forum has unread messages.\n\t * @param forum The forum to search for unread messages \n\t * @param tracking Tracking of the topics read by the user\n\t * @param lastVisit The last visit time of the current user\n\t */\n\tpublic static void checkUnreadPosts(Forum forum, Map tracking, long lastVisit) \n\t{\n\t\tLastPostInfo lpi = forum.getLastPostInfo();\n\t\t\n\t\tif (lpi == null) {\n\t\t\treturn;\n\t\t}\n\n\t\tInteger topicId = new Integer(lpi.getTopicId());\n\t\t\n\t\tif (tracking != null && tracking.containsKey(topicId)) {\n\t\t\tlong readTime = ((Long)tracking.get(topicId)).longValue();\n\t\t\n\t\t\tforum.setUnread(readTime > 0 && lpi.getPostTimeMillis() > readTime);\n\t\t}\n\t\telse {\n\t\t\tforum.setUnread(lpi.getPostTimeMillis() > lastVisit);\n\t\t}\n\t}\n\t\n\t/**\n\t * Gets all forums available to the user.\n\t * \n\t * @param us An <code>UserSession</code> instance with user information\n\t * @param anonymousUserId The id which represents the anonymous user\n\t * @param tracking <code>Map</code> instance with information \n\t * about the topics read by the user\n\t * @param checkUnreadPosts <code>true</code> if is to search for unread topics inside the forums, \n\t * or <code>false</code> if this action is not needed. \n\t * @return A <code>List</code> instance where each record is an instance of a <code>Category</code>\n\t * object\n\t */\n\tpublic static List getAllCategoriesAndForums(UserSession us, int anonymousUserId, \n\t\t\tMap tracking, boolean checkUnreadPosts)\n\t{\n\t\tlong lastVisit = 0;\n\t\tint userId = anonymousUserId;\n\t\t\n\t\tif (us != null) {\n\t\t\tlastVisit = us.getLastVisit().getTime();\n\t\t\tuserId = us.getUserId();\n\t\t}\n\n        // Do not check for unread posts if the user is not logged in\n\t\tcheckUnreadPosts = checkUnreadPosts && (userId != anonymousUserId);\n\n\t\tList categories = ForumRepository.getAllCategories(userId);\n\t\t\n\t\tif (!checkUnreadPosts) {\n\t\t\treturn categories;\n\t\t}\n\n\t\tList returnCategories = new ArrayList();\n\t\tfor (Iterator iter = categories.iterator(); iter.hasNext(); ) {\n\t\t\tCategory c = new Category((Category)iter.next());\n\t\t\t\n\t\t\tfor (Iterator tmpIterator = c.getForums().iterator(); tmpIterator.hasNext(); ) {\n\t\t\t\tForum f = (Forum)tmpIterator.next();\n\t\t\t\tForumCommon.checkUnreadPosts(f, tracking, lastVisit);\n\t\t\t}\n\t\t\t\n\t\t\treturnCategories.add(c);\n\t\t}\n\t\t\n\t\treturn returnCategories;\n\t}\n\t\n\t/**\n\t * @see #getAllCategoriesAndForums(UserSession, int, Map, boolean)\n     * @return List\n     * @param checkUnreadPosts boolean\n\t */\n\tpublic static List getAllCategoriesAndForums(boolean checkUnreadPosts)\n\t{\n\t\treturn getAllCategoriesAndForums(SessionFacade.getUserSession(), \n\t\t\t\tSystemGlobals.getIntValue(ConfigKeys.ANONYMOUS_USER_ID), \n\t\t\t\tSessionFacade.getTopicsReadTime(), \n\t\t\t\tcheckUnreadPosts);\n\t}\n\t\n\t/**\n\t * @see #getAllCategoriesAndForums(boolean)\n     * @return List\n\t */\n\tpublic static List getAllCategoriesAndForums()\n\t{\n\t\tUserSession us = SessionFacade.getUserSession();\n\t\tboolean checkUnread = (us != null && us.getUserId() \n\t\t\t!= SystemGlobals.getIntValue(ConfigKeys.ANONYMOUS_USER_ID));\n\t\treturn getAllCategoriesAndForums(checkUnread);\n\t}\n\t\n\t/**\n\t * Sends a \"new topic\" notification message to all users watching the forum.\n\t * \n\t * @param f The Forum changed\n\t * @param t The new topic\n\t * @param post the newly created message\n\t */\n\tpublic static void notifyUsers(Forum f, Topic t, Post post)\n\t{\n\t\tif (SystemGlobals.getBoolValue(ConfigKeys.MAIL_NOTIFY_ANSWERS)) {\n\t\t\ttry {\n\t\t\t\tForumDAO dao = DataAccessDriver.getInstance().newForumDAO();\n\t\t\t\tList usersToNotify = dao.notifyUsers(f);\n\n\t\t\t\t// we only have to send an email if there are users\n\t\t\t\t// subscribed to the topic\n\t\t\t\tif (usersToNotify != null && usersToNotify.size() > 0) {\n\t\t\t\t\tExecutor.execute(\n\t\t\t\t\t\tnew EmailSenderTask(\n\t\t\t\t\t\t\tnew ForumNewTopicSpammer(f, t, post, usersToNotify)));\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\tlogger.warn(\"Error while sending notification emails: \" + e);\n\t\t\t}\n\t\t}\n\t}\n}",
  "metadata": {
    "fileId": "ForumCommon_java_chunk_1",
    "fileName": "ForumCommon.java",
    "filePath": "src/net/jforum/view/forum/common/ForumCommon.java"
  }
}