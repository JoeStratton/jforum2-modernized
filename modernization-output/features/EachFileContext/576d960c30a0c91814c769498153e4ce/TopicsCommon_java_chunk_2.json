{
  "pageContent": "File Path: src/net/jforum/view/forum/common/TopicsCommon.java\n\n Original Content: public class TopicsCommon \n{\n\tprivate static final Object MUTEXT = new Object();\n\t\n\t/**\n\t * List all first 'n' topics of a given forum.\n\t * This method returns no more than <code>ConfigKeys.TOPICS_PER_PAGE</code>\n\t * topics for the forum. \n\t * \n\t * @param forumId The forum id to which the topics belongs to\n\t * @param start The start fetching index\n\t * @return <code>java.util.List</code> containing the topics found.\n\t */\n\tpublic static List topicsByForum(int forumId, int start)\n\t{\n\t\tTopicDAO tm = DataAccessDriver.getInstance().newTopicDAO();\n\t\tint topicsPerPage = SystemGlobals.getIntValue(ConfigKeys.TOPICS_PER_PAGE);\n\t\tList topics;\n\t\t\n\t\t// Try to get the first's page of topics from the cache\n\t\tif (start == 0 && SystemGlobals.getBoolValue(ConfigKeys.TOPIC_CACHE_ENABLED)) {\n\t\t\ttopics = TopicRepository.getTopics(forumId);\n\n\t\t\tif (topics.size() == 0 || !TopicRepository.isLoaded(forumId)) {\n\t\t\t\tsynchronized (MUTEXT) {\n\t\t\t\t\tif (topics.size() == 0 || !TopicRepository.isLoaded(forumId)) {\n\t\t\t\t\t\ttopics = tm.selectAllByForumByLimit(forumId, start, topicsPerPage);\n\t\t\t\t\t\tTopicRepository.addAll(forumId, topics);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\ttopics = tm.selectAllByForumByLimit(forumId, start, topicsPerPage);\n\t\t}\n\t\t\n\t\treturn topics;\n\t}\n\t\n\t/**\n\t * Prepare the topics for listing.\n\t * This method does some preparation for a set ot <code>net.jforum.entities.Topic</code>\n\t * instances for the current user, like verification if the user already\n\t * read the topic, if pagination is a need and so on.\n\t * \n\t * @param topics The topics to process\n\t * @return The post-processed topics.\n\t */\n\tpublic static List prepareTopics(List topics)\n\t{\n\t\tUserSession userSession = SessionFacade.getUserSession();\n\n\t\tlong lastVisit = userSession.getLastVisit().getTime();\n\t\tint hotBegin = SystemGlobals.getIntValue(ConfigKeys.HOT_TOPIC_BEGIN);\n\t\tint postsPerPage = SystemGlobals.getIntValue(ConfigKeys.POSTS_PER_PAGE);\n\t\t\n\t\tList newTopics = new ArrayList(topics.size());\n\t\tMap topicsReadTime = SessionFacade.getTopicsReadTime();\n\t\tMap topicReadTimeByForum = SessionFacade.getTopicsReadTimeByForum();\n\t\t\n\t\tboolean checkUnread = (userSession.getUserId() \n\t\t\t!= SystemGlobals.getIntValue(ConfigKeys.ANONYMOUS_USER_ID));\n\t\t\n\t\tfor (Iterator iter = topics.iterator(); iter.hasNext(); ) {\n\t\t\tTopic t = (Topic)iter.next();\n\t\t\t\n\t\t\tboolean read = false;\n\t\t\tboolean isReadByForum = false;\n\t\t\tlong lastPostTime = t.getLastPostDate().getTime();\n\t\t\t\n\t\t\tif (topicReadTimeByForum != null) {\n\t\t\t\tLong currentForumTime = (Long)topicReadTimeByForum.get(new Integer(t.getForumId()));\n\t\t\t\tisReadByForum = currentForumTime != null && lastPostTime < currentForumTime.longValue();\n\t\t\t}\n\t\t\t\n\t\t\tboolean isTopicTimeOlder = !isReadByForum && lastPostTime <= lastVisit;\n\t\t\t\n\t\t\tif (!checkUnread || isReadByForum || isTopicTimeOlder) {\n\t\t\t\tread = true;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tInteger topicId = new Integer(t.getId());\n\t\t\t\tLong currentTopicTime = (Long)topicsReadTime.get(topicId);\n\t\t\t\t\n\t\t\t\tif (currentTopicTime != null) {\n\t\t\t\t\tread = currentTopicTime.longValue() > lastPostTime;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (t.getTotalReplies() + 1 > postsPerPage) {\n\t\t\t\tt.setPaginate(true);\n\t\t\t\tt.setTotalPages(new Double(Math.floor(t.getTotalReplies() / postsPerPage)));\n\t\t\t}\n\t\t\telse {\n\t\t\t\tt.setPaginate(false);\n\t\t\t\tt.setTotalPages(new Double(0));\n\t\t\t}\n\t\t\t\n\t\t\t// Check if this is a hot topic\n\t\t\tt.setHot(t.getTotalReplies() >= hotBegin);\n\t\t\t\n\t\t\tt.setRead(read);\n\t\t\tnewTopics.add(t);\n\t\t}\n\t\t\n\t\treturn newTopics;\n\t}\n\n\t/**\n\t * Common properties to be used when showing topic data\n\t */\n\tpublic static void topicListingBase()\n\t{\n\t\tSimpleHash context = JForumExecutionContext.getTemplateContext();\n\t\t\n\t\t// Topic Types\n\t\tcontext.put(\"TOPIC_ANNOUNCE\", new Integer(Topic.TYPE_ANNOUNCE));\n\t\tcontext.put(\"TOPIC_STICKY\", new Integer(Topic.TYPE_STICKY));\n\t\tcontext.put(\"TOPIC_NORMAL\", new Integer(Topic.TYPE_NORMAL));\n\t\n\t\t// Topic Status\n\t\tcontext.put(\"STATUS_LOCKED\", new Integer(Topic.STATUS_LOCKED));\n\t\tcontext.put(\"STATUS_UNLOCKED\", new Integer(Topic.STATUS_UNLOCKED));\n\t\t\n\t\t// Moderation\n\t\tPermissionControl pc = SecurityRepository.get(SessionFacade.getUserSession().getUserId());\n\t\t\n\t\tcontext.put(\"moderator\", pc.canAccess(SecurityConstants.PERM_MODERATION));\n\t\tcontext.put(\"can_remove_posts\", pc.canAccess(SecurityConstants.PERM_MODERATION_POST_REMOVE));\n\t\tcontext.put(\"can_move_topics\", pc.canAccess(SecurityConstants.PERM_MODERATION_TOPIC_MOVE));\n\t\tcontext.put(\"can_lockUnlock_topics\", pc.canAccess(SecurityConstants.PERM_MODERATION_TOPIC_LOCK_UNLOCK));\n\t\tcontext.put(\"rssEnabled\", SystemGlobals.getBoolValue(ConfigKeys.RSS_ENABLED));\n\t}\n\t\n\t/**\n\t * Checks if the user is allowed to view the topic.\n\t * If there currently logged user does not have access\n\t * to the forum, the template context will be set to show\n\t * an error message to the user, by calling\n\t * <blockquote>new ModerationHelper().denied(I18n.getMessage(\"PostShow.denied\"))</blockquote>\n\t * @param forumId The forum id to which the topics belongs to\n\t * @return <code>true</code> if the topic is accessible, <code>false</code> otherwise\n\t */\n\tpublic static boolean isTopicAccessible(int forumId)\n\t{\n\t\tForum f = ForumRepository.getForum(forumId);\n\t\t\n\t\tif (f == null || !ForumRepository.isCategoryAccessible(f.getCategoryId())) {\n\t\t\tnew ModerationHelper().denied(I18n.getMessage(\"PostShow.denied\"));\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\t\n\t/**\n\t * Sends a \"new post\" notification message to all users watching the topic.\n\t * \n\t * @param t The changed topic\n\t * @param p The new message\n\t */\n\tpublic static void notifyUsers(Topic t, Post p)\n\t{\n\t\tif (SystemGlobals.getBoolValue(ConfigKeys.MAIL_NOTIFY_ANSWERS)) {\n\t\t\tTopicDAO dao = DataAccessDriver.getInstance().newTopicDAO();\n\t\t\tList usersToNotify = dao.notifyUsers(t);\n\n\t\t\t// We only have to send an email if there are users\n\t\t\t// subscribed to the topic\n\t\t\tif (usersToNotify != null && usersToNotify.size() > 0) {\n\t\t\t\tExecutor.execute(new EmailSenderTask(new TopicReplySpammer(t, p, usersToNotify)));\n\t\t\t}\n\t\t}\n\t}\n\t\n\t/**\n\t * Updates the board status after a new post is inserted.\n\t * This method is used in conjunct with moderation manipulation. \n\t * It will increase by 1 the number of replies of the tpoic, set the\n\t * last post id for the topic and the forum and refresh the cache. \n\t * \n\t * @param topic Topic The topic to update\n\t * @param lastPostId int The id of the last post\n\t * @param topicDao TopicDAO A TopicModel instance\n\t * @param forumDao ForumDAO A ForumModel instance\n     * @param firstPost boolean\n\t */\n\tpublic static synchronized void updateBoardStatus(Topic topic, int lastPostId, boolean firstPost, \n\t\tTopicDAO topicDao, ForumDAO forumDao)\n\t{\n\t\ttopic.setLastPostId(lastPostId);\n\t\ttopicDao.update(topic);\n\t\t\n\t\tforumDao.setLastPost(topic.getForumId(), lastPostId);\n\t\t\n\t\tif (firstPost) {\n\t\t\tforumDao.incrementTotalTopics(topic.getForumId(), 1);\n\t\t}\n\t\telse {\n\t\t\ttopicDao.incrementTotalReplies(topic.getId());\n\t\t}\n\t\t\n\t\ttopicDao.incrementTotalViews(topic.getId());\n\t\t\n\t\tTopicRepository.addTopic(topic);\n\t\tTopicRepository.pushTopic(topic);\n\t\t\n\t\tForumRepository.incrementTotalMessages();\n\t}\n\t\n\t/**\n\t * Deletes a topic.\n\t * This method will remove the topic from the database,\n\t * clear the entry frm the cache and update the last \n\t * post info for the associated forum.\n\t * @param topicId The topic id to remove\n\t * @param fromModeration boolean \n     * @param forumId int\n\t */\n\tpublic static synchronized void deleteTopic(int topicId, int forumId, boolean fromModeration)\n\t{\n\t\tTopicDAO topicDao = DataAccessDriver.getInstance().newTopicDAO();\n\t\t\n\t\tTopic topic = new Topic();\n\t\ttopic.setId(topicId);\n\t\ttopic.setForumId(forumId);\n\n\t\ttopicDao.delete(topic, fromModeration);\n\n\t\tif (!fromModeration) {\n\t\t\t// Updates the Recent Topics if it contains this topic\n\t\t\tTopicRepository.loadMostRecentTopics();\n\t\t\t\n            // Updates the Hottest Topics if it contains this topic\n\t\t\tTopicRepository.loadHottestTopics();\n\t\t\tTopicRepository.clearCache(forumId);\n\t\t\ttopicDao.removeSubscriptionByTopic(topicId);\n\t\t}\n\t}\n}",
  "metadata": {
    "fileId": "TopicsCommon_java_chunk_2",
    "fileName": "TopicsCommon.java",
    "filePath": "src/net/jforum/view/forum/common/TopicsCommon.java"
  }
}