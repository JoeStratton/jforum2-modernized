{
  "pageContent": "File Path: src/net/jforum/util/legacy/commons/fileupload/servlet/ServletFileUpload.java\n\n Original Content: /*\n * Copyright 2001-2004 The Apache Software Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage net.jforum.util.legacy.commons.fileupload.servlet;\n\nimport java.util.List;\n\nimport javax.servlet.http.HttpServletRequest;\n\nimport net.jforum.util.legacy.commons.fileupload.FileItemFactory;\nimport net.jforum.util.legacy.commons.fileupload.FileUpload;\nimport net.jforum.util.legacy.commons.fileupload.FileUploadException;\n\n/**\n * <p>High level API for processing file uploads.</p>\n *\n * <p>This class handles multiple files per single HTML widget, sent using\n * <code>multipart/mixed</code> encoding type, as specified by\n * <a href=\"http://www.ietf.org/rfc/rfc1867.txt\">RFC 1867</a>.  Use {@link\n * #parseRequest(HttpServletRequest)} to acquire a list of {@link\n * org.apache.commons.fileupload.FileItem}s associated with a given HTML\n * widget.</p>\n *\n * <p>How the data for individual parts is stored is determined by the factory\n * used to create them; a given part may be in memory, on disk, or somewhere\n * else.</p>\n *\n * @author <a href=\"mailto:Rafal.Krzewski@e-point.pl\">Rafal Krzewski</a>\n * @author <a href=\"mailto:dlr@collab.net\">Daniel Rall</a>\n * @author <a href=\"mailto:jvanzyl@apache.org\">Jason van Zyl</a>\n * @author <a href=\"mailto:jmcnally@collab.net\">John McNally</a>\n * @author <a href=\"mailto:martinc@apache.org\">Martin Cooper</a>\n * @author Sean C. Sullivan\n *\n * @version $Id: ServletFileUpload.java,v 1.3 2005/07/26 03:06:05 rafaelsteil Exp $\n */\npublic class ServletFileUpload extends FileUpload {\n\n    // ---------------------------------------------------------- Class methods\n\n\n    /**\n     * Utility method that determines whether the request contains multipart\n     * content.\n     *\n     * @param req The servlet request to be evaluated. Must be non-null.\n     *\n     * @return <code>true</code> if the request is multipart;\n     *         <code>false</code> otherwise.\n     */\n    //NOTE: This method cannot be enabled until the one in FileUploadBase is\n    //      removed, since it is not possible to override a static method.\n    //public static final boolean isMultipartContent(\n    //        HttpServletRequest request) {\n    //    if (!\"post\".equals(request.getMethod().toLowerCase())) {\n    //        return false;\n    //    }\n    //    return FileUploadBase.isMultipartContent(\n    //            new ServletRequestContext(request));\n    //}\n\n\n    // ----------------------------------------------------------- Constructors\n\n\n    /**\n     * Constructs an uninitialised instance of this class. A factory must be\n     * configured, using <code>setFileItemFactory()</code>, before attempting\n     * to parse requests.\n     *\n     * @see #FileUpload(FileItemFactory)\n     */\n    public ServletFileUpload() {\n        super();\n    }\n\n\n    /**\n     * Constructs an instance of this class which uses the supplied factory to\n     * create <code>FileItem</code> instances.\n     *\n     * @see #FileUpload()\n     */\n    public ServletFileUpload(FileItemFactory fileItemFactory) {\n        super(fileItemFactory);\n    }\n\n\n    // --------------------------------------------------------- Public methods\n\n\n    /**\n     * Processes an <a href=\"http://www.ietf.org/rfc/rfc1867.txt\">RFC 1867</a>\n     * compliant <code>multipart/form-data</code> stream.\n     *\n     * @param request The servlet request to be parsed.\n     *\n     * @return A list of <code>FileItem</code> instances parsed from the\n     *         request, in the order that they were transmitted.\n     *\n     * @exception FileUploadException if there are problems reading/parsing\n     *                                the request or storing files.\n     */\n    public List /* FileItem */ parseRequest(HttpServletRequest request)\n            throws FileUploadException {\n        return parseRequest(new ServletRequestContext(request));\n    }\n}",
  "metadata": {
    "fileId": "ServletFileUpload_java_chunk_1",
    "fileName": "ServletFileUpload.java",
    "filePath": "src/net/jforum/util/legacy/commons/fileupload/servlet/ServletFileUpload.java"
  }
}