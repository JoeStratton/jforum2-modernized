{
  "pageContent": "File Path: tests/core/net/jforum/search/LuceneSearchTestCase.java\n\n Original Content: /*\n * Copyright (c) JForum Team\n * All rights reserved.\n * \n * Redistribution and use in source and binary forms, \n * with or without modification, are permitted provided \n * that the following conditions are met:\n * \n * 1) Redistributions of source code must retain the above \n * copyright notice, this list of conditions and the \n * following  disclaimer.\n * 2)  Redistributions in binary form must reproduce the \n * above copyright notice, this list of conditions and \n * the following disclaimer in the documentation and/or \n * other materials provided with the distribution.\n * 3) Neither the name of \"Rafael Steil\" nor \n * the names of its contributors may be used to endorse \n * or promote products derived from this software without \n * specific prior written permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT \n * HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY \n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, \n * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF \n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR \n * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL \n * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE \n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, \n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES \n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF \n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, \n * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER \n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER \n * IN CONTRACT, STRICT LIABILITY, OR TORT \n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN \n * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF \n * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE\n * \n * Created on 18/07/2007 14:03:15\n * \n * The JForum Project\n * http://www.jforum.net\n */\npackage net.jforum.search;\n\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.List;\n\nimport junit.framework.Assert;\nimport junit.framework.TestCase;\nimport net.jforum.entities.Post;\n\nimport org.apache.log4j.xml.DOMConfigurator;\nimport org.apache.lucene.analysis.standard.StandardAnalyzer;\nimport org.apache.lucene.search.Hits;\nimport org.apache.lucene.search.Query;\n\n/**\n * @author Rafael Steil\n * @version $Id: LuceneSearchTestCase.java,v 1.31 2007/09/09 22:53:36 rafaelsteil Exp $\n */\npublic class LuceneSearchTestCase extends TestCase\n{\n\tprivate static boolean logInitialized;\n\t\n\tprivate LuceneSearch search;\n\tprivate LuceneSettings settings;\n\tprivate LuceneIndexer indexer;\n\n\tpublic void testFivePostsInTwoForumsSearchOneForumAndTwoValidTermsAndOneInvalidTermExpectThreeResults()\n\t{\n\t\tList l = this.createThreePosts();\n\t\t((Post)l.get(0)).setForumId(1);\n\t\t((Post)l.get(1)).setForumId(2);\n\t\t((Post)l.get(2)).setForumId(1);\n\t\t\n\t\tthis.indexer.create((Post)l.get(0));\n\t\tthis.indexer.create((Post)l.get(1));\n\t\tthis.indexer.create((Post)l.get(2));\n\t\t\n\t\t// Post 4\n\t\tPost p = this.newPost();\n\t\tp.setText(\"It introduces you to searching, sorting, filtering and highlighting [...]\");\n\t\tp.setForumId(1);\n\t\tthis.indexer.create(p);\n\t\t\n\t\t// Post 5\n\t\tp = this.newPost();\n\t\tp.setText(\"How to integrate lucene into your applications\");\n\t\tp.setForumId(2);\n\t\tl.add(p);\n\t\t\n\t\tthis.indexer.create(p);\n\t\t\n\t\t// Search\n\t\tSearchArgs args = new SearchArgs();\n\t\targs.setForumId(1);\n\t\targs.setKeywords(\"open lucene xpto authoritative\");\n\t\t\n\t\tList results = this.search.search(args).records();\n\t\t\n\t\tAssert.assertEquals(3, results.size());\n\t}\n\t\n\tpublic void testORExpressionUsingThreePostsSearchTwoTermsExpectThreeResults()\n\t{\n\t\tList l = this.createThreePosts();\n\t\t\n\t\tthis.indexer.create((Post)l.get(0));\n\t\tthis.indexer.create((Post)l.get(1));\n\t\tthis.indexer.create((Post)l.get(2));\n\t\t\n\t\t// Search\n\t\tSearchArgs args = new SearchArgs();\n\t\targs.setKeywords(\"open lucene\");\n\t\t\n\t\tList results = this.search.search(args).records();\n\t\t\n\t\tAssert.assertEquals(3, results.size());\n\t}\n\n\tprivate List createThreePosts()\n\t{\n\t\tList l = new ArrayList();\n\t\t\n\t\t// 1\n\t\tPost p = this.newPost();\n\t\tp.setText(\"lucene is a gem in the open source world\");\n\t\tl.add(p);\n\t\t\n\t\t// 2\n\t\tp = this.newPost();\n\t\tp.setText(\"lucene in action is the authoritative guide to lucene\");\n\t\tl.add(p);\n\t\t\n\t\t// 3\n\t\tp = this.newPost();\n\t\tp.setText(\"Powers search in surprising places [...] open to everyone\");\n\t\tl.add(p);\n\t\t\n\t\treturn l;\n\t}\n\t\n\tpublic void testANDExpressionUsingTwoPostsWithOneCommonWordSearchTwoTermsExpectOneResult()\n\t{\n\t\t// 1\n\t\tPost p = this.newPost();\n\t\tp.setText(\"a regular text with some magic word\");\n\t\tthis.indexer.create(p);\n\t\t\n\t\t// 2\n\t\tp = this.newPost();\n\t\tp.setText(\"say shazan to see the magic happen\");\n\t\tthis.indexer.create(p);\n\t\t\n\t\t// Search\n\t\tSearchArgs args = new SearchArgs();\n\t\targs.matchAllKeywords();\n\t\targs.setKeywords(\"magic regular\");\n\t\t\n\t\tList results = this.search.search(args).records();\n\t\t\n\t\tAssert.assertEquals(1, results.size());\n\t}\n\t\n\tpublic void testThreePostsSearchContentsExpectOneResult()\n\t{\n\t\t// 1\n\t\tPost p = this.newPost();\n\t\tp.setSubject(\"java\");\n\t\tthis.indexer.create(p);\n\t\t\n\t\t// 2\n\t\tp = this.newPost();\n\t\tp.setSubject(\"something else\");\n\t\tthis.indexer.create(p);\n\t\t\n\t\t// 3\n\t\tp = this.newPost();\n\t\tp.setSubject(\"debug\");\n\t\tthis.indexer.create(p);\n\t\t\n\t\t// Search\n\t\tSearchArgs args = new SearchArgs();\n\t\targs.setKeywords(\"java\");\n\t\t\n\t\tList results = this.search.search(args).records();\n\t\t\n\t\tAssert.assertEquals(1, results.size());\n\t}\n\t\n\tpublic void testTwoDifferentForumsSearchOneExpectOneResult()\n\t{\n\t\tPost p1 = this.newPost();\n\t\tp1.setForumId(1);\n\t\tthis.indexer.create(p1);\n\t\t\n\t\tPost p2 = this.newPost();\n\t\tp2.setForumId(2);\n\t\tthis.indexer.create(p2);\n\t\t\n\t\tSearchArgs args = new SearchArgs();\n\t\targs.setForumId(1);\n\t\t\n\t\tList results = this.search.search(args).records();\n\t\t\n\t\tAssert.assertEquals(1, results.size());\n\t}\n\t\n\tprivate Post newPost() \n\t{\n\t\tPost p = new Post();\n\t\t\n\t\tp.setText(\"\");\n\t\tp.setTime(new Date());\n\t\tp.setSubject(\"\");\n\t\tp.setPostUsername(\"\");\n\t\t\n\t\treturn p;\n\t}\n\t\n\tprotected void setUp() throws Exception\n\t{\n\t\tif (!logInitialized) {\n\t\t\tDOMConfigurator.configure(this.getClass().getResource(\"/log4j.xml\"));\n\t\t\tlogInitialized = true;\n\t\t}\n\t\t\n\t\tthis.settings = new LuceneSettings(new StandardAnalyzer());\n\t\t\n\t\tthis.settings.useRAMDirectory();\n\t\t\n\t\tthis.indexer = new LuceneIndexer(this.settings);\n\t\t\n\t\tthis.search = new LuceneSearch(this.settings, \n\t\t\tnew FakeResultCollector());\n\t\t\n\t\tthis.indexer.watchNewDocuDocumentAdded(this.search);\n\t}\n\t\n\tprivate static class FakeResultCollector implements LuceneResultCollector\n\t{\n\t\tpublic List collect(SearchArgs args, Hits hits, Query query)\n\t\t{\n\t\t\tList l = new ArrayList();\n\t\t\t\n\t\t\tfor (int i = 0; i < hits.length(); i++) {\n\t\t\t\t// We really don't care about the results, only how many they are\n\t\t\t\tl.add(\"\"); \n\t\t\t}\n\t\t\t\n\t\t\treturn l;\n\t\t}\n\t}\n}",
  "metadata": {
    "fileId": "LuceneSearchTestCase_java_chunk_1",
    "fileName": "LuceneSearchTestCase.java",
    "filePath": "tests/core/net/jforum/search/LuceneSearchTestCase.java"
  }
}