{
  "pageContent": "File Path: tests/core/net/jforum/http/FakeHttpRequest.java\n\n Original Content: /*\n * Copyright (c) 2003, Rafael Steil\n * All rights reserved.\n * \n * Redistribution and use in source and binary forms, \n * with or without modification, are permitted provided \n * that the following conditions are met:\n * \n * 1) Redistributions of source code must retain the above \n * copyright notice, this list of conditions and the \n * following  disclaimer.\n * 2)  Redistributions in binary form must reproduce the \n * above copyright notice, this list of conditions and \n * the following disclaimer in the documentation and/or \n * other materials provided with the distribution.\n * 3) Neither the name of \"Rafael Steil\" nor \n * the names of its contributors may be used to endorse \n * or promote products derived from this software without \n * specific prior written permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT \n * HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY \n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, \n * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF \n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR \n * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL \n * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE \n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, \n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES \n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF \n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, \n * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER \n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER \n * IN CONTRACT, STRICT LIABILITY, OR TORT \n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN \n * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF \n * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE\n * \n * Created on 04/12/2004 15:57:26\n * The JForum Project\n * http://www.jforum.net\n */\npackage net.jforum.http;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.UnsupportedEncodingException;\nimport java.security.Principal;\nimport java.util.Enumeration;\nimport java.util.HashMap;\nimport java.util.Hashtable;\nimport java.util.Locale;\nimport java.util.Map;\n\nimport javax.servlet.RequestDispatcher;\nimport javax.servlet.ServletInputStream;\nimport javax.servlet.http.Cookie;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpSession;\n\n/**\n * @author Rafael Steil\n * @version $Id: FakeHttpRequest.java,v 1.5 2007/08/01 22:30:04 rafaelsteil Exp $\n */\npublic class FakeHttpRequest implements HttpServletRequest \n{\n\tprivate HttpSession session = new FakeHttpSession();\n\tprivate Hashtable params = new Hashtable();\n\tprivate Map attributes = new HashMap();\n\t\n\tpublic String getAuthType() {\n\t\t\n\t\treturn null;\n\t}\n\tpublic String getContextPath() {\n\t\treturn \"\";\n\t}\n\tpublic Cookie[] getCookies() {\n\t\t\n\t\treturn null;\n\t}\n\tpublic long getDateHeader(String arg0) {\n\t\t\n\t\treturn 0;\n\t}\n\tpublic String getHeader(String arg0) {\n\t\t\n\t\treturn null;\n\t}\n\tpublic Enumeration getHeaderNames() {\n\t\t\n\t\treturn null;\n\t}\n\tpublic Enumeration getHeaders(String arg0) {\n\t\t\n\t\treturn null;\n\t}\n\tpublic int getIntHeader(String arg0) {\n\t\t\n\t\treturn 0;\n\t}\n\tpublic String getMethod() {\n\t\treturn \"dummy-method\";\n\t}\n\tpublic String getPathInfo() {\n\t\t\n\t\treturn null;\n\t}\n\tpublic String getPathTranslated() {\n\t\t\n\t\treturn null;\n\t}\n\tpublic String getQueryString() {\n\t\t\n\t\treturn null;\n\t}\n\tpublic String getRemoteUser() {\n\t\t\n\t\treturn null;\n\t}\n\tpublic String getRequestedSessionId() {\n\t\t\n\t\treturn null;\n\t}\n\tpublic String getRequestURI() {\n\t\treturn \"\";\n\t}\n\tpublic StringBuffer getRequestURL() {\n\t\t\n\t\treturn null;\n\t}\n\tpublic String getServletPath() {\n\t\t\n\t\treturn null;\n\t}\n\tpublic HttpSession getSession() {\n\t\treturn this.session;\n\t}\n\tpublic HttpSession getSession(boolean arg0) {\n\t\treturn this.getSession();\n\t}\n\tpublic Principal getUserPrincipal() {\n\t\t\n\t\treturn null;\n\t}\n\tpublic boolean isRequestedSessionIdFromCookie() {\n\t\t\n\t\treturn false;\n\t}\n\tpublic boolean isRequestedSessionIdFromUrl() {\n\t\t\n\t\treturn false;\n\t}\n\tpublic boolean isRequestedSessionIdFromURL() {\n\t\t\n\t\treturn false;\n\t}\n\tpublic boolean isRequestedSessionIdValid() {\n\t\t\n\t\treturn false;\n\t}\n\tpublic boolean isUserInRole(String arg0) {\n\t\t\n\t\treturn false;\n\t}\n\tpublic Object getAttribute(String arg0) {\n\t\treturn this.attributes.get(arg0);\n\t}\n\tpublic Enumeration getAttributeNames() {\n\t\t\n\t\treturn null;\n\t}\n\tpublic String getCharacterEncoding() {\n\t\t\n\t\treturn null;\n\t}\n\tpublic int getContentLength() {\n\t\t\n\t\treturn 0;\n\t}\n\tpublic String getContentType() {\n\t\t\n\t\treturn null;\n\t}\n\tpublic ServletInputStream getInputStream() throws IOException {\n\t\t\n\t\treturn null;\n\t}\n\tpublic String getLocalAddr() {\n\t\t\n\t\treturn null;\n\t}\n\tpublic Locale getLocale() {\n\t\t\n\t\treturn null;\n\t}\n\tpublic Enumeration getLocales() {\n\t\t\n\t\treturn null;\n\t}\n\tpublic String getLocalName() {\n\t\t\n\t\treturn null;\n\t}\n\tpublic int getLocalPort() {\n\t\t\n\t\treturn 0;\n\t}\n\tpublic String getParameter(String arg0) {\n\t\t\n\t\treturn null;\n\t}\n\tpublic Map getParameterMap() {\n\t\t\n\t\treturn null;\n\t}\n\tpublic Enumeration getParameterNames() {\n\t\treturn this.params.elements();\n\t}\n\tpublic String[] getParameterValues(String arg0) {\n\t\t\n\t\treturn null;\n\t}\n\tpublic String getProtocol() {\n\t\t\n\t\treturn null;\n\t}\n\tpublic BufferedReader getReader() throws IOException {\n\t\t\n\t\treturn null;\n\t}\n\tpublic String getRealPath(String arg0) {\n\t\t\n\t\treturn null;\n\t}\n\tpublic String getRemoteAddr() {\n\t\t\n\t\treturn null;\n\t}\n\tpublic String getRemoteHost() {\n\t\t\n\t\treturn null;\n\t}\n\tpublic int getRemotePort() {\n\t\t\n\t\treturn 0;\n\t}\n\tpublic RequestDispatcher getRequestDispatcher(String arg0) {\n\t\t\n\t\treturn null;\n\t}\n\tpublic String getScheme() {\n\t\t\n\t\treturn null;\n\t}\n\tpublic String getServerName() {\n\t\t\n\t\treturn null;\n\t}\n\tpublic int getServerPort() {\n\t\t\n\t\treturn 0;\n\t}\n\tpublic boolean isSecure() {\n\t\t\n\t\treturn false;\n\t}\n\tpublic void removeAttribute(String arg0) {\n\t\tthis.attributes.remove(arg0);\n\t}\n\tpublic void setAttribute(String arg0, Object arg1) {\n\t\tthis.attributes.put(arg0, arg1);\n\t}\n\tpublic void setCharacterEncoding(String arg0) throws UnsupportedEncodingException {\n\t\t\n\n\t}\n}",
  "metadata": {
    "fileId": "FakeHttpRequest_java_chunk_1",
    "fileName": "FakeHttpRequest.java",
    "filePath": "tests/core/net/jforum/http/FakeHttpRequest.java"
  }
}