{
  "pageContent": "File Path: src/net/jforum/context/web/WebRequestContext.java\n\n Original Content: public class WebRequestContext extends HttpServletRequestWrapper implements RequestContext\n{\n\tprivate Map query;\n\t\n\t/**\n\t * Default constructor.\n\t * \n\t * @param superRequest Original <code>HttpServletRequest</code> instance\n\t * @throws IOException\n\t */\n\tpublic WebRequestContext(HttpServletRequest superRequest) throws IOException\n\t{\n\t\tsuper(superRequest);\n\n\t\tthis.query = new HashMap();\n\t\tboolean isMultipart = false;\n\t\t\n\t\tString requestType = superRequest.getMethod().toUpperCase();\n\t\tString contextPath = superRequest.getContextPath();\n\t\tString requestUri = this.extractRequestUri(superRequest.getRequestURI(), contextPath);\n\t\tString encoding = SystemGlobals.getValue(ConfigKeys.ENCODING);\n\t\tString servletExtension = SystemGlobals.getValue(ConfigKeys.SERVLET_EXTENSION);\n\t\t\n\t\tboolean isPost = \"POST\".equals(requestType);\n\t\tboolean isGet = !isPost;\n\t\t\n\t\tboolean isQueryStringEmpty = (superRequest.getQueryString() == null \n\t\t\t|| superRequest.getQueryString().length() == 0);\n\t\t\n\t\tif (isGet && isQueryStringEmpty && requestUri.endsWith(servletExtension)) {\n\t\t\tsuperRequest.setCharacterEncoding(encoding); \n\t\t\tthis.parseFriendlyURL(requestUri, servletExtension);\n\t\t}\n\t\telse if (isPost) {\n\t\t\tisMultipart = ServletFileUpload.isMultipartContent(new ServletRequestContext(superRequest));\n\t\t\t\n\t\t\tif (isMultipart) {\n\t\t\t    this.handleMultipart(superRequest, encoding);\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (!isMultipart) {\n\t\t\tboolean isAjax = \"XMLHttpRequest\".equals(superRequest.getHeader(\"X-Requested-With\"));\n\t\t\t\n\t\t\tif (!isAjax) {\n\t\t\t\tsuperRequest.setCharacterEncoding(encoding);\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// Ajax requests are *usually* sent using application/x-www-form-urlencoded; charset=UTF-8.\n\t\t\t\t// In JForum, we assume this as always true.\n\t\t\t\tsuperRequest.setCharacterEncoding(\"UTF-8\");\n\t\t\t}\n\t\t\t\n\t\t\tString containerEncoding = SystemGlobals.getValue(ConfigKeys.DEFAULT_CONTAINER_ENCODING);\n\t\t\t\n\t\t\tif (isPost) { \n\t\t\t\tcontainerEncoding = encoding;\n\t\t\t}\n\t\t\t\n\t\t\tfor (Enumeration e = superRequest.getParameterNames(); e.hasMoreElements(); ) {\n\t\t\t\tString name = (String)e.nextElement();\n\t\t\t\t\n\t\t\t\tString[] values = superRequest.getParameterValues(name);\n\t\t\t\t\n\t\t\t\tif (values != null && values.length > 1) {\n\t\t\t\t\tfor (int i = 0; i < values.length; i++) {\n\t\t\t\t\t\tthis.addParameter(name, new String(values[i].getBytes(containerEncoding), encoding));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthis.addParameter(name, new String(superRequest.getParameter(name).getBytes(containerEncoding), encoding));\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (this.getModule() == null && this.getAction() == null) {\n\t\t\t\tint index = requestUri.indexOf('?');\n\t\t\t\t\n\t\t\t\tif (index > -1) {\n\t\t\t\t\trequestUri = requestUri.substring(0, index);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.parseFriendlyURL(requestUri, servletExtension);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @param requestUri\n\t * @param servletExtension\n\t */\n\tprivate void parseFriendlyURL(String requestUri, String servletExtension) \n\t{\n\t\trequestUri = requestUri.substring(0, requestUri.length() - servletExtension.length());\n\t\tString[] urlModel = requestUri.split(\"/\");\n\t\t\n\t\tint moduleIndex = 1;\n\t\tint actionIndex = 2;\n\t\tint baseLen = 3;\n\t\t\n\t\tUrlPattern url = null;\n\t\t\n\t\tif (urlModel.length >= baseLen) {\n\t\t\t// <moduleName>.<actionName>.<numberOfParameters>\n\t\t\tStringBuffer sb = new StringBuffer(64)\n\t\t\t\t.append(urlModel[moduleIndex])\n\t\t\t\t.append('.')\n\t\t\t\t.append(urlModel[actionIndex])\n\t\t\t\t.append('.')\n\t\t\t\t.append(urlModel.length - baseLen);\n\t\t\t\n\t\t\turl = UrlPatternCollection.findPattern(sb.toString());\n\t\t}\n\n\t\tif (url != null) {\n\t\t\tif (url.getSize() >= urlModel.length - baseLen) {\n\t\t\t\tfor (int i = 0; i < url.getSize(); i++) {\n\t\t\t\t\tthis.addParameter(url.getVars()[i], urlModel[i + baseLen]);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tthis.addOrReplaceParameter(\"module\", urlModel[moduleIndex]);\n\t\t\tthis.addParameter(\"action\", urlModel[actionIndex]);\n\t\t}\n\t\telse {\n\t\t\tthis.addOrReplaceParameter(\"module\", null);\n\t\t\tthis.addParameter(\"action\", null);\n\t\t}\n\t}\n\n    public SessionContext getSessionContext(boolean create) {\n        return new WebSessionContext(this.getSession(true));\n    }\n\n    public SessionContext getSessionContext() {\n        return new WebSessionContext(this.getSession());\n    }\n\n    /**\n\t * @param superRequest HttpServletRequest\n\t * @param encoding String\n\t * @throws UnsupportedEncodingException\n\t */\n\tprivate void handleMultipart(HttpServletRequest superRequest, String encoding) throws UnsupportedEncodingException\n\t{\n\t\tString tmpPath = new StringBuffer(256)\n\t\t    .append(SystemGlobals.getApplicationPath())\n\t\t    .append('/')\n\t\t    .append(SystemGlobals.getValue(ConfigKeys.TMP_DIR))\n\t\t    .toString();\n\t\t\n\t\tFile tmpDir = new File(tmpPath);\n\t\tboolean success = false;\n\n\t\ttry {\n\t\t\tif (!tmpDir.exists()) {\n\t\t\t\ttmpDir.mkdirs();\n\t\t\t\tsuccess = true;\n\t\t\t}\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\t// We won't log it because the directory\n\t\t\t// creation failed for some reason - a SecurityException\n\t\t\t// or something else. We don't care about it, as the\n\t\t\t// code below tries to use java.io.tmpdir\n\t\t}\n\t\t\n\t\tif (!success) {\n\t\t\ttmpPath = System.getProperty(\"java.io.tmpdir\");\n\t\t\ttmpDir = new File(tmpPath);\n\t\t}\n\t\t\n\t\tServletFileUpload upload = new ServletFileUpload(new DiskFileItemFactory(100 * 1024, tmpDir));\n\t\tupload.setHeaderEncoding(encoding);\n\n\t\ttry {\n\t\t\tList items = upload.parseRequest(superRequest);\n\t\t\t\n\t\t\tfor (Iterator iter = items.iterator(); iter.hasNext(); ) {\n\t\t\t\tFileItem item = (FileItem)iter.next();\n\t\t\t\n\t\t\t\tif (item.isFormField()) {\n\t\t\t\t\tthis.addParameter(item.getFieldName(), item.getString(encoding));\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif (item.getSize() > 0) {\n\t\t\t\t\t\t// We really don't want to call addParameter(), as \n\t\t\t\t\t\t// there should not be possible to have multiple\n\t\t\t\t\t\t// values for a InputStream data\n\t\t\t\t\t\tthis.query.put(item.getFieldName(), item);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcatch (FileUploadException e) {\n\t\t\tthrow new MultipartHandlingException(\"Error while processing multipart content: \" + e);\n\t\t}\n\t}\n\t\n\t/**\n\t * @see javax.servlet.ServletRequestWrapper#getParameterValues(java.lang.String)\n\t */\n\tpublic String[] getParameterValues(String name) \n\t{\n\t\tObject value = this.getObjectParameter(name);\n\t\t\n\t\tif (value instanceof String) {\n\t\t\treturn new String[] { (String)value };\n\t\t}\n\t\t\n\t\tList l = (List)value;\n\t\t\n\t\treturn l == null\n\t\t\t? super.getParameterValues(name)\n\t\t\t: (String[])l.toArray(new String[0]);\n\t}\n\t\n\tprivate String extractRequestUri(String requestUri, String contextPath)\n\t{\n\t\t// First, remove the context path from the requestUri, \n\t\t// so we can work only with the important stuff\n\t\tif (contextPath != null && contextPath.length() > 0) {\n\t\t\trequestUri = requestUri.substring(contextPath.length(), requestUri.length());\n\t\t}\n\t\t\n\t\t// Remove the \"jsessionid\" (or similar) from the URI\n\t\t// Probably this is not the right way to go, since we're\n\t\t// discarding the value...\n\t\tint index = requestUri.indexOf(';');\n\t\t\n\t\tif (index > -1) {\n\t\t\tint lastIndex = requestUri.indexOf('?', index);\n\t\t\t\n\t\t\tif (lastIndex == -1) {\n\t\t\t\tlastIndex = requestUri.indexOf('&', index);\n\t\t\t}\n\t\t\t\n\t\t\tif (lastIndex == -1) {\n\t\t\t\trequestUri = requestUri.substring(0, index);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tString part1 = requestUri.substring(0, index);\n\t\t\t\trequestUri = part1 + requestUri.substring(lastIndex);\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn requestUri;\n\t}\n\n\t/**\n\t * @see javax.servlet.ServletRequest#getParameter(java.lang.String)\n\t */\n\tpublic String getParameter(String parameter) \n\t{\n\t\treturn (String)this.query.get(parameter);\n\t}",
  "metadata": {
    "fileId": "WebRequestContext_java_chunk_2",
    "fileName": "WebRequestContext.java",
    "filePath": "src/net/jforum/context/web/WebRequestContext.java"
  }
}