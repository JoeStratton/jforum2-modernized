{
  "pageContent": "File Path: src/net/jforum/context/web/WebRequestContext.java\n\n Original Content: /**\n\t * @see javax.servlet.ServletRequest#getParameter(java.lang.String)\n\t */\n\tpublic String getParameter(String parameter) \n\t{\n\t\treturn (String)this.query.get(parameter);\n\t}\n\n\t/**\n\t * Gets an parameter that is a number.\n\t * A call to <code>Integer#parseInt(String)</code> is made\n\t * to do the conversion\n\t * @param parameter The parameter name to get the value\n\t * @return int\n\t */\n\tpublic int getIntParameter(String parameter)\n\t{\n\t\treturn Integer.parseInt(this.getParameter(parameter));\n\t}\n\t\n\t/**\n\t * Gets some request parameter as <code>Object</code>.\n\t * This method may be used when you have to get some value\n\t * of a <i>multipart/form-data</i> request, like a image\n\t * of file. <br>\n\t * \n\t * @param parameter String\n\t * @return Object\n\t */\n\tpublic Object getObjectParameter(String parameter)\n\t{\n\t\treturn this.query.get(parameter);\n\t}\n\t\n\tpublic void addParameter(String name, Object value)\n\t{\n\t\tif (!this.query.containsKey(name)) {\n\t\t\tthis.query.put(name, value);\n\t\t}\n\t\telse {\n\t\t\tObject currentValue = this.getObjectParameter(name);\n\t\t\tList l;\n\t\t\t\n\t\t\tif (!(currentValue instanceof List)) {\n\t\t\t\tl = new ArrayList();\n\t\t\t\tl.add(currentValue);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tl = (List)currentValue;\n\t\t\t}\n\t\t\t\n\t\t\tl.add(value);\n\t\t\tthis.query.put(name, l);\n\t\t}\n\t}\n\t\n\tpublic void addOrReplaceParameter(String name, Object value)\n\t{\n\t\tthis.query.put(name, value);\n\t}\n\t\n\t/**\n\t * Gets the <i>action</i> of the current request.\n\t * \n\t * An <i>Action</i> is the parameter name which specifies\n\t * what next action should be done by the system. It may be\n\t * add or edit a post, editing the groups, whatever. In the URL, the\n\t * Action can the represented in two forms:\n\t * <p>\n\t * <blockquote>\n\t * <code>\n\t * http://www.host.com/webapp/servletName?module=groups&action=list\n\t * </code>\n\t * </blockquote>\n\t * <p>\n\t * or\n\t * <p>\n\t * <blockquote>\n\t * <code>\n\t * http://www.host.com/webapp/servletName/groups/list\n\t * </code>\n\t * </blockquote>\n\t * <p>\n\t * In both situations, the action's name is \"list\".\n\t * \n\t * @return String representing the action name\n\t */\n\tpublic String getAction()\n\t{\n\t\treturn this.getParameter(\"action\");\n\t}\n\t\n\tpublic void changeAction(String newAction)\n\t{\n\t\tif (this.query.containsKey(\"action\")) {\n\t\t\tthis.query.remove(\"action\");\n\t\t\tthis.query.put(\"action\", newAction);\n\t\t}\n\t\telse {\n\t\t\tthis.addParameter(\"action\", newAction);\n\t\t}\n\t}\n\t\n\t/**\n\t * Gets the <i>module</i> of the current request.\n\t * \n\t * A <i>Module</i> is the parameter name which specifies\n\t * what module the user is requesting. It may be the group\n\t * administration, the topics or anything else configured module.\n\t *In the URL, the Module can the represented in two forms:\n\t * <p>\n\t * <blockquote>\n\t * <code>\n\t * http://www.host.com/webapp/servletName?module=groups&action=list\n\t * </code>\n\t * </blockquote>\n\t * <p>\n\t * or\n\t * <p>\n\t * <blockquote>\n\t * <code>\n\t * http://www.host.com/webapp/servletName/groups/list\n\t * </code>\n\t * </blockquote>\n\t * <p>\n\t * In both situations, the module's name is \"groups\".\n\t * \n\t * @return String representing the module name\n\t */\n\tpublic String getModule()\n\t{\n\t\treturn this.getParameter(\"module\");\n\t}\n\t\n\tpublic Object getObjectRequestParameter(String parameter)\n\t{\n\t\treturn this.query.get(parameter);\n\t}\n\t\n\t/**\n\t * @see javax.servlet.http.HttpServletRequestWrapper#getContextPath()\n\t */\n\tpublic String getContextPath() \n\t{\n\t\tString contextPath = super.getContextPath();\n\t\tString proxiedContextPath = SystemGlobals.getValue(ConfigKeys.PROXIED_CONTEXT_PATH);\n\t\t\n\t\tif (!StringUtils.isEmpty(proxiedContextPath)) {\n\t\t\tcontextPath = proxiedContextPath;\n\t\t}\n\t\t\n\t\treturn contextPath;\n\t}\n\t\n\t/**\n\t * @see javax.servlet.ServletRequestWrapper#getRemoteAddr()\n\t */\n\tpublic String getRemoteAddr()\n\t{\n\t\t// We look if the request is forwarded\n\t\t// If it is not call the older function.\n        String ip = super.getHeader(\"x-forwarded-for\");\n        \n        if (ip == null) {\n        \tip = super.getRemoteAddr();\n        }\n        else {\n        \t// Process the IP to keep the last IP (real ip of the computer on the net)\n            StringTokenizer tokenizer = new StringTokenizer(ip, \",\");\n\n            // Ignore all tokens, except the last one\n            for (int i = 0; i < tokenizer.countTokens() -1 ; i++) {\n            \ttokenizer.nextElement();\n            }\n            \n            ip = tokenizer.nextToken().trim();\n            \n            if (ip.equals(\"\")) {\n            \tip = null;\n            }\n        }\n        \n        // If the ip is still null, we put 0.0.0.0 to avoid null values\n        if (ip == null) {\n        \tip = \"0.0.0.0\";\n        }\n        \n        return ip;\n\t}\n}",
  "metadata": {
    "fileId": "WebRequestContext_java_chunk_3",
    "fileName": "WebRequestContext.java",
    "filePath": "src/net/jforum/context/web/WebRequestContext.java"
  }
}