{
  "pageContent": "File Path: src/net/jforum/util/mail/Spammer.java\n\n Original Content: public class Spammer\n{\n\tprivate static final Logger logger = Logger.getLogger(Spammer.class);\n\n\tprivate static final int MESSAGE_HTML = 0;\n\tprivate static final int MESSAGE_TEXT = 1;\n\t\n\tprivate static int messageFormat;\n\tprivate Session session;\n\tprivate String username;\n\tprivate String password;\n\t\n\tprivate Properties mailProps = new Properties();\n\tprivate MimeMessage message;\n\tprivate List users = new ArrayList();\n\tprivate String messageId;\n\tprivate String inReplyTo;\n\tprivate boolean needCustomization;\n\tprivate SimpleHash templateParams;\n\tprivate Template template;\n\t\n\tprotected Spammer() throws MailException\n\t{\n\t\tboolean ssl = SystemGlobals.getBoolValue(ConfigKeys.MAIL_SMTP_SSL);\n\t\t\n\t\tString hostProperty = this.hostProperty(ssl);\n\t\tString portProperty = this.portProperty(ssl);\n\t\tString authProperty = this.authProperty(ssl);\n\t\tString localhostProperty = this.localhostProperty(ssl);\n\t\t\n\t\tmailProps.put(hostProperty, SystemGlobals.getValue(ConfigKeys.MAIL_SMTP_HOST));\n\t\tmailProps.put(portProperty, SystemGlobals.getValue(ConfigKeys.MAIL_SMTP_PORT));\n\n\t\tString localhost = SystemGlobals.getValue(ConfigKeys.MAIL_SMTP_LOCALHOST);\n\t\t\n\t\tif (!StringUtils.isEmpty(localhost)) {\n\t\t\tmailProps.put(localhostProperty, localhost);\n\t\t}\n\t\t\n\t\tmailProps.put(\"mail.mime.address.strict\", \"false\");\n\t\tmailProps.put(\"mail.mime.charset\", SystemGlobals.getValue(ConfigKeys.MAIL_CHARSET));\n\t\tmailProps.put(authProperty, SystemGlobals.getValue(ConfigKeys.MAIL_SMTP_AUTH));\n\n\t\tusername = SystemGlobals.getValue(ConfigKeys.MAIL_SMTP_USERNAME);\n\t\tpassword = SystemGlobals.getValue(ConfigKeys.MAIL_SMTP_PASSWORD);\n\n\t\tmessageFormat = SystemGlobals.getValue(ConfigKeys.MAIL_MESSSAGE_FORMAT).equals(\"html\") \n\t\t\t? MESSAGE_HTML\n\t\t\t: MESSAGE_TEXT;\n\n\t\tthis.session = Session.getInstance(mailProps);\n\t}\n\n\tpublic boolean dispatchMessages()\n\t{\n        try\n        {\n            int sendDelay = SystemGlobals.getIntValue(ConfigKeys.MAIL_SMTP_DELAY);\n            \n\t\t\tif (SystemGlobals.getBoolValue(ConfigKeys.MAIL_SMTP_AUTH)) {\n                if (!StringUtils.isEmpty(username) && !StringUtils.isEmpty(password)) {\n                \tboolean ssl = SystemGlobals.getBoolValue(ConfigKeys.MAIL_SMTP_SSL);\n                \t\n                    Transport transport = this.session.getTransport(ssl ? \"smtps\" : \"smtp\");\n                    \n                    try {\n\t                    String host = SystemGlobals.getValue(ConfigKeys.MAIL_SMTP_HOST);\n\t                    transport.connect(host, username, password);\n\t\n\t                    if (transport.isConnected()) {\n\t                        for (Iterator userIter = this.users.iterator(); userIter.hasNext(); ) {\n\t                        \tUser user = (User)userIter.next();\n\t                        \t\n\t                        \tif (this.needCustomization) {\n\t                        \t\tthis.defineUserMessage(user);\n\t                        \t}\n\t                        \t\n\t                        \tAddress address = new InternetAddress(user.getEmail());\n\t                        \t\n\t                        \tlogger.debug(\"Sending mail to: \" + user.getEmail());\n\t                        \t\n\t                        \tthis.message.setRecipient(Message.RecipientType.TO, address);\t                            \n\t                        \ttransport.sendMessage(this.message, new Address[] { address });\n\t                        \t\n\t                        \tif (sendDelay > 0) {\n\t\t                        \ttry {\n\t\t                            \tThread.sleep(sendDelay);\n\t\t                            } \n\t\t                        \tcatch (InterruptedException ie) {\n\t\t                            \tlogger.error(\"Error while Thread.sleep.\" + ie, ie);\n\t\t                            }\n\t                        \t}\n\t                        }\n\t                    }\n                    }\n                    catch (Exception e) {\n                    \tthrow new MailException(e);\n                    }\n                    finally {\n                    \ttry { transport.close(); } catch (Exception e) {}\n                    }\n                }\n            }\n            else {\n                for (Iterator iter = this.users.iterator(); iter.hasNext();) {\n                \tUser user = (User)iter.next();\n                \t\n                \tif (this.needCustomization) {\n                \t\tthis.defineUserMessage(user);\n                \t}\n                \t\n                \tAddress address = new InternetAddress(user.getEmail());\n                \tlogger.debug(\"Sending mail to: \" + user.getEmail());\n                \tthis.message.setRecipient(Message.RecipientType.TO,address);\n                    Transport.send(this.message, new Address[] { address });\n                    \n                    if (sendDelay > 0) {\n\t                    try {\n\t                    \tThread.sleep(sendDelay);\n\t                    } catch (InterruptedException ie) {\n\t                    \tlogger.error(\"Error while Thread.sleep.\" + ie, ie);\n\t                    }\n                    }\n                }\n            }\n        }\n        catch (MessagingException e) {\n            logger.error(\"Error while dispatching the message.\" + e, e);\n        }\n\n        return true;\n\t}\n\n\tprivate void defineUserMessage(User user)\n\t{\n\t\ttry {\n\t\t\tthis.templateParams.put(\"user\", user);\n\t\t\t\n\t\t\tString text = this.processTemplate();\n\t\t\t\n\t\t\tthis.defineMessageText(text);\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tthrow new MailException(e);\n\t\t}\n\t}\n\n\t/**\n\t * Prepares the mail message for sending.\n\t * \n\t * @param subject the subject of the email\n\t * @param messageFile the path to the mail message template\n\t * @throws MailException\n\t */\n\tprotected void prepareMessage(String subject, String messageFile) throws MailException\n\t{\n\t\tif (this.messageId != null) {\n\t\t\tthis.message = new IdentifiableMimeMessage(session);\n\t\t\t((IdentifiableMimeMessage)this.message).setMessageId(this.messageId);\n\t\t}\n\t\telse {\n\t\t\tthis.message = new MimeMessage(session);\n\t\t}\n\t\t\n\t\tthis.templateParams.put(\"forumName\", SystemGlobals.getValue(ConfigKeys.FORUM_NAME));\n\n\t\ttry {\n\t\t\tthis.message.setSentDate(new Date());\n\t\t\tthis.message.setFrom(new InternetAddress(SystemGlobals.getValue(ConfigKeys.MAIL_SENDER)));\n\t\t\tthis.message.setSubject(subject, SystemGlobals.getValue(ConfigKeys.MAIL_CHARSET));\n\t\t\t\n\t\t\tif (this.inReplyTo != null) {\n\t\t\t\tthis.message.addHeader(\"In-Reply-To\", this.inReplyTo);\n\t\t\t}\n\t\t\t\n\t\t\tthis.createTemplate(messageFile);\n\t\t\tthis.needCustomization = this.isCustomizationNeeded();\n\n\t\t\t// If we don't need to customize any part of the message, \n\t\t\t// then build the generic text right now\n\t\t\tif (!this.needCustomization) {\n\t\t\t\tString text = this.processTemplate();\n\t\t\t\tthis.defineMessageText(text);\n\t\t\t}\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tthrow new MailException(e);\n\t\t}\n\t}\n\t\n\t/**\n\t * Set the text contents of the email we're sending\n\t * @param text the text to set\n\t * @throws MessagingException\n\t */\n\tprivate void defineMessageText(String text) throws MessagingException\n\t{\n\t\tString charset = SystemGlobals.getValue(ConfigKeys.MAIL_CHARSET);\n\t\t\n\t\tif (messageFormat == MESSAGE_HTML) {\n\t\t\tthis.message.setContent(text.replaceAll(\"\\n\", \"<br />\"), \"text/html; charset=\" + charset);\n\t\t}\n\t\telse {\n\t\t\tthis.message.setText(text);\n\t\t}\n\t}\n\t\n\t/**\n\t * Gets the message text to send in the email.\n\t * \n\t * @param messageFile The optional message file to load the text. \n\t * @return The email message text\n\t * @throws Exception\n\t */\n\tprotected void createTemplate(String messageFile) throws Exception\n\t{\n\t\tString templateEncoding = SystemGlobals.getValue(ConfigKeys.MAIL_TEMPLATE_ENCODING);\n\n\t\tif (StringUtils.isEmpty(templateEncoding)) {\n\t\t\tthis.template = JForumExecutionContext.templateConfig().getTemplate(messageFile);\n\t\t}\n\t\telse {\n\t\t\tthis.template = JForumExecutionContext.templateConfig().getTemplate(messageFile, templateEncoding);\n\t\t}\n\t}\n\n\t/**\n\t * Merge the template data, creating the final content.\n\t * This method should only be called after {@link #createTemplate(String)}\n\t * and {@link #setTemplateParams(SimpleHash)}\n\t * \n\t * @return the generated content\n\t * @throws Exception\n\t */\n\tprotected String processTemplate() throws Exception\n\t{\n\t\tStringWriter writer = new StringWriter();\n\t\tthis.template.process(this.templateParams, writer);\n\t\treturn writer.toString();\n\t}\n\t\n\t/**\n\t * Set the parameters for the template being processed\n\t * @param params the parameters to the template\n\t */\n\tprotected void setTemplateParams(SimpleHash params)\n\t{\n\t\tthis.templateParams = params;\n\t}\n\t\n\t/**\n\t * Check if we have to send customized emails\n\t * @return true if there is a need for customized emails\n\t */\n\tprivate boolean isCustomizationNeeded()\n\t{\n\t\tboolean need = false;\n\t\t\n\t\tfor (Iterator iter = this.users.iterator(); iter.hasNext(); ) {\n\t\t\tUser user = (User)iter.next();\n\n\t\t\tif (user.notifyText()) {\n\t\t\t\tneed = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn need;\n\t}\n\t\n\tprotected void setMessageId(String messageId)\n\t{\n\t\tthis.messageId = messageId;\n\t}\n\t\n\tprotected void setInReplyTo(String inReplyTo)\n\t{\n\t\tthis.inReplyTo = inReplyTo;\n\t}\n\t\n\tprotected void setUsers(List users)\n\t{\n\t\tthis.users = users;\n\t}\n\n\tprivate String localhostProperty(boolean ssl)\n\t{\n\t\treturn ssl \n\t\t\t? ConfigKeys.MAIL_SMTP_SSL_LOCALHOST\n\t\t\t: ConfigKeys.MAIL_SMTP_LOCALHOST;\n\t}\n\n\tprivate String authProperty(boolean ssl)\n\t{\n\t\treturn ssl \n\t\t\t? ConfigKeys.MAIL_SMTP_SSL_AUTH\n\t\t\t: ConfigKeys.MAIL_SMTP_AUTH;\n\t}\n\n\tprivate String portProperty(boolean ssl)\n\t{\n\t\treturn ssl \n\t\t\t? ConfigKeys.MAIL_SMTP_SSL_PORT\n\t\t\t: ConfigKeys.MAIL_SMTP_PORT;\n\t}\n\n\tprivate String hostProperty(boolean ssl)\n\t{\n\t\treturn ssl \n\t\t\t? ConfigKeys.MAIL_SMTP_SSL_HOST\n\t\t\t: ConfigKeys.MAIL_SMTP_HOST;\n\t}\n}",
  "metadata": {
    "fileId": "Spammer_java_chunk_2",
    "fileName": "Spammer.java",
    "filePath": "src/net/jforum/util/mail/Spammer.java"
  }
}