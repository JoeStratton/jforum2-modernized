{
  "pageContent": "File Path: src/net/jforum/util/legacy/commons/fileupload/FileUploadBase.java\n\n Original Content: public abstract class FileUploadBase {\n\n    // ---------------------------------------------------------- Class methods\n\n\n    /**\n     * <p>Utility method that determines whether the request contains multipart\n     * content.</p>\n     *\n     * <p><strong>NOTE:</strong>This method will be moved to the\n     * <code>ServletFileUpload</code> class after the FileUpload 1.1 release.\n     * Unfortunately, since this method is static, it is not possible to\n     * provide its replacement until this method is removed.</p>\n     *\n     * @param ctx The request context to be evaluated. Must be non-null.\n     *\n     * @return <code>true</code> if the request is multipart;\n     *         <code>false</code> otherwise.\n     */\n    public static final boolean isMultipartContent(RequestContext ctx) {\n        String contentType = ctx.getContentType();\n        if (contentType == null) {\n            return false;\n        }\n        if (contentType.toLowerCase().startsWith(MULTIPART)) {\n            return true;\n        }\n        return false;\n    }\n\n\n    /**\n     * Utility method that determines whether the request contains multipart\n     * content.\n     *\n     * @param req The servlet request to be evaluated. Must be non-null.\n     *\n     * @return <code>true</code> if the request is multipart;\n     *         <code>false</code> otherwise.\n     *\n     * @deprecated Use the method on <code>ServletFileUpload</code> instead.\n     */\n    public static final boolean isMultipartContent(HttpServletRequest req) {\n        if (!\"post\".equals(req.getMethod().toLowerCase())) {\n            return false;\n        }\n        String contentType = req.getContentType();\n        if (contentType == null) {\n            return false;\n        }\n        if (contentType.toLowerCase().startsWith(MULTIPART)) {\n            return true;\n        }\n        return false;\n    }\n\n\n    // ----------------------------------------------------- Manifest constants\n\n\n    /**\n     * HTTP content type header name.\n     */\n    public static final String CONTENT_TYPE = \"Content-type\";\n\n\n    /**\n     * HTTP content disposition header name.\n     */\n    public static final String CONTENT_DISPOSITION = \"Content-disposition\";\n\n\n    /**\n     * Content-disposition value for form data.\n     */\n    public static final String FORM_DATA = \"form-data\";\n\n\n    /**\n     * Content-disposition value for file attachment.\n     */\n    public static final String ATTACHMENT = \"attachment\";\n\n\n    /**\n     * Part of HTTP content type header.\n     */\n    public static final String MULTIPART = \"multipart/\";\n\n\n    /**\n     * HTTP content type header for multipart forms.\n     */\n    public static final String MULTIPART_FORM_DATA = \"multipart/form-data\";\n\n\n    /**\n     * HTTP content type header for multiple uploads.\n     */\n    public static final String MULTIPART_MIXED = \"multipart/mixed\";\n\n\n    /**\n     * The maximum length of a single header line that will be parsed\n     * (1024 bytes).\n     */\n    public static final int MAX_HEADER_SIZE = 1024;\n\n\n    // ----------------------------------------------------------- Data members\n\n\n    /**\n     * The maximum size permitted for an uploaded file. A value of -1 indicates\n     * no maximum.\n     */\n    private long sizeMax = -1;\n\n\n    /**\n     * The content encoding to use when reading part headers.\n     */\n    private String headerEncoding;\n\n\n    // ----------------------------------------------------- Property accessors\n\n\n    /**\n     * Returns the factory class used when creating file items.\n     *\n     * @return The factory class for new file items.\n     */\n    public abstract FileItemFactory getFileItemFactory();\n\n\n    /**\n     * Sets the factory class to use when creating file items.\n     *\n     * @param factory The factory class for new file items.\n     */\n    public abstract void setFileItemFactory(FileItemFactory factory);\n\n\n    /**\n     * Returns the maximum allowed upload size.\n     *\n     * @return The maximum allowed size, in bytes.\n     *\n     * @see #setSizeMax(long)\n     *\n     */\n    public long getSizeMax() {\n        return sizeMax;\n    }\n\n\n    /**\n     * Sets the maximum allowed upload size. If negative, there is no maximum.\n     *\n     * @param sizeMax The maximum allowed size, in bytes, or -1 for no maximum.\n     *\n     * @see #getSizeMax()\n     *\n     */\n    public void setSizeMax(long sizeMax) {\n        this.sizeMax = sizeMax;\n    }\n\n\n    /**\n     * Retrieves the character encoding used when reading the headers of an\n     * individual part. When not specified, or <code>null</code>, the platform\n     * default encoding is used.\n     *\n     * @return The encoding used to read part headers.\n     */\n    public String getHeaderEncoding() {\n        return headerEncoding;\n    }\n\n\n    /**\n     * Specifies the character encoding to be used when reading the headers of\n     * individual parts. When not specified, or <code>null</code>, the platform\n     * default encoding is used.\n     *\n     * @param encoding The encoding used to read part headers.\n     */\n    public void setHeaderEncoding(String encoding) {\n        headerEncoding = encoding;\n    }\n\n\n    // --------------------------------------------------------- Public methods\n\n\n    /**\n     * Processes an <a href=\"http://www.ietf.org/rfc/rfc1867.txt\">RFC 1867</a>\n     * compliant <code>multipart/form-data</code> stream.\n     *\n     * @param req The servlet request to be parsed.\n     *\n     * @return A list of <code>FileItem</code> instances parsed from the\n     *         request, in the order that they were transmitted.\n     *\n     * @exception FileUploadException if there are problems reading/parsing\n     *                                the request or storing files.\n     *\n     * @deprecated Use the method in <code>ServletFileUpload</code> instead.\n     */\n    public List /* FileItem */ parseRequest(HttpServletRequest req)\n            throws FileUploadException {\n        return parseRequest(new ServletRequestContext(req));\n    }\n\n    /**\n     * Processes an <a href=\"http://www.ietf.org/rfc/rfc1867.txt\">RFC 1867</a>\n     * compliant <code>multipart/form-data</code> stream.\n     *\n     * @param ctx The context for the request to be parsed.\n     *\n     * @return A list of <code>FileItem</code> instances parsed from the\n     *         request, in the order that they were transmitted.\n     *\n     * @exception FileUploadException if there are problems reading/parsing\n     *                                the request or storing files.\n     */\n    public List /* FileItem */ parseRequest(RequestContext ctx)\n            throws FileUploadException {\n        if (ctx == null) {\n            throw new NullPointerException(\"ctx parameter\");\n        }\n\n        ArrayList items = new ArrayList();\n        String contentType = ctx.getContentType();\n\n        if ((null == contentType)\n            || (!contentType.toLowerCase().startsWith(MULTIPART))) {\n            throw new InvalidContentTypeException(\n                \"the request doesn't contain a \"\n                + MULTIPART_FORM_DATA\n                + \" or \"\n                + MULTIPART_MIXED\n                + \" stream, content type header is \"\n                + contentType);\n        }\n        int requestSize = ctx.getContentLength();\n\n        if (requestSize == -1) {\n            throw new UnknownSizeException(\n                \"the request was rejected because its size is unknown\");\n        }\n\n        if (sizeMax >= 0 && requestSize > sizeMax) {\n            throw new SizeLimitExceededException(\n                \"the request was rejected because \"\n                + \"its size exceeds allowed range\");\n        }\n\n        try {\n            byte[] boundary = getBoundary(contentType);\n            if (boundary == null) {\n                throw new FileUploadException(\n                        \"the request was rejected because \"\n                        + \"no multipart boundary was found\");\n            }\n\n            InputStream input = ctx.getInputStream();\n\n            MultipartStream multi = new MultipartStream(input, boundary);\n            multi.setHeaderEncoding(headerEncoding);",
  "metadata": {
    "fileId": "FileUploadBase_java_chunk_2",
    "fileName": "FileUploadBase.java",
    "filePath": "src/net/jforum/util/legacy/commons/fileupload/FileUploadBase.java"
  }
}