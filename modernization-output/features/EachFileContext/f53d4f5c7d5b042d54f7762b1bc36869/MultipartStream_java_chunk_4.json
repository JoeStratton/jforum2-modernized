{
  "pageContent": "File Path: src/net/jforum/util/legacy/commons/fileupload/MultipartStream.java\n\n Original Content: /**\n     * Returns a string representation of this object.\n     *\n     * @return The string representation of this object.\n     */\n    public String toString() {\n        StringBuffer sbTemp = new StringBuffer();\n        sbTemp.append(\"boundary='\");\n        sbTemp.append(String.valueOf(boundary));\n        sbTemp.append(\"'\\nbufSize=\");\n        sbTemp.append(bufSize);\n        return sbTemp.toString();\n    }\n\n    /**\n     * Thrown to indicate that the input stream fails to follow the\n     * required syntax.\n     */\n    public static class MalformedStreamException\n        extends IOException implements Serializable {\n        /**\n         * Constructs a <code>MalformedStreamException</code> with no\n         * detail message.\n         */\n        public MalformedStreamException() {\n            super();\n        }\n\n        /**\n         * Constructs an <code>MalformedStreamException</code> with\n         * the specified detail message.\n         *\n         * @param message The detail message.\n         */\n        public MalformedStreamException(String message) {\n            super(message);\n        }\n    }\n\n\n    /**\n     * Thrown upon attempt of setting an invalid boundary token.\n     */\n    public static class IllegalBoundaryException\n        extends IOException implements Serializable {\n        /**\n         * Constructs an <code>IllegalBoundaryException</code> with no\n         * detail message.\n         */\n        public IllegalBoundaryException() {\n            super();\n        }\n\n        /**\n         * Constructs an <code>IllegalBoundaryException</code> with\n         * the specified detail message.\n         *\n         * @param message The detail message.\n         */\n        public IllegalBoundaryException(String message) {\n            super(message);\n        }\n    }\n\n\n    // ------------------------------------------------------ Debugging methods\n\n\n    // These are the methods that were used to debug this stuff.\n    /*\n\n    // Dump data.\n    protected void dump()\n    {\n        System.out.println(\"01234567890\");\n        byte[] temp = new byte[buffer.length];\n        for(int i=0; i<buffer.length; i++)\n        {\n            if (buffer[i] == 0x0D || buffer[i] == 0x0A)\n            {\n                temp[i] = 0x21;\n            }\n            else\n            {\n                temp[i] = buffer[i];\n            }\n        }\n        System.out.println(new String(temp));\n        int i;\n        for (i=0; i<head; i++)\n            System.out.print(\" \");\n        System.out.println(\"h\");\n        for (i=0; i<tail; i++)\n            System.out.print(\" \");\n        System.out.println(\"t\");\n        System.out.flush();\n    }\n\n    // Main routine, for testing purposes only.\n    //\n    // @param args A String[] with the command line arguments.\n    // @exception Exception, a generic exception.\n    public static void main( String[] args )\n        throws Exception\n    {\n        File boundaryFile = new File(\"boundary.dat\");\n        int boundarySize = (int)boundaryFile.length();\n        byte[] boundary = new byte[boundarySize];\n        FileInputStream input = new FileInputStream(boundaryFile);\n        input.read(boundary,0,boundarySize);\n\n        input = new FileInputStream(\"multipart.dat\");\n        MultipartStream chunks = new MultipartStream(input, boundary);\n\n        int i = 0;\n        String header;\n        OutputStream output;\n        boolean nextChunk = chunks.skipPreamble();\n        while (nextChunk)\n        {\n            header = chunks.readHeaders();\n            System.out.println(\"!\"+header+\"!\");\n            System.out.println(\"wrote part\"+i+\".dat\");\n            output = new FileOutputStream(\"part\"+(i++)+\".dat\");\n            chunks.readBodyData(output);\n            nextChunk = chunks.readBoundary();\n        }\n    }\n\n    */\n}",
  "metadata": {
    "fileId": "MultipartStream_java_chunk_4",
    "fileName": "MultipartStream.java",
    "filePath": "src/net/jforum/util/legacy/commons/fileupload/MultipartStream.java"
  }
}