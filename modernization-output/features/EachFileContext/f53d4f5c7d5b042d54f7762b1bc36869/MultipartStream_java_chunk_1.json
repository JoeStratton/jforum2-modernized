{
  "pageContent": "File Path: src/net/jforum/util/legacy/commons/fileupload/MultipartStream.java\n\n Original Content: /*\n * Copyright 2001-2004 The Apache Software Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage net.jforum.util.legacy.commons.fileupload;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.Serializable;\nimport java.io.UnsupportedEncodingException;\n\n/**\n * <p> Low level API for processing file uploads.\n *\n * <p> This class can be used to process data streams conforming to MIME\n * 'multipart' format as defined in\n * <a href=\"http://www.ietf.org/rfc/rfc1867.txt\">RFC 1867</a>. Arbitrarily\n * large amounts of data in the stream can be processed under constant\n * memory usage.\n *\n * <p> The format of the stream is defined in the following way:<br>\n *\n * <code>\n *   multipart-body := preamble 1*encapsulation close-delimiter epilogue<br>\n *   encapsulation := delimiter body CRLF<br>\n *   delimiter := \"--\" boundary CRLF<br>\n *   close-delimiter := \"--\" boudary \"--\"<br>\n *   preamble := &lt;ignore&gt;<br>\n *   epilogue := &lt;ignore&gt;<br>\n *   body := header-part CRLF body-part<br>\n *   header-part := 1*header CRLF<br>\n *   header := header-name \":\" header-value<br>\n *   header-name := &lt;printable ascii characters except \":\"&gt;<br>\n *   header-value := &lt;any ascii characters except CR & LF&gt;<br>\n *   body-data := &lt;arbitrary data&gt;<br>\n * </code>\n *\n * <p>Note that body-data can contain another mulipart entity.  There\n * is limited support for single pass processing of such nested\n * streams.  The nested stream is <strong>required</strong> to have a\n * boundary token of the same length as the parent stream (see {@link\n * #setBoundary(byte[])}).\n *\n * <p>Here is an example of usage of this class.<br>\n *\n * <pre>\n *    try {\n *        MultipartStream multipartStream = new MultipartStream(input,\n *                                                              boundary);\n *        boolean nextPart = multipartStream.skipPreamble();\n *        OutputStream output;\n *        while(nextPart) {\n *            header = chunks.readHeader();\n *            // process headers\n *            // create some output stream\n *            multipartStream.readBodyPart(output);\n *            nextPart = multipartStream.readBoundary();\n *        }\n *    } catch(MultipartStream.MalformedStreamException e) {\n *          // the stream failed to follow required syntax\n *    } catch(IOException) {\n *          // a read or write error occurred\n *    }\n *\n * </pre>\n *\n * @author <a href=\"mailto:Rafal.Krzewski@e-point.pl\">Rafal Krzewski</a>\n * @author <a href=\"mailto:martinc@apache.org\">Martin Cooper</a>\n * @author Sean C. Sullivan\n *\n * @version $Id: MultipartStream.java,v 1.4 2007/04/12 02:11:54 rafaelsteil Exp $\n */",
  "metadata": {
    "fileId": "MultipartStream_java_chunk_1",
    "fileName": "MultipartStream.java",
    "filePath": "src/net/jforum/util/legacy/commons/fileupload/MultipartStream.java"
  }
}