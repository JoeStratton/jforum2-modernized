{
  "pageContent": "File Path: src/net/jforum/util/legacy/commons/fileupload/DiskFileUpload.java\n\n Original Content: /*\n * Copyright 2001-2004 The Apache Software Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage net.jforum.util.legacy.commons.fileupload;\n\nimport java.io.File;\nimport java.util.List;\n\nimport javax.servlet.http.HttpServletRequest;\n\n/**\n * <p>High level API for processing file uploads.</p>\n *\n * <p>This class handles multiple files per single HTML widget, sent using\n * <code>multipart/mixed</code> encoding type, as specified by\n * <a href=\"http://www.ietf.org/rfc/rfc1867.txt\">RFC 1867</a>.  Use {@link\n * #parseRequest(HttpServletRequest)} to acquire a list of {@link\n * org.apache.commons.fileupload.FileItem}s associated with a given HTML\n * widget.</p>\n *\n * <p>Individual parts will be stored in temporary disk storage or in memory,\n * depending on their size, and will be available as {@link\n * org.apache.commons.fileupload.FileItem}s.</p>\n *\n * @author <a href=\"mailto:Rafal.Krzewski@e-point.pl\">Rafal Krzewski</a>\n * @author <a href=\"mailto:dlr@collab.net\">Daniel Rall</a>\n * @author <a href=\"mailto:jvanzyl@apache.org\">Jason van Zyl</a>\n * @author <a href=\"mailto:jmcnally@collab.net\">John McNally</a>\n * @author <a href=\"mailto:martinc@apache.org\">Martin Cooper</a>\n * @author Sean C. Sullivan\n *\n * @version $Id: DiskFileUpload.java,v 1.4 2005/07/26 04:01:16 diegopires Exp $\n *\n * @deprecated Use <code>ServletFileUpload</code> together with\n *             <code>DiskFileItemFactory</code> instead.\n */\npublic class DiskFileUpload\n    extends FileUploadBase {\n\n    // ----------------------------------------------------------- Data members\n\n\n    /**\n     * The factory to use to create new form items.\n     */\n    private DefaultFileItemFactory fileItemFactory;\n\n\n    // ----------------------------------------------------------- Constructors\n\n\n    /**\n     * Constructs an instance of this class which uses the default factory to\n     * create <code>FileItem</code> instances.\n     *\n     * @see #DiskFileUpload(DefaultFileItemFactory fileItemFactory)\n     *\n     * @deprecated Use <code>FileUpload</code> instead.\n     */\n    public DiskFileUpload() {\n        super();\n        this.fileItemFactory = new DefaultFileItemFactory();\n    }\n\n\n    /**\n     * Constructs an instance of this class which uses the supplied factory to\n     * create <code>FileItem</code> instances.\n     *\n     * @see #DiskFileUpload()\n     *\n     * @deprecated Use <code>FileUpload</code> instead.\n     */\n    public DiskFileUpload(DefaultFileItemFactory fileItemFactory) {\n        super();\n        this.fileItemFactory = fileItemFactory;\n    }\n\n\n    // ----------------------------------------------------- Property accessors\n\n\n    /**\n     * Returns the factory class used when creating file items.\n     *\n     * @return The factory class for new file items.\n     *\n     * @deprecated Use <code>FileUpload</code> instead.\n     */\n    public FileItemFactory getFileItemFactory() {\n        return fileItemFactory;\n    }\n\n\n    /**\n     * Sets the factory class to use when creating file items. The factory must\n     * be an instance of <code>DefaultFileItemFactory</code> or a subclass\n     * thereof, or else a <code>ClassCastException</code> will be thrown.\n     *\n     * @param factory The factory class for new file items.\n     *\n     * @deprecated Use <code>FileUpload</code> instead.\n     */\n    public void setFileItemFactory(FileItemFactory factory) {\n        this.fileItemFactory = (DefaultFileItemFactory) factory;\n    }\n\n\n    /**\n     * Returns the size threshold beyond which files are written directly to\n     * disk.\n     *\n     * @return The size threshold, in bytes.\n     *\n     * @see #setSizeThreshold(int)\n     *\n     * @deprecated Use <code>DiskFileItemFactory</code> instead.\n     */\n    public int getSizeThreshold() {\n        return fileItemFactory.getSizeThreshold();\n    }\n\n\n    /**\n     * Sets the size threshold beyond which files are written directly to disk.\n     *\n     * @param sizeThreshold The size threshold, in bytes.\n     *\n     * @see #getSizeThreshold()\n     *\n     * @deprecated Use <code>DiskFileItemFactory</code> instead.\n     */\n    public void setSizeThreshold(int sizeThreshold) {\n        fileItemFactory.setSizeThreshold(sizeThreshold);\n    }\n\n\n    /**\n     * Returns the location used to temporarily store files that are larger\n     * than the configured size threshold.\n     *\n     * @return The path to the temporary file location.\n     *\n     * @see #setRepositoryPath(String)\n     *\n     * @deprecated Use <code>DiskFileItemFactory</code> instead.\n     */\n    public String getRepositoryPath() {\n        return fileItemFactory.getRepository().getPath();\n    }\n\n\n    /**\n     * Sets the location used to temporarily store files that are larger\n     * than the configured size threshold.\n     *\n     * @param repositoryPath The path to the temporary file location.\n     *\n     * @see #getRepositoryPath()\n     *\n     * @deprecated Use <code>DiskFileItemFactory</code> instead.\n     */\n    public void setRepositoryPath(String repositoryPath) {\n        fileItemFactory.setRepository(new File(repositoryPath));\n    }\n\n\n    // --------------------------------------------------------- Public methods\n\n\n    /**\n     * Processes an <a href=\"http://www.ietf.org/rfc/rfc1867.txt\">RFC 1867</a>\n     * compliant <code>multipart/form-data</code> stream. If files are stored\n     * on disk, the path is given by <code>getRepository()</code>.\n     *\n     * @param req           The servlet request to be parsed. Must be non-null.\n     * @param sizeThreshold The max size in bytes to be stored in memory.\n     * @param sizeMax       The maximum allowed upload size, in bytes.\n     * @param path          The location where the files should be stored.\n     *\n     * @return A list of <code>FileItem</code> instances parsed from the\n     *         request, in the order that they were transmitted.\n     *\n     * @exception FileUploadException if there are problems reading/parsing\n     *                                the request or storing files.\n     *\n     * @deprecated Use <code>ServletFileUpload</code> instead.\n     */\n    public List /* FileItem */ parseRequest(HttpServletRequest req,\n                                            int sizeThreshold,\n                                            long sizeMax, String path)\n        throws FileUploadException {\n        setSizeThreshold(sizeThreshold);\n        setSizeMax(sizeMax);\n        setRepositoryPath(path);\n        return parseRequest(req);\n    }\n\n}",
  "metadata": {
    "fileId": "DiskFileUpload_java_chunk_1",
    "fileName": "DiskFileUpload.java",
    "filePath": "src/net/jforum/util/legacy/commons/fileupload/DiskFileUpload.java"
  }
}