{
  "pageContent": "File Path: src/net/jforum/util/legacy/commons/fileupload/FileUpload.java\n\n Original Content: /*\n * Copyright 2001-2004 The Apache Software Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage net.jforum.util.legacy.commons.fileupload;\n\nimport javax.servlet.http.HttpServletRequest;\n\n/**\n * <p>High level API for processing file uploads.</p>\n *\n * <p>This class handles multiple files per single HTML widget, sent using\n * <code>multipart/mixed</code> encoding type, as specified by\n * <a href=\"http://www.ietf.org/rfc/rfc1867.txt\">RFC 1867</a>.  Use {@link\n * #parseRequest(HttpServletRequest)} to acquire a list of {@link\n * org.apache.commons.fileupload.FileItem}s associated with a given HTML\n * widget.</p>\n *\n * <p>How the data for individual parts is stored is determined by the factory\n * used to create them; a given part may be in memory, on disk, or somewhere\n * else.</p>\n *\n * @author <a href=\"mailto:Rafal.Krzewski@e-point.pl\">Rafal Krzewski</a>\n * @author <a href=\"mailto:dlr@collab.net\">Daniel Rall</a>\n * @author <a href=\"mailto:jvanzyl@apache.org\">Jason van Zyl</a>\n * @author <a href=\"mailto:jmcnally@collab.net\">John McNally</a>\n * @author <a href=\"mailto:martinc@apache.org\">Martin Cooper</a>\n * @author Sean C. Sullivan\n *\n * @version $Id: FileUpload.java,v 1.4 2005/07/26 04:01:16 diegopires Exp $\n */\npublic class FileUpload\n    extends FileUploadBase {\n\n    // ----------------------------------------------------------- Data members\n\n\n    /**\n     * The factory to use to create new form items.\n     */\n    private FileItemFactory fileItemFactory;\n\n\n    // ----------------------------------------------------------- Constructors\n\n\n    /**\n     * Constructs an uninitialised instance of this class. A factory must be\n     * configured, using <code>setFileItemFactory()</code>, before attempting\n     * to parse requests.\n     *\n     * @see #FileUpload(FileItemFactory)\n     */\n    public FileUpload() {\n        super();\n    }\n\n\n    /**\n     * Constructs an instance of this class which uses the supplied factory to\n     * create <code>FileItem</code> instances.\n     *\n     * @see #FileUpload()\n     */\n    public FileUpload(FileItemFactory fileItemFactory) {\n        super();\n        this.fileItemFactory = fileItemFactory;\n    }\n\n\n    // ----------------------------------------------------- Property accessors\n\n\n    /**\n     * Returns the factory class used when creating file items.\n     *\n     * @return The factory class for new file items.\n     */\n    public FileItemFactory getFileItemFactory() {\n        return fileItemFactory;\n    }\n\n\n    /**\n     * Sets the factory class to use when creating file items.\n     *\n     * @param factory The factory class for new file items.\n     */\n    public void setFileItemFactory(FileItemFactory factory) {\n        this.fileItemFactory = factory;\n    }\n\n\n}",
  "metadata": {
    "fileId": "FileUpload_java_chunk_1",
    "fileName": "FileUpload.java",
    "filePath": "src/net/jforum/util/legacy/commons/fileupload/FileUpload.java"
  }
}