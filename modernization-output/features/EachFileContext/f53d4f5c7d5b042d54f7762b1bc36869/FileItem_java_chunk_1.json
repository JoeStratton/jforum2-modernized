{
  "pageContent": "File Path: src/net/jforum/util/legacy/commons/fileupload/FileItem.java\n\n Original Content: /*\n * Copyright 2001-2004 The Apache Software Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage net.jforum.util.legacy.commons.fileupload;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.Serializable;\nimport java.io.UnsupportedEncodingException;\n\n/**\n * <p> This class represents a file or form item that was received within a\n * <code>multipart/form-data</code> POST request.\n *\n * <p> After retrieving an instance of this class from a {@link\n * org.apache.commons.fileupload.FileUpload FileUpload} instance (see\n * {@link org.apache.commons.fileupload.FileUpload\n * #parseRequest(javax.servlet.http.HttpServletRequest)}), you may\n * either request all contents of the file at once using {@link #get()} or\n * request an {@link java.io.InputStream InputStream} with\n * {@link #getInputStream()} and process the file without attempting to load\n * it into memory, which may come handy with large files.\n *\n * <p> While this interface does not extend\n * <code>javax.activation.DataSource</code> per se (to avoid a seldom used\n * dependency), several of the defined methods are specifically defined with\n * the same signatures as methods in that interface. This allows an\n * implementation of this interface to also implement\n * <code>javax.activation.DataSource</code> with minimal additional work.\n *\n * @author <a href=\"mailto:Rafal.Krzewski@e-point.pl\">Rafal Krzewski</a>\n * @author <a href=\"mailto:sean@informage.net\">Sean Legassick</a>\n * @author <a href=\"mailto:jvanzyl@apache.org\">Jason van Zyl</a>\n * @author <a href=\"mailto:martinc@apache.org\">Martin Cooper</a>\n *\n * @version $Id: FileItem.java,v 1.3 2005/07/26 03:05:01 rafaelsteil Exp $\n */\npublic interface FileItem\n    extends Serializable {\n\n\n    // ------------------------------- Methods from javax.activation.DataSource\n\n\n    /**\n     * Returns an {@link java.io.InputStream InputStream} that can be\n     * used to retrieve the contents of the file.\n     *\n     * @return An {@link java.io.InputStream InputStream} that can be\n     *         used to retrieve the contents of the file.\n     *\n     * @exception IOException if an error occurs.\n     */\n    InputStream getInputStream()\n        throws IOException;\n\n\n    /**\n     * Returns the content type passed by the browser or <code>null</code> if\n     * not defined.\n     *\n     * @return The content type passed by the browser or <code>null</code> if\n     *         not defined.\n     */\n    String getContentType();\n\n\n    /**\n     * Returns the original filename in the client's filesystem, as provided by\n     * the browser (or other client software). In most cases, this will be the\n     * base file name, without path information. However, some clients, such as\n     * the Opera browser, do include path information.\n     *\n     * @return The original filename in the client's filesystem.\n     */\n    String getName();\n\n\n    // ------------------------------------------------------- FileItem methods\n\n\n    /**\n     * Provides a hint as to whether or not the file contents will be read\n     * from memory.\n     *\n     * @return <code>true</code> if the file contents will be read from memory;\n     *         <code>false</code> otherwise.\n     */\n    boolean isInMemory();\n\n\n    /**\n     * Returns the size of the file item.\n     *\n     * @return The size of the file item, in bytes.\n     */\n    long getSize();\n\n\n    /**\n     * Returns the contents of the file item as an array of bytes.\n     *\n     * @return The contents of the file item as an array of bytes.\n     */\n    byte[] get();\n\n\n    /**\n     * Returns the contents of the file item as a String, using the specified\n     * encoding.  This method uses {@link #get()} to retrieve the\n     * contents of the item.\n     *\n     * @param encoding The character encoding to use.\n     *\n     * @return The contents of the item, as a string.\n     *\n     * @exception UnsupportedEncodingException if the requested character\n     *                                         encoding is not available.\n     */\n    String getString(String encoding)\n        throws UnsupportedEncodingException;\n\n\n    /**\n     * Returns the contents of the file item as a String, using the default\n     * character encoding.  This method uses {@link #get()} to retrieve the\n     * contents of the item.\n     *\n     * @return The contents of the item, as a string.\n     */\n    String getString();\n\n\n    /**\n     * A convenience method to write an uploaded item to disk. The client code\n     * is not concerned with whether or not the item is stored in memory, or on\n     * disk in a temporary location. They just want to write the uploaded item\n     * to a file.\n     * <p>\n     * This method is not guaranteed to succeed if called more than once for\n     * the same item. This allows a particular implementation to use, for\n     * example, file renaming, where possible, rather than copying all of the\n     * underlying data, thus gaining a significant performance benefit.\n     *\n     * @param file The <code>File</code> into which the uploaded item should\n     *             be stored.\n     *\n     * @exception Exception if an error occurs.\n     */\n    void write(File file) throws Exception;\n\n\n    /**\n     * Deletes the underlying storage for a file item, including deleting any\n     * associated temporary disk file. Although this storage will be deleted\n     * automatically when the <code>FileItem</code> instance is garbage\n     * collected, this method can be used to ensure that this is done at an\n     * earlier time, thus preserving system resources.\n     */\n    void delete();\n\n\n    /**\n     * Returns the name of the field in the multipart form corresponding to\n     * this file item.\n     *\n     * @return The name of the form field.\n     */\n    String getFieldName();\n\n\n    /**\n     * Sets the field name used to reference this file item.\n     *\n     * @param name The name of the form field.\n     */\n    void setFieldName(String name);\n\n\n    /**\n     * Determines whether or not a <code>FileItem</code> instance represents\n     * a simple form field.\n     *\n     * @return <code>true</code> if the instance represents a simple form\n     *         field; <code>false</code> if it represents an uploaded file.\n     */\n    boolean isFormField();\n\n\n    /**\n     * Specifies whether or not a <code>FileItem</code> instance represents\n     * a simple form field.\n     *\n     * @param state <code>true</code> if the instance represents a simple form\n     *              field; <code>false</code> if it represents an uploaded file.\n     */\n    void setFormField(boolean state);\n\n\n    /**\n     * Returns an {@link java.io.OutputStream OutputStream} that can\n     * be used for storing the contents of the file.\n     *\n     * @return An {@link java.io.OutputStream OutputStream} that can be used\n     *         for storing the contensts of the file.\n     *\n     * @exception IOException if an error occurs.\n     */\n    OutputStream getOutputStream() throws IOException;\n\n}",
  "metadata": {
    "fileId": "FileItem_java_chunk_1",
    "fileName": "FileItem.java",
    "filePath": "src/net/jforum/util/legacy/commons/fileupload/FileItem.java"
  }
}