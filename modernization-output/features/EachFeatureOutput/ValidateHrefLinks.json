{
  "featureName": "ValidateHrefLinks",
  "description": "Checks if URLs in href attributes use allowed protocols to prevent JavaScript injection.",
  "inputValues": [
    "content-string-HtmlContent",
    "allowedProtocols-object-ProtocolList"
  ],
  "businessLogic": "1. Input Collection:\n   - Collect the HTML content to be validated (content-string-HtmlContent)\n   - Collect the list of allowed protocols (allowedProtocols-object-ProtocolList)\n   - System will use configuration settings if no protocols are explicitly provided\n\n2. Data Validation:\n   - Verify that the HTML content is not empty\n     * IF content is null or empty THEN\n       - Return empty string\n     * END IF\n   - Verify that the allowed protocols list is available\n     * IF allowedProtocols is not provided THEN\n       - Load default allowed protocols from system configuration\n     * END IF\n\n3. Business Rule Processing:\n   - Prepare validation environment\n     * Initialize HTML parsing mechanism\n     * Prepare storage for processed content\n   - Determine validation mode\n     * Check if relative URLs are allowed based on system configuration\n     * Verify welcome tags and attributes are properly loaded\n\n4. Core Operation Execution:\n   - Parse the HTML content into manageable nodes\n     * FOR each node in the HTML content DO\n       - IF node is a tag with href attribute THEN\n         * Extract the href value\n         * Check if href value starts with any allowed protocol\n           - IF href starts with allowed protocol THEN\n             > Mark as valid\n           - ELSE IF relative URLs are allowed AND href starts with '/' THEN\n             > Mark as valid\n           - ELSE\n             > Mark as invalid\n           - END IF\n         * IF href is invalid THEN\n           > Remove or sanitize the attribute\n         * END IF\n       - END IF\n     * END FOR\n   - Reconstruct the HTML with validated href attributes\n\n5. Response Generation:\n   - Compile the processed HTML content with all validated links\n   - Return the sanitized HTML content\n   - IF any links were sanitized or removed THEN\n     * Include information about modified content\n   - END IF",
  "databaseEntities": [],
  "validationRules": [
    "HTML content must not be null or empty",
    "Href attributes must start with an allowed protocol",
    "Relative URLs must start with '/' if allowed by configuration",
    "Protocols in href attributes must match case-insensitively with allowed protocols",
    "Href values must not contain newlines, carriage returns, or null characters"
  ],
  "dbSeedingOperations": [],
  "schema": {
    "ProtocolList": {
      "type": "array",
      "items": {
        "type": "string",
        "description": "Valid protocol prefix (e.g., 'http://', 'https://', 'ftp://')"
      }
    }
  }
}