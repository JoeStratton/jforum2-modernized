{
  "featureName": "AdminAccessControl",
  "description": "Validates administrative access permissions before processing admin commands.",
  "inputValues": [
    "requestContext-object-RequestContext",
    "responseContext-object-ResponseContext",
    "templateContext-object-TemplateContext",
    "userSession-object-UserSession"
  ],
  "businessLogic": "1. Input Collection\n   1.1. Collect the request context containing user session information\n   1.2. Collect the response context for potential error responses\n   1.3. Collect the template context for rendering the appropriate view\n   1.4. Collect the current user session data\n      1.4.1. User identifier\n      1.4.2. User group memberships\n      1.4.3. Current session authentication status\n\n2. Data Validation\n   2.1. Validate user session exists\n      2.1.1. IF user session is null or invalid THEN\n         2.1.1.1. Generate authentication required error\n         2.1.1.2. Proceed to Response Generation with error\n      2.1.2. ELSE continue to next validation\n   2.2. Validate session authentication status\n      2.2.1. IF session is not authenticated THEN\n         2.2.1.1. Generate authentication required error\n         2.2.1.2. Proceed to Response Generation with error\n      2.2.2. ELSE continue to next validation\n\n3. Business Rule Processing\n   3.1. Check administrative permissions\n      3.1.1. Retrieve user's group memberships from session\n      3.1.2. Check if user belongs to administrator group\n         3.1.2.1. IF user is not in administrator group THEN\n            3.1.2.1.1. Generate access denied error\n            3.1.2.1.2. Log unauthorized access attempt\n            3.1.2.1.3. Proceed to Response Generation with error\n         3.1.2.2. ELSE continue to next step\n   3.2. Verify specific administrative permission for requested action\n      3.2.1. Extract requested administrative action from request context\n      3.2.2. Retrieve permission requirements for requested action\n      3.2.3. Check if user has required permissions for the action\n         3.2.3.1. IF user lacks specific permission for action THEN\n            3.2.3.1.1. Generate insufficient permissions error\n            3.2.3.1.2. Log permission violation attempt\n            3.2.3.1.3. Proceed to Response Generation with error\n         3.2.3.2. ELSE continue to next step\n\n4. Core Operation Execution\n   4.1. Mark request as administratively authorized\n      4.1.1. Set administrative access flag in request context\n      4.1.2. Log successful administrative access authorization\n   4.2. Prepare for command execution\n      4.2.1. Set up administrative context with elevated privileges\n      4.2.2. Prepare audit trail for administrative action\n   4.3. Allow command processing to continue\n      4.3.1. Pass control to the specific administrative command handler\n      4.3.2. Monitor execution for completion or errors\n\n5. Response Generation\n   5.1. For successful authorization\n      5.1.1. Allow normal command processing to generate response\n      5.1.2. Include administrative interface elements in template context\n      5.1.3. Return processed template for rendering\n   5.2. For authorization failures\n      5.2.1. Generate access denied template\n      5.2.2. Include error details in template context\n      5.2.3. Set appropriate HTTP status code in response context\n      5.2.4. Return error template for rendering",
  "databaseEntities": [
    "jforum_users",
    "jforum_groups",
    "jforum_user_groups"
  ],
  "validationRules": [
    "User must have an active session",
    "User must be authenticated",
    "User must belong to administrator group",
    "User must have specific permissions for the requested administrative action",
    "Administrative access attempts must be logged for audit purposes"
  ],
  "dbSeedingOperations": [
    "Ensure at least one user is assigned to the administrator group",
    "Ensure administrator group has all administrative permissions assigned"
  ],
  "schema": {
    "RequestContext": {
      "properties": {
        "sessionId": {
          "type": "string"
        },
        "requestedAction": {
          "type": "string"
        },
        "parameters": {
          "type": "object"
        }
      }
    },
    "ResponseContext": {
      "properties": {
        "statusCode": {
          "type": "number"
        },
        "headers": {
          "type": "object"
        }
      }
    },
    "TemplateContext": {
      "properties": {
        "variables": {
          "type": "object"
        },
        "templateName": {
          "type": "string"
        }
      }
    },
    "UserSession": {
      "properties": {
        "userId": {
          "type": "number"
        },
        "username": {
          "type": "string"
        },
        "authenticated": {
          "type": "boolean"
        },
        "groupMemberships": {
          "type": "array",
          "items": {
            "type": "number"
          }
        },
        "permissions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    }
  }
}