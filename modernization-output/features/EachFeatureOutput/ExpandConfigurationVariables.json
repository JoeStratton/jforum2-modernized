{
  "featureName": "ExpandConfigurationVariables",
  "description": "Processes configuration values containing variable references for dynamic configuration.",
  "inputValues": [
    "configValue-string-Configuration",
    "variableStore-object-VariableStore"
  ],
  "businessLogic": "1. Input Collection:\n   - Collect the configuration value string that may contain variable references\n   - Obtain reference to the variable store that contains actual values\n   - Identify the variable delimiter patterns (start and end markers)\n   - Determine if cache should be used for optimization\n\n2. Data Validation:\n   - Validate that the configuration value is not null\n     * IF configuration value is null THEN\n       - Return null as there is nothing to process\n     * END IF\n   - Validate that the variable store is accessible\n     * IF variable store is not accessible THEN\n       - Generate appropriate error message\n       - Abort the expansion process\n     * END IF\n   - Verify that the variable delimiters are properly defined\n     * IF start or end delimiters are not defined THEN\n       - Use system default delimiters\n     * END IF\n\n3. Business Rule Processing:\n   - Check if the configuration value contains any variable references\n     * IF no variable references are found THEN\n       - Return the original configuration value unchanged\n     * END IF\n   - Determine if any circular references exist in the variable definitions\n     * IF circular references are detected THEN\n       - Generate appropriate error message\n       - Break the circular reference by returning partially expanded value\n     * END IF\n   - Check if the expansion cache should be cleared\n     * IF cache invalidation is requested THEN\n       - Clear the existing variable expansion cache\n     * END IF\n\n4. Core Operation Execution:\n   - Parse the configuration value to identify variable references\n     * FOR each variable reference found in the configuration value\n       - Extract the variable name from between the delimiters\n       - Look up the variable value in the variable store\n       - IF variable exists in the store THEN\n         - Replace the variable reference with its actual value\n       - ELSE\n         - Leave the variable reference unchanged\n       - END IF\n     * END FOR\n   - Check if the expanded result contains further variable references\n     * WHILE expanded result contains variable references AND maximum recursion depth not reached\n       - Perform another round of variable expansion\n     * END WHILE\n   - Store the fully expanded result in cache if caching is enabled\n\n5. Response Generation:\n   - Return the fully expanded configuration value\n   - IF any variables could not be resolved THEN\n     - Log appropriate warnings about unresolved variables\n   - END IF\n   - IF maximum recursion depth was reached THEN\n     - Log warning about possible circular references\n   - END IF",
  "databaseEntities": [],
  "validationRules": [
    "Configuration value must be properly formatted with matching delimiters",
    "Variable references must use the correct syntax with start and end markers",
    "Variable store must be accessible during expansion",
    "Circular references in variable definitions must be detected and handled",
    "Maximum recursion depth must not be exceeded during expansion"
  ],
  "dbSeedingOperations": [],
  "schema": {
    "VariableStore": {
      "type": "object",
      "properties": {
        "getVariableValue": {
          "type": "function",
          "description": "Returns the value of a variable from the store"
        }
      },
      "required": [
        "getVariableValue"
      ]
    }
  }
}