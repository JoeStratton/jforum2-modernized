{
  "featureName": "PrepareLostPassword",
  "description": "Prepares password recovery by finding user and generating a recovery hash.",
  "inputValues": [
    "username-string-User",
    "email-string-User"
  ],
  "businessLogic": "1. Input Collection:\n   - Collect username (string, optional) - User's login name\n   - Collect email (string, optional) - User's registered email address\n   - Note: At least one of username or email must be provided\n\n2. Data Validation:\n   - Check input parameters:\n     a. IF both username and email are empty THEN\n        - Return error indicating at least one field must be provided\n     b. IF email is provided THEN\n        - Validate email format is correct\n     c. IF username is provided THEN\n        - Validate username format is correct\n\n3. Business Rule Processing:\n   - Determine user lookup strategy:\n     a. IF email is provided and not empty THEN\n        - Find username associated with the provided email\n     b. IF username is now available (either directly provided or found via email) THEN\n        - Search for user by username\n        - IF multiple users found THEN\n           - Select the first matching user\n     c. IF no user found THEN\n        - Return null indicating recovery cannot proceed\n\n4. Core Operation Execution:\n   - Generate secure recovery hash:\n     a. Combine user email with current timestamp\n     b. Add system-defined hash sequence value\n     c. Add random number component\n     d. Create cryptographic hash of the combined string\n   - Store the generated hash in the database:\n     a. Associate hash with user's email address\n     b. Set expiration time if applicable\n   - Attach hash to user object for further processing\n\n5. Response Generation:\n   - IF user was found and hash was generated successfully THEN\n      - Return user object with attached recovery hash\n   - ELSE\n      - Return null to indicate failure",
  "databaseEntities": [
    "jforum_users"
  ],
  "validationRules": [
    "At least one of username or email must be provided",
    "Email must be in valid format if provided",
    "Username must exist in the system if provided directly",
    "Email must be associated with a user account if provided"
  ],
  "dbSeedingOperations": [],
  "schema": {
    "User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "number"
        },
        "username": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "activationKey": {
          "type": "string"
        }
      }
    }
  }
}