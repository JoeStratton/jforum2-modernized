{
  "featureName": "InsertSmilie",
  "description": "Displays the form for adding a new smilie to the system.",
  "inputValues": [
    "code-string-Smilie",
    "smilie_img-object-FileItem"
  ],
  "businessLogic": "1. Input Collection:\n   - Collect the following inputs:\n     1.1. code (string, mandatory): The text code that represents the smilie\n     1.2. smilie_img (file, mandatory): The image file for the smilie\n\n2. Data Validation:\n   2.1. Validate smilie code:\n      2.1.1. Check if code is not empty\n      2.1.2. Check if code follows the required format (typically starts and ends with special characters)\n      2.1.3. IF validation fails, THEN display appropriate error message\n   2.2. Validate uploaded image:\n      2.2.1. Check if file is present\n      2.2.2. Verify file is a valid image format (jpg, gif, png)\n      2.2.3. Ensure file size is within acceptable limits\n      2.2.4. IF validation fails, THEN display appropriate error message\n\n3. Business Rule Processing:\n   3.1. Check system constraints:\n      3.1.1. Verify the smilie code is unique in the system\n      3.1.2. Ensure the system has not reached maximum allowed smilies (if applicable)\n      3.1.3. Confirm the upload directory exists and is writable\n      3.1.4. IF any constraint fails, THEN display appropriate error message\n\n4. Core Operation Execution:\n   4.1. Process the uploaded image:\n      4.1.1. Generate a unique name for the image file\n      4.1.2. Save the uploaded file to the smilie images directory\n      4.1.3. Create the URL pattern for accessing the smilie\n   4.2. Create new smilie record:\n      4.2.1. Create a new Smilie object\n      4.2.2. Set the code attribute with the provided input\n      4.2.3. Set the URL attribute with the generated image URL\n      4.2.4. Set the disk name attribute with the saved file name\n      4.2.5. Save the new smilie to the database\n   4.3. Update system repository:\n      4.3.1. Reload the smilies repository to reflect the changes\n      4.3.2. IF any operation fails, THEN display error message and roll back changes\n\n5. Response Generation:\n   5.1. On success:\n      5.1.1. Display confirmation message that the smilie was added successfully\n      5.1.2. Redirect to the smilie listing page showing all smilies including the new one\n   5.2. On failure:\n      5.2.1. Display appropriate error message\n      5.2.2. Retain entered values in the form\n      5.2.3. Allow user to correct errors and resubmit",
  "databaseEntities": [
    "jforum_smilies"
  ],
  "validationRules": [
    "Smilie code must not be empty",
    "Smilie image file must be provided",
    "Image must be a valid format (jpg, gif, png)",
    "Image file size must be within system limits",
    "Smilie code must be unique in the system"
  ],
  "dbSeedingOperations": [],
  "schema": {
    "FileItem": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Original filename of the uploaded file"
        },
        "content": {
          "type": "binary",
          "description": "Binary content of the uploaded file"
        },
        "size": {
          "type": "number",
          "description": "Size of the uploaded file in bytes"
        },
        "contentType": {
          "type": "string",
          "description": "MIME type of the uploaded file"
        }
      },
      "required": [
        "name",
        "content"
      ]
    }
  }
}