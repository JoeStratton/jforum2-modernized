{
  "featureName": "DeleteCategories",
  "description": "Removes selected forum categories with validation to prevent deletion of non-empty categories.",
  "inputValues": [
    "categories_id-string-Category"
  ],
  "businessLogic": "1. Input Collection\n   - Collect the following inputs:\n     1.1. categories_id (array of strings, mandatory): The IDs of categories to be deleted\n\n2. Data Validation\n   - Validate each category ID for deletion:\n     2.1. Verify each category ID exists in the system\n        2.1.1. IF any category ID does not exist THEN\n              - Generate an error message indicating invalid category ID\n              - Skip deletion for this ID\n        2.1.2. ELSE continue to next validation\n     2.2. Check if each category can be deleted\n        2.2.1. Verify the category has no associated forums\n        2.2.2. IF category has associated forums THEN\n              - Generate an error message indicating category cannot be deleted\n              - Add to error list with category ID reference\n              - Skip deletion for this ID\n        2.2.3. ELSE mark category as eligible for deletion\n\n3. Business Rule Processing\n   - Process deletion eligibility for each category:\n     3.1. FOR each valid category ID in the input list:\n        3.1.1. Retrieve the complete category information\n        3.1.2. Check for any dependencies that would prevent deletion\n              - Verify no active references exist in other system components\n              - Ensure no ongoing operations involve this category\n        3.1.3. IF dependencies exist THEN\n              - Add to error list with reason\n              - Skip deletion for this ID\n        3.1.4. ELSE mark as ready for deletion\n\n4. Core Operation Execution\n   - Execute deletion for eligible categories:\n     4.1. FOR each category marked for deletion:\n        4.1.1. Retrieve the category object by ID\n        4.1.2. Delete the category from the database\n        4.1.3. Remove the category from the repository cache\n        4.1.4. IF deletion fails THEN\n              - Log the error\n              - Add to error list\n              - Attempt to restore previous state if possible\n        4.1.5. ELSE mark deletion as successful\n     4.2. Update any related security permissions\n        4.2.1. Remove any role values associated with deleted categories\n        4.2.2. Update security repositories as needed\n\n5. Response Generation\n   - Generate appropriate response based on operation results:\n     5.1. IF any errors occurred during deletion THEN\n        5.1.1. Compile all error messages into a consolidated error list\n        5.1.2. Include specific details about which categories could not be deleted and why\n        5.1.3. Return error list to the user interface\n     5.2. ELSE IF all deletions were successful THEN\n        5.2.1. Generate success message indicating all selected categories were deleted\n     5.3. ELSE IF some deletions succeeded and some failed THEN\n        5.3.1. Generate partial success message listing which categories were deleted\n        5.3.2. Include error details for categories that could not be deleted\n     5.4. Return to the category listing view showing updated category list",
  "databaseEntities": [
    "jforum_categories",
    "jforum_forums",
    "jforum_user_groups"
  ],
  "validationRules": [
    "Category must exist in the system to be deleted",
    "Category must not contain any forums to be eligible for deletion",
    "Category IDs must be valid integers",
    "At least one category ID must be selected for deletion"
  ],
  "dbSeedingOperations": [],
  "schema": {
    "Category": {
      "id": "integer",
      "name": "string",
      "order": "integer",
      "moderated": "boolean"
    }
  }
}