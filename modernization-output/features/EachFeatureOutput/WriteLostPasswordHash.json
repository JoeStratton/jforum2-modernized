{
  "featureName": "WriteLostPasswordHash",
  "description": "Stores or updates a lost password hash for a user's email address.",
  "inputValues": [
    "email-string-User",
    "hash-string-User"
  ],
  "businessLogic": "1. Input Collection\n   1.1. Collect user email address (mandatory)\n      1.1.1. Email must be provided as a string\n      1.1.2. Email is used to identify the user account\n   1.2. Collect password hash (mandatory)\n      1.2.1. Hash must be provided as a string\n      1.2.2. Hash can be empty to clear the stored hash\n      1.2.3. Hash represents a temporary token for password reset\n\n2. Data Validation\n   2.1. Validate email format\n      2.1.1. Check if email follows standard email format\n      2.1.2. IF email format is invalid, THEN return error message\n   2.2. Validate email existence\n      2.2.1. Check if the provided email exists in the system\n      2.2.2. IF email does not exist, THEN return appropriate error message\n   2.3. Validate hash format (when not empty)\n      2.3.1. Check if hash meets required format and length\n      2.3.2. IF hash format is invalid, THEN return error message\n\n3. Business Rule Processing\n   3.1. Check system state\n      3.1.1. Verify the system allows password reset operations\n      3.1.2. IF system is in maintenance mode, THEN return appropriate message\n   3.2. Check user account status\n      3.2.1. Verify the user account is active\n      3.2.2. IF account is locked, disabled, or deleted, THEN return appropriate message\n   3.3. Check for rate limiting\n      3.3.1. Verify the user hasn't exceeded password reset attempts\n      3.3.2. IF rate limit exceeded, THEN return appropriate message\n\n4. Core Operation Execution\n   4.1. Update user record\n      4.1.1. Locate user record using the email address\n      4.1.2. Update the lost password hash field with the provided hash value\n      4.1.3. IF hash is empty, THEN clear the existing hash value\n      4.1.4. Record the timestamp of this operation\n   4.2. Handle operation result\n      4.2.1. IF update operation fails, THEN prepare error response\n      4.2.2. IF update operation succeeds, THEN prepare success response\n\n5. Response Generation\n   5.1. Generate success response\n      5.1.1. Indicate the hash was successfully stored or cleared\n      5.1.2. Include timestamp of the operation\n   5.2. Generate error response\n      5.2.1. Include specific error code and message\n      5.2.2. Provide guidance on next steps\n      5.2.3. Include support contact information if needed",
  "databaseEntities": [
    "jforum_users"
  ],
  "validationRules": [
    "Email must be in valid format",
    "Email must exist in the system",
    "Hash must meet security requirements when provided",
    "User account must be active"
  ],
  "dbSeedingOperations": [],
  "schema": {
    "User": {
      "properties": {
        "email": {
          "type": "string",
          "format": "email",
          "description": "User's email address"
        },
        "hash": {
          "type": "string",
          "description": "Lost password hash for verification"
        }
      },
      "required": [
        "email"
      ]
    }
  }
}