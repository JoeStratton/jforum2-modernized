{
  "featureName": "DropOracleOrPostgreSQLTables",
  "description": "Removes existing database tables for Oracle or PostgreSQL database types.",
  "inputValues": [
    "dbType-string-Database",
    "connection-object-DatabaseConnection"
  ],
  "businessLogic": "1. Input Collection:\n   - Collect database type (dbType) - mandatory string input\n   - Obtain database connection (connection) - mandatory system-provided object\n\n2. Data Validation:\n   - Validate database type:\n     a. Check if dbType is not null or empty\n     b. Verify dbType equals either \"oracle\" or \"postgresql\"\n     c. If validation fails, generate appropriate error message\n   - Validate database connection:\n     a. Verify connection object is valid and active\n     b. Check if connection has proper permissions to execute DROP statements\n     c. If validation fails, generate appropriate error message with connection details\n\n3. Business Rule Processing:\n   - Check system state:\n     a. Verify system is in maintenance mode or installation process\n     b. Ensure no active users are connected to the system\n     c. IF system is not in appropriate state THEN\n        i. Generate warning about potential data loss\n        ii. Request confirmation before proceeding\n   - Verify database structure file exists:\n     a. Locate drop tables SQL file for the specified database type\n     b. Verify file is readable\n     c. IF file not found or not readable THEN\n        i. Log error message\n        ii. Abort operation\n\n4. Core Operation Execution:\n   - Prepare database connection:\n     a. Store current auto-commit setting\n     b. Set auto-commit to false to allow transaction control\n   - Process SQL statements:\n     a. Read drop table statements from configuration file\n     b. FOR EACH SQL statement in the file:\n        i. Skip empty or comment-only statements\n        ii. Execute the drop table statement\n        iii. IF execution fails THEN\n            1. Log error but continue with next statement (non-fatal errors)\n            2. Record failed statement for reporting\n   - Restore connection settings:\n     a. Restore original auto-commit setting\n     b. Ensure all resources are properly closed\n\n5. Response Generation:\n   - Generate success response:\n     a. Include count of successfully dropped tables\n     b. Include list of any tables that could not be dropped\n   - Generate error response if operation failed completely:\n     a. Include specific error details\n     b. Provide guidance on manual resolution steps\n   - Log operation completion status",
  "databaseEntities": [
    "jforum_users",
    "jforum_groups",
    "jforum_categories",
    "jforum_forums",
    "jforum_topics",
    "jforum_posts",
    "jforum_posts_text",
    "jforum_attachments",
    "jforum_privmsgs",
    "jforum_privmsgs_text",
    "jforum_moderator_groups",
    "jforum_user_groups",
    "jforum_sessions",
    "jforum_smilies",
    "jforum_words",
    "jforum_karma",
    "jforum_bookmarks",
    "jforum_quota_limit",
    "jforum_extension_groups"
  ],
  "validationRules": [
    "Database type must be either 'oracle' or 'postgresql'",
    "Database connection must be valid and active",
    "System must be in maintenance mode or installation process",
    "Drop tables SQL file must exist and be readable",
    "User must have sufficient database permissions to drop tables"
  ],
  "dbSeedingOperations": [],
  "schema": {
    "DatabaseConnection": {
      "type": "object",
      "properties": {
        "autoCommit": {
          "type": "boolean",
          "description": "Current auto-commit setting of the connection"
        },
        "closed": {
          "type": "boolean",
          "description": "Indicates if the connection is closed"
        }
      }
    }
  }
}