{
  "featureName": "RenderTemplate",
  "description": "Renders the appropriate template view after processing the request action.",
  "inputValues": [
    "requestContext-object-RequestContext",
    "responseContext-object-ResponseContext",
    "templateContext-object-SimpleHash",
    "action-string-Action"
  ],
  "businessLogic": "1. Input Collection:\n   - Collect RequestContext object containing request parameters and attributes\n   - Collect ResponseContext object for managing response data\n   - Collect SimpleHash context object for template data\n   - Collect action name as string\n   - System will use templateName (initially null) to track selected template\n\n2. Data Validation:\n   - Validate RequestContext is not null\n     * IF RequestContext is null THEN generate error message \"Request context cannot be null\"\n   - Validate ResponseContext is not null\n     * IF ResponseContext is null THEN generate error message \"Response context cannot be null\"\n   - Validate SimpleHash context is not null\n     * IF SimpleHash context is null THEN generate error message \"Template context cannot be null\"\n   - Validate action string is properly formatted\n     * IF action is null THEN use default action \"list\"\n     * IF action contains invalid characters THEN generate error message \"Invalid action name format\"\n\n3. Business Rule Processing:\n   - Check if action should be ignored\n     * IF ignoreAction flag is true THEN skip action processing\n   - Determine if action method exists\n     * IF action method exists in current class THEN prepare to invoke it\n     * IF action method does not exist THEN prepare to use default list method\n   - Check for custom content flag\n     * IF custom content flag is set THEN prepare to skip template rendering\n   - Check for redirect flag\n     * IF redirect flag is set THEN prepare to use empty template\n\n4. Core Operation Execution:\n   - Store request, response and context objects in class fields\n   - IF not ignoring action THEN:\n     * TRY to invoke the method matching the action name\n     * IF method not found THEN invoke the list() method\n     * IF any exception occurs during invocation THEN handle the exception appropriately\n   - Determine template name:\n     * IF redirect is requested THEN set template to empty template\n     * ELSE IF request has template attribute THEN use that template\n     * ELSE use template name set during action processing\n   - IF custom content flag is set THEN:\n     * Skip template rendering\n     * Return null template\n   - IF template name is still null THEN:\n     * Generate template not found error\n   - Load the template from the template configuration:\n     * Combine template directory path with template name\n     * Load template from the template engine\n     * IF template loading fails THEN generate appropriate error\n\n5. Response Generation:\n   - Return the loaded template object for rendering\n   - IF template loading successful THEN provide template to view renderer\n   - IF template loading failed THEN provide error details\n   - IF redirect requested THEN handle redirect instead of template rendering\n   - IF custom content requested THEN return null to allow custom handling",
  "databaseEntities": [],
  "validationRules": [
    "Request context must not be null",
    "Response context must not be null",
    "Template context must not be null",
    "Action name must be a valid method name",
    "Template name must be defined before rendering",
    "Template must exist in the template directory"
  ],
  "dbSeedingOperations": [],
  "schema": {
    "RequestContext": {
      "type": "object",
      "properties": {
        "action": {
          "type": "string",
          "description": "The action to be performed"
        },
        "attributes": {
          "type": "object",
          "description": "Collection of request attributes"
        }
      }
    },
    "ResponseContext": {
      "type": "object",
      "properties": {
        "contentType": {
          "type": "string",
          "description": "Content type of the response"
        }
      }
    },
    "SimpleHash": {
      "type": "object",
      "description": "Template data context containing variables for rendering"
    }
  }
}