{
  "featureName": "ValidateLostPasswordHash",
  "description": "Verifies a password recovery security hash to ensure the authenticity of a password reset request.",
  "inputValues": [
    "email-string-User",
    "hash-string-User"
  ],
  "businessLogic": "1. Input Collection:\n   - Collect the following required inputs:\n     a. email (string): User's email address used for identification\n     b. hash (string): Security hash generated during password recovery request\n   - Both fields are mandatory for this operation\n\n2. Data Validation:\n   - Validate email format:\n     a. Check if email is not empty\n     b. Verify email follows standard email format (contains @ and domain)\n     c. IF email format is invalid, THEN return validation error\n   - Validate hash format:\n     a. Check if hash is not empty\n     b. Verify hash meets required length and character requirements\n     c. IF hash format is invalid, THEN return validation error\n\n3. Business Rule Processing:\n   - Check user existence:\n     a. Verify that a user account with the provided email exists in the system\n     b. IF no user account is found, THEN return error indicating invalid email\n   - Check hash expiration:\n     a. Verify if the password recovery request is still valid (not expired)\n     b. IF request has expired, THEN return error indicating expired request\n\n4. Core Operation Execution:\n   - Retrieve stored hash:\n     a. Fetch the stored security hash associated with the provided email\n     b. IF no hash is found, THEN return error indicating no active recovery request\n   - Compare hashes:\n     a. Compare the provided hash with the stored hash using secure comparison\n     b. IF hashes do not match, THEN return error indicating invalid hash\n     c. IF hashes match, THEN mark validation as successful\n   - Clear hash after successful validation:\n     a. IF validation is successful, THEN clear the stored hash for security\n     b. This prevents the hash from being reused for multiple password resets\n\n5. Response Generation:\n   - For successful validation:\n     a. Return success status indicating the hash is valid\n     b. Include information that user can proceed with password reset\n   - For failed validation:\n     a. Return failure status with appropriate error message\n     b. Include guidance on how to request a new password recovery if needed",
  "databaseEntities": [
    "jforum_users"
  ],
  "validationRules": [
    "Email must not be empty",
    "Email must be in valid format",
    "Hash must not be empty",
    "Hash must match the stored hash for the given email",
    "Password recovery request must not be expired",
    "User account must exist for the provided email"
  ],
  "dbSeedingOperations": [],
  "schema": {}
}