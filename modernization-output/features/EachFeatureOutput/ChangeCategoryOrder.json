{
  "featureName": "ChangeCategoryOrder",
  "description": "Moves categories up or down in the display order sequence.",
  "inputValues": [
    "categoryId-number-Category",
    "direction-string-OrderDirection"
  ],
  "businessLogic": "1. Input Collection:\n   - Collect the following inputs:\n     a. categoryId (required): The unique identifier of the category to be reordered\n     b. direction (required): The direction to move the category (up or down)\n     c. System will retrieve the current list of categories in their existing order\n\n2. Data Validation:\n   - Validate categoryId:\n     a. Verify categoryId is a positive integer\n     b. Verify categoryId exists in the system\n     c. IF categoryId is invalid or not found, THEN display error message and abort operation\n   - Validate direction:\n     a. Verify direction is either 'up' or 'down'\n     b. IF direction is invalid, THEN display error message and abort operation\n   - Validate movement possibility:\n     a. IF direction is 'up' AND category is already at the top position, THEN display notification and abort operation\n     b. IF direction is 'down' AND category is already at the bottom position, THEN display notification and abort operation\n\n3. Business Rule Processing:\n   - Determine the current position of the category in the ordered list:\n     a. Find the index of the category in the current ordered list\n     b. IF category is not found in the list, THEN display error message and abort operation\n   - Identify the adjacent category for swapping:\n     a. IF direction is 'up', THEN identify the category immediately above (at index - 1)\n     b. IF direction is 'down', THEN identify the category immediately below (at index + 1)\n     c. IF no adjacent category exists in the specified direction, THEN display notification and abort operation\n\n4. Core Operation Execution:\n   - Swap the order values between the selected category and the adjacent category:\n     a. Retrieve the current order value of the selected category\n     b. Retrieve the current order value of the adjacent category\n     c. Update the selected category with the adjacent category's order value\n     d. Update the adjacent category with the selected category's order value\n   - Persist the updated order values to the database:\n     a. Save the updated order value for the selected category\n     b. Save the updated order value for the adjacent category\n     c. IF any database operation fails, THEN rollback all changes and display error message\n   - Update the in-memory category repository:\n     a. Refresh the category data in the system repository\n     b. Ensure the updated order is reflected in the system\n\n5. Response Generation:\n   - Generate success response:\n     a. Indicate successful reordering of the category\n     b. Display the updated list of categories in their new order\n   - IF any errors occurred during the process:\n     a. Display appropriate error message indicating the nature of the failure\n     b. Maintain the original ordering of categories",
  "databaseEntities": [
    "jforum_categories"
  ],
  "validationRules": [
    "Category ID must exist in the system",
    "Direction must be either 'up' or 'down'",
    "Category cannot be moved up if it's already at the top position",
    "Category cannot be moved down if it's already at the bottom position"
  ],
  "dbSeedingOperations": [],
  "schema": {
    "Category": {
      "id": "number",
      "name": "string",
      "order": "number",
      "moderated": "boolean"
    },
    "OrderDirection": {
      "type": "string",
      "enum": [
        "up",
        "down"
      ]
    }
  }
}